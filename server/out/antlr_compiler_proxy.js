"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
exports.antlrP4HeaderDec = new Map();
exports.antlrP4StructHeaders = new Map();
const antlr4_1 = require("antlr4");
const P4Lexer_1 = require("./antlr_autogenerated/P4Lexer");
const P4Parser_1 = require("./antlr_autogenerated/P4Parser");
const tree_1 = require("antlr4/tree");
const symbolTablePass_1 = require("./symbolTablePass");
const symbolTableCheck_1 = require("./symbolTableCheck");
function sendToAntlrCompiler(textDocument) {
    utils_1.loglog("Change in the code. Running Antlr Compiler");
    let input = textDocument.getText();
    var chars = new antlr4_1.InputStream(input);
    var lexer = new P4Lexer_1.P4Lexer(chars);
    lexer.strictMode = false; // do not use js strictMode
    var tokens = new antlr4_1.CommonTokenStream(lexer);
    var parser = new P4Parser_1.P4Parser(tokens);
    parser.buildParseTrees = true;
    var tree = parser.input();
    // need p4Visitor here -> new p4visitor() = my visitor.start(tree)
    //logloglog(tree.toStringTree(parser.ruleNames));
    ////Establishing symbol table -> installed package from https://www.npmjs.com/package/symbol-table (npm install symbol-table)
    var SymbolTable = require("symbol-table");
    var SymbolTableStack = require("symbol-table/stack");
    var symTableStack = SymbolTableStack();
    var symTablePass = new symbolTablePass_1.SymbolTablePass(symTableStack);
    try {
        tree_1.ParseTreeWalker.DEFAULT.walk(symTablePass, tree); //now this is the code that walks the AST? and searches for errors?
    }
    catch (e) { }
    var symTableCheck = new symbolTableCheck_1.SymbolTableCheck(symTableStack);
    try {
        tree_1.ParseTreeWalker.DEFAULT.walk(symTableCheck, tree); //now this is the code that walks the AST? and searches for errors?
    }
    catch (e) { }
}
exports.sendToAntlrCompiler = sendToAntlrCompiler;
//# sourceMappingURL=antlr_compiler_proxy.js.map