"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("./utils/logger");
const antlr4_1 = require("antlr4");
const P4Lexer_1 = require("./antlr_autogenerated/P4Lexer");
const P4Parser_1 = require("./antlr_autogenerated/P4Parser");
const P4Listener_1 = require("./antlr_autogenerated/P4Listener");
const tree_1 = require("antlr4/tree");
const server_1 = require("./server");
const antlr_error_listner_1 = require("./antlr_error_listner");
const my_p4_listener_1 = require("./compiler/my_p4_listener");
exports.MY_LISTENER = null;
function sendToAntlrCompiler(textDocument) {
    logger_1.logDebugT("Compile request to ANTLR4 compiler.....");
    let errorListener = new antlr_error_listner_1.MyErrorListner(textDocument);
    let tree = setupLexerAndParser(textDocument, errorListener);
    try {
        tree_1.ParseTreeWalker.DEFAULT.walk(exports.MY_LISTENER, tree);
    }
    catch (e) {
        logger_1.logError("Compile Error: " + e);
    }
    logger_1.logDebugT("ANTLR compiler Finished!");
    if (!errorListener.isEmpty()) {
        let diagnostics = errorListener.getDiagnostics();
        server_1.p4ExtensionServer.connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
    }
}
exports.sendToAntlrCompiler = sendToAntlrCompiler;
function setupLexerAndParser(textDocument, errorListener) {
    if (exports.MY_LISTENER == null)
        exports.MY_LISTENER = new my_p4_listener_1.MyP4Listener();
    let input = textDocument.getText();
    let chars = new antlr4_1.InputStream(input);
    let lexer = new P4Lexer_1.P4Lexer(chars);
    lexer.strictMode = false; // do not use js strictMode
    let tokens = new antlr4_1.CommonTokenStream(lexer);
    let parser = new P4Parser_1.P4Parser(tokens);
    parser.removeErrorListeners(); // Remove default ConsoleErrorListener
    parser.addErrorListener(errorListener); // Add custom error listener
    parser.buildParseTrees = true;
    let tree = parser.program();
    return tree;
}
function getName(ctx) {
    class NameListener extends P4Listener_1.P4Listener {
        enterName(ctx) {
            if (this.name == null)
                this.name = ctx.getText();
        }
        getName() {
            return this.name;
        }
    }
    let nameListener = new NameListener();
    try {
        tree_1.ParseTreeWalker.DEFAULT.walk(nameListener, ctx);
    }
    catch (e) {
        logger_1.logError("Compile Error: " + e);
    }
    return nameListener.getName();
}
exports.getName = getName;
//# sourceMappingURL=antlr_compiler_proxy.js.map