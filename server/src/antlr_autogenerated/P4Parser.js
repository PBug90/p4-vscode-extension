// Generated from /Users/ali/Desktop/p4-ide/antlr_compiler/grammars/P4.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var P4Listener = require('./P4Listener').P4Listener;
var grammarFileName = "P4.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003]\u0609\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0004{\t{\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004",
    "\u0100\n\u0004\f\u0004\u000e\u0004\u0103\u000b\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0110\n\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u011b\n\u0007\u0003",
    "\b\u0003\b\u0005\b\u011f\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u0125\n\t\u0003\n\u0003\n\u0005\n\u0129\n\n\u0003\u000b\u0003\u000b",
    "\u0005\u000b\u012d\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007",
    "\f\u0134\n\f\f\f\u000e\f\u0137\u000b\f\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u0145\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u014f\n\u000e\f\u000e",
    "\u000e\u000e\u0152\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u01a7\n\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u01af\n",
    "\u0010\f\u0010\u000e\u0010\u01b2\u000b\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u01ba\n",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0007\u0013\u01c2\n\u0013\f\u0013\u000e\u0013\u01c5\u000b\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u01d3\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u01d9\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0205\n\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0007\u0019\u020e\n\u0019\f\u0019\u000e\u0019\u0211\u000b\u0019",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u0215\n\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u021c\n\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0007\u001e\u022a\n\u001e\f\u001e\u000e\u001e\u022d\u000b\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0233\n\u001f",
    "\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0007!\u0242\n!\f!\u000e!\u0245\u000b!\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003",
    "#\u0003#\u0007#\u0252\n#\f#\u000e#\u0255\u000b#\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0005$\u025c\n$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "&\u0003&\u0003&\u0005&\u0266\n&\u0003\'\u0003\'\u0003\'\u0003\'\u0005",
    "\'\u026c\n\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003)\u0003)\u0003)\u0007)\u0279\n)\f)\u000e)\u027c\u000b)\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0005+\u0285\n+\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0007-\u0293\n-\f-\u000e-\u0296\u000b-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u02a3\n.\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0005/\u02c6\n/\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00032\u00032\u00032\u00072\u02db\n2\f2\u000e2\u02de\u000b2\u0003",
    "3\u00033\u00033\u00033\u00033\u00053\u02e5\n3\u00034\u00034\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00055\u02fb\n5\u00036\u0003",
    "6\u00036\u00076\u0300\n6\f6\u000e6\u0303\u000b6\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00058\u031c\n8\u00039\u00039\u00039\u00039\u00039\u00059\u0323\n",
    "9\u0003:\u0003:\u0005:\u0327\n:\u0003;\u0003;\u0003;\u0003;\u0005;\u032d",
    "\n;\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0005@\u0365\n@\u0003A\u0003A\u0003A\u0005",
    "A\u036a\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u0371\nB\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0007C\u0379\nC\fC\u000eC\u037c",
    "\u000bC\u0003D\u0003D\u0003D\u0003D\u0005D\u0382\nD\u0003E\u0003E\u0005",
    "E\u0386\nE\u0003E\u0003E\u0003E\u0007E\u038b\nE\fE\u000eE\u038e\u000b",
    "E\u0003F\u0003F\u0003F\u0005F\u0393\nF\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0007G\u039b\nG\fG\u000eG\u039e\u000bG\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0005H\u03ad\nH\u0003I\u0003I\u0003I\u0003I\u0005I\u03b3\nI\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003M\u0003M\u0003M\u0007M\u03cd\nM\fM\u000eM\u03d0\u000bM\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0005O\u03e9\nO\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0007P\u03f1\nP\fP\u000eP\u03f4\u000bP\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0007T\u040a\nT\fT\u000e",
    "T\u040d\u000bT\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0005U\u0423\nU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0005V\u0439\nV\u0003W\u0003W\u0003X\u0003",
    "X\u0003X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0446\nY\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0005Z\u0456\nZ\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0005\\\u0468\n\\\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003^\u0003^\u0003^\u0007^\u0472\n^\f^\u000e^\u0475\u000b^\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003",
    "`\u0007`\u0482\n`\f`\u000e`\u0485\u000b`\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0005a\u048e\na\u0003b\u0003b\u0005b\u0492\n",
    "b\u0003c\u0003c\u0003c\u0003c\u0005c\u0498\nc\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003e\u0003e\u0003e\u0007e\u04a6",
    "\ne\fe\u000ee\u04a9\u000be\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0005f\u04c6\nf\u0003g\u0003g\u0003g\u0007g\u04cb\ng\fg\u000e",
    "g\u04ce\u000bg\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003i\u0003",
    "i\u0003i\u0003i\u0003i\u0007i\u04db\ni\fi\u000ei\u04de\u000bi\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u04e9",
    "\nj\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0005",
    "l\u04fe\nl\u0003m\u0003m\u0003m\u0003m\u0003m\u0007m\u0505\nm\fm\u000e",
    "m\u0508\u000bm\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0005o\u051d\no\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0003q\u0003q\u0003q\u0005q\u052a\nq\u0003r\u0003r\u0003s\u0003",
    "s\u0003s\u0003t\u0003t\u0005t\u0533\nt\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0007u\u053b\nu\fu\u000eu\u053e\u000bu\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0005v\u0546\nv\u0003w\u0003w\u0005w\u054a\n",
    "w\u0003w\u0003w\u0003w\u0007w\u054f\nw\fw\u000ew\u0552\u000bw\u0003",
    "x\u0003x\u0003x\u0003x\u0005x\u0558\nx\u0003y\u0003y\u0003y\u0005y\u055d",
    "\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0007y\u056e\ny\fy\u000ey\u0571",
    "\u000by\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0005z\u059e\nz\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0007z\u0602\nz\fz\u000ez\u0605\u000b",
    "z\u0003{\u0003{\u0003{\u0002\u001f\u0006\u0016\u001a\u001e$0:@DPXbj",
    "\u0084\u0088\u008c\u0098\u009e\u00a6\u00ba\u00be\u00c8\u00cc\u00d0\u00d8",
    "\u00e8\u00ec\u00f0\u00f2|\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be",
    "\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6",
    "\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee",
    "\u00f0\u00f2\u00f4\u0002\u0003\u0003\u0002[\\\u0002\u06a5\u0002\u00f6",
    "\u0003\u0002\u0002\u0002\u0004\u00f8\u0003\u0002\u0002\u0002\u0006\u00fa",
    "\u0003\u0002\u0002\u0002\b\u010f\u0003\u0002\u0002\u0002\n\u0111\u0003",
    "\u0002\u0002\u0002\f\u011a\u0003\u0002\u0002\u0002\u000e\u011e\u0003",
    "\u0002\u0002\u0002\u0010\u0124\u0003\u0002\u0002\u0002\u0012\u0128\u0003",
    "\u0002\u0002\u0002\u0014\u012c\u0003\u0002\u0002\u0002\u0016\u012e\u0003",
    "\u0002\u0002\u0002\u0018\u0144\u0003\u0002\u0002\u0002\u001a\u0146\u0003",
    "\u0002\u0002\u0002\u001c\u01a6\u0003\u0002\u0002\u0002\u001e\u01a8\u0003",
    "\u0002\u0002\u0002 \u01b3\u0003\u0002\u0002\u0002\"\u01b9\u0003\u0002",
    "\u0002\u0002$\u01bb\u0003\u0002\u0002\u0002&\u01d2\u0003\u0002\u0002",
    "\u0002(\u01d8\u0003\u0002\u0002\u0002*\u01da\u0003\u0002\u0002\u0002",
    ",\u0204\u0003\u0002\u0002\u0002.\u0206\u0003\u0002\u0002\u00020\u020a",
    "\u0003\u0002\u0002\u00022\u0214\u0003\u0002\u0002\u00024\u021b\u0003",
    "\u0002\u0002\u00026\u021d\u0003\u0002\u0002\u00028\u021f\u0003\u0002",
    "\u0002\u0002:\u0226\u0003\u0002\u0002\u0002<\u0232\u0003\u0002\u0002",
    "\u0002>\u0234\u0003\u0002\u0002\u0002@\u023c\u0003\u0002\u0002\u0002",
    "B\u0246\u0003\u0002\u0002\u0002D\u024e\u0003\u0002\u0002\u0002F\u025b",
    "\u0003\u0002\u0002\u0002H\u025d\u0003\u0002\u0002\u0002J\u0265\u0003",
    "\u0002\u0002\u0002L\u026b\u0003\u0002\u0002\u0002N\u026d\u0003\u0002",
    "\u0002\u0002P\u0275\u0003\u0002\u0002\u0002R\u027d\u0003\u0002\u0002",
    "\u0002T\u0284\u0003\u0002\u0002\u0002V\u0286\u0003\u0002\u0002\u0002",
    "X\u028c\u0003\u0002\u0002\u0002Z\u02a2\u0003\u0002\u0002\u0002\\\u02c5",
    "\u0003\u0002\u0002\u0002^\u02c7\u0003\u0002\u0002\u0002`\u02cf\u0003",
    "\u0002\u0002\u0002b\u02d7\u0003\u0002\u0002\u0002d\u02e4\u0003\u0002",
    "\u0002\u0002f\u02e6\u0003\u0002\u0002\u0002h\u02fa\u0003\u0002\u0002",
    "\u0002j\u02fc\u0003\u0002\u0002\u0002l\u0304\u0003\u0002\u0002\u0002",
    "n\u031b\u0003\u0002\u0002\u0002p\u0322\u0003\u0002\u0002\u0002r\u0326",
    "\u0003\u0002\u0002\u0002t\u032c\u0003\u0002\u0002\u0002v\u032e\u0003",
    "\u0002\u0002\u0002x\u0330\u0003\u0002\u0002\u0002z\u0335\u0003\u0002",
    "\u0002\u0002|\u033a\u0003\u0002\u0002\u0002~\u0364\u0003\u0002\u0002",
    "\u0002\u0080\u0369\u0003\u0002\u0002\u0002\u0082\u0370\u0003\u0002\u0002",
    "\u0002\u0084\u0372\u0003\u0002\u0002\u0002\u0086\u0381\u0003\u0002\u0002",
    "\u0002\u0088\u0385\u0003\u0002\u0002\u0002\u008a\u0392\u0003\u0002\u0002",
    "\u0002\u008c\u0394\u0003\u0002\u0002\u0002\u008e\u03ac\u0003\u0002\u0002",
    "\u0002\u0090\u03b2\u0003\u0002\u0002\u0002\u0092\u03b4\u0003\u0002\u0002",
    "\u0002\u0094\u03bb\u0003\u0002\u0002\u0002\u0096\u03c2\u0003\u0002\u0002",
    "\u0002\u0098\u03c9\u0003\u0002\u0002\u0002\u009a\u03d1\u0003\u0002\u0002",
    "\u0002\u009c\u03e8\u0003\u0002\u0002\u0002\u009e\u03ea\u0003\u0002\u0002",
    "\u0002\u00a0\u03f5\u0003\u0002\u0002\u0002\u00a2\u03f9\u0003\u0002\u0002",
    "\u0002\u00a4\u03fe\u0003\u0002\u0002\u0002\u00a6\u0403\u0003\u0002\u0002",
    "\u0002\u00a8\u0422\u0003\u0002\u0002\u0002\u00aa\u0438\u0003\u0002\u0002",
    "\u0002\u00ac\u043a\u0003\u0002\u0002\u0002\u00ae\u043c\u0003\u0002\u0002",
    "\u0002\u00b0\u0445\u0003\u0002\u0002\u0002\u00b2\u0455\u0003\u0002\u0002",
    "\u0002\u00b4\u0457\u0003\u0002\u0002\u0002\u00b6\u0467\u0003\u0002\u0002",
    "\u0002\u00b8\u0469\u0003\u0002\u0002\u0002\u00ba\u046e\u0003\u0002\u0002",
    "\u0002\u00bc\u0476\u0003\u0002\u0002\u0002\u00be\u047e\u0003\u0002\u0002",
    "\u0002\u00c0\u048d\u0003\u0002\u0002\u0002\u00c2\u0491\u0003\u0002\u0002",
    "\u0002\u00c4\u0497\u0003\u0002\u0002\u0002\u00c6\u0499\u0003\u0002\u0002",
    "\u0002\u00c8\u04a0\u0003\u0002\u0002\u0002\u00ca\u04c5\u0003\u0002\u0002",
    "\u0002\u00cc\u04c7\u0003\u0002\u0002\u0002\u00ce\u04cf\u0003\u0002\u0002",
    "\u0002\u00d0\u04d5\u0003\u0002\u0002\u0002\u00d2\u04e8\u0003\u0002\u0002",
    "\u0002\u00d4\u04ea\u0003\u0002\u0002\u0002\u00d6\u04fd\u0003\u0002\u0002",
    "\u0002\u00d8\u04ff\u0003\u0002\u0002\u0002\u00da\u0509\u0003\u0002\u0002",
    "\u0002\u00dc\u051c\u0003\u0002\u0002\u0002\u00de\u051e\u0003\u0002\u0002",
    "\u0002\u00e0\u0529\u0003\u0002\u0002\u0002\u00e2\u052b\u0003\u0002\u0002",
    "\u0002\u00e4\u052d\u0003\u0002\u0002\u0002\u00e6\u0532\u0003\u0002\u0002",
    "\u0002\u00e8\u0534\u0003\u0002\u0002\u0002\u00ea\u0545\u0003\u0002\u0002",
    "\u0002\u00ec\u0549\u0003\u0002\u0002\u0002\u00ee\u0557\u0003\u0002\u0002",
    "\u0002\u00f0\u055c\u0003\u0002\u0002\u0002\u00f2\u059d\u0003\u0002\u0002",
    "\u0002\u00f4\u0606\u0003\u0002\u0002\u0002\u00f6\u00f7\u0005\u0004\u0003",
    "\u0002\u00f7\u0003\u0003\u0002\u0002\u0002\u00f8\u00f9\u0005\u0006\u0004",
    "\u0002\u00f9\u0005\u0003\u0002\u0002\u0002\u00fa\u0101\b\u0004\u0001",
    "\u0002\u00fb\u00fc\f\u0004\u0002\u0002\u00fc\u0100\u0005\b\u0005\u0002",
    "\u00fd\u00fe\f\u0003\u0002\u0002\u00fe\u0100\u0007S\u0002\u0002\u00ff",
    "\u00fb\u0003\u0002\u0002\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u0100",
    "\u0103\u0003\u0002\u0002\u0002\u0101\u00ff\u0003\u0002\u0002\u0002\u0101",
    "\u0102\u0003\u0002\u0002\u0002\u0102\u0007\u0003\u0002\u0002\u0002\u0103",
    "\u0101\u0003\u0002\u0002\u0002\u0104\u0110\u0005\u00dep\u0002\u0105",
    "\u0110\u0005h5\u0002\u0106\u0110\u0005\u00dan\u0002\u0107\u0110\u0005",
    "8\u001d\u0002\u0108\u0110\u0005\u008eH\u0002\u0109\u0110\u0005^0\u0002",
    "\u010a\u0110\u0005,\u0017\u0002\u010b\u0110\u0005\u00a2R\u0002\u010c",
    "\u0110\u0005\u00a4S\u0002\u010d\u0110\u0005\u00e4s\u0002\u010e\u0110",
    "\u0005\n\u0006\u0002\u010f\u0104\u0003\u0002\u0002\u0002\u010f\u0105",
    "\u0003\u0002\u0002\u0002\u010f\u0106\u0003\u0002\u0002\u0002\u010f\u0107",
    "\u0003\u0002\u0002\u0002\u010f\u0108\u0003\u0002\u0002\u0002\u010f\u0109",
    "\u0003\u0002\u0002\u0002\u010f\u010a\u0003\u0002\u0002\u0002\u010f\u010b",
    "\u0003\u0002\u0002\u0002\u010f\u010c\u0003\u0002\u0002\u0002\u010f\u010d",
    "\u0003\u0002\u0002\u0002\u010f\u010e\u0003\u0002\u0002\u0002\u0110\t",
    "\u0003\u0002\u0002\u0002\u0111\u0112\u0007Z\u0002\u0002\u0112\u000b",
    "\u0003\u0002\u0002\u0002\u0113\u011b\u0005\u00f4{\u0002\u0114\u011b",
    "\u0007\u0007\u0002\u0002\u0115\u011b\u0007\u001a\u0002\u0002\u0116\u011b",
    "\u0007\u0006\u0002\u0002\u0117\u011b\u0007\"\u0002\u0002\u0118\u011b",
    "\u0007\u000e\u0002\u0002\u0119\u011b\u0007\u001c\u0002\u0002\u011a\u0113",
    "\u0003\u0002\u0002\u0002\u011a\u0114\u0003\u0002\u0002\u0002\u011a\u0115",
    "\u0003\u0002\u0002\u0002\u011a\u0116\u0003\u0002\u0002\u0002\u011a\u0117",
    "\u0003\u0002\u0002\u0002\u011a\u0118\u0003\u0002\u0002\u0002\u011a\u0119",
    "\u0003\u0002\u0002\u0002\u011b\r\u0003\u0002\u0002\u0002\u011c\u011f",
    "\u0005\f\u0007\u0002\u011d\u011f\u0005\u00f4{\u0002\u011e\u011c\u0003",
    "\u0002\u0002\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011f\u000f\u0003",
    "\u0002\u0002\u0002\u0120\u0125\u0005\u00f4{\u0002\u0121\u0125\u0007",
    "\u0007\u0002\u0002\u0122\u0125\u0007\"\u0002\u0002\u0123\u0125\u0007",
    "\u001c\u0002\u0002\u0124\u0120\u0003\u0002\u0002\u0002\u0124\u0121\u0003",
    "\u0002\u0002\u0002\u0124\u0122\u0003\u0002\u0002\u0002\u0124\u0123\u0003",
    "\u0002\u0002\u0002\u0125\u0011\u0003\u0002\u0002\u0002\u0126\u0129\u0003",
    "\u0002\u0002\u0002\u0127\u0129\u0007\n\u0002\u0002\u0128\u0126\u0003",
    "\u0002\u0002\u0002\u0128\u0127\u0003\u0002\u0002\u0002\u0129\u0013\u0003",
    "\u0002\u0002\u0002\u012a\u012d\u0003\u0002\u0002\u0002\u012b\u012d\u0005",
    "\u0016\f\u0002\u012c\u012a\u0003\u0002\u0002\u0002\u012c\u012b\u0003",
    "\u0002\u0002\u0002\u012d\u0015\u0003\u0002\u0002\u0002\u012e\u012f\b",
    "\f\u0001\u0002\u012f\u0130\u0005\u0018\r\u0002\u0130\u0135\u0003\u0002",
    "\u0002\u0002\u0131\u0132\f\u0003\u0002\u0002\u0132\u0134\u0005\u0018",
    "\r\u0002\u0133\u0131\u0003\u0002\u0002\u0002\u0134\u0137\u0003\u0002",
    "\u0002\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002",
    "\u0002\u0002\u0136\u0017\u0003\u0002\u0002\u0002\u0137\u0135\u0003\u0002",
    "\u0002\u0002\u0138\u0139\u0007T\u0002\u0002\u0139\u0145\u0005\u000e",
    "\b\u0002\u013a\u013b\u0007T\u0002\u0002\u013b\u013c\u0005\u000e\b\u0002",
    "\u013c\u013d\u0007E\u0002\u0002\u013d\u013e\u0005\u001a\u000e\u0002",
    "\u013e\u013f\u0007F\u0002\u0002\u013f\u0145\u0003\u0002\u0002\u0002",
    "\u0140\u0141\u0007\u0003\u0002\u0002\u0141\u0142\u0005\u000e\b\u0002",
    "\u0142\u0143\u0005\u001a\u000e\u0002\u0143\u0145\u0003\u0002\u0002\u0002",
    "\u0144\u0138\u0003\u0002\u0002\u0002\u0144\u013a\u0003\u0002\u0002\u0002",
    "\u0144\u0140\u0003\u0002\u0002\u0002\u0145\u0019\u0003\u0002\u0002\u0002",
    "\u0146\u0150\b\u000e\u0001\u0002\u0147\u0148\f\u0004\u0002\u0002\u0148",
    "\u0149\u0007E\u0002\u0002\u0149\u014a\u0005\u001a\u000e\u0002\u014a",
    "\u014b\u0007F\u0002\u0002\u014b\u014f\u0003\u0002\u0002\u0002\u014c",
    "\u014d\f\u0003\u0002\u0002\u014d\u014f\u0005\u001c\u000f\u0002\u014e",
    "\u0147\u0003\u0002\u0002\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014f",
    "\u0152\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0003\u0002\u0002\u0002\u0151\u001b\u0003\u0002\u0002\u0002\u0152",
    "\u0150\u0003\u0002\u0002\u0002\u0153\u01a7\u0007U\u0002\u0002\u0154",
    "\u01a7\u0007\u0004\u0002\u0002\u0155\u01a7\u0007\u0005\u0002\u0002\u0156",
    "\u01a7\u0007\u0006\u0002\u0002\u0157\u01a7\u0007\u0007\u0002\u0002\u0158",
    "\u01a7\u0007\b\u0002\u0002\u0159\u01a7\u0007\t\u0002\u0002\u015a\u01a7",
    "\u0007\n\u0002\u0002\u015b\u01a7\u0007\u000b\u0002\u0002\u015c\u01a7",
    "\u0007\f\u0002\u0002\u015d\u01a7\u0007\r\u0002\u0002\u015e\u01a7\u0007",
    "\u000e\u0002\u0002\u015f\u01a7\u0007\u000f\u0002\u0002\u0160\u01a7\u0007",
    "\u0010\u0002\u0002\u0161\u01a7\u0007\u0011\u0002\u0002\u0162\u01a7\u0007",
    "\u0012\u0002\u0002\u0163\u01a7\u0007\u0013\u0002\u0002\u0164\u01a7\u0007",
    "\u0014\u0002\u0002\u0165\u01a7\u0007\u0015\u0002\u0002\u0166\u01a7\u0007",
    "\u0016\u0002\u0002\u0167\u01a7\u0007\u0017\u0002\u0002\u0168\u01a7\u0007",
    "\u0018\u0002\u0002\u0169\u01a7\u0007\u0019\u0002\u0002\u016a\u01a7\u0007",
    "\u001a\u0002\u0002\u016b\u01a7\u0007\u001b\u0002\u0002\u016c\u01a7\u0007",
    "\u001c\u0002\u0002\u016d\u01a7\u0007\u001d\u0002\u0002\u016e\u01a7\u0007",
    "\u001e\u0002\u0002\u016f\u01a7\u0007\u001f\u0002\u0002\u0170\u01a7\u0007",
    "\u0003\u0002\u0002\u0171\u01a7\u0007 \u0002\u0002\u0172\u01a7\u0007",
    "!\u0002\u0002\u0173\u01a7\u0007\"\u0002\u0002\u0174\u01a7\u0007$\u0002",
    "\u0002\u0175\u01a7\u0007%\u0002\u0002\u0176\u01a7\u0007&\u0002\u0002",
    "\u0177\u01a7\u0007\'\u0002\u0002\u0178\u01a7\u0007(\u0002\u0002\u0179",
    "\u01a7\u0007)\u0002\u0002\u017a\u01a7\u0007*\u0002\u0002\u017b\u01a7",
    "\u0007+\u0002\u0002\u017c\u01a7\u0007,\u0002\u0002\u017d\u01a7\u0007",
    "-\u0002\u0002\u017e\u01a7\u0007.\u0002\u0002\u017f\u01a7\u0007/\u0002",
    "\u0002\u0180\u01a7\u0005\u00f4{\u0002\u0181\u01a7\u0007Y\u0002\u0002",
    "\u0182\u01a7\u0007]\u0002\u0002\u0183\u01a7\u00070\u0002\u0002\u0184",
    "\u01a7\u00071\u0002\u0002\u0185\u01a7\u00072\u0002\u0002\u0186\u01a7",
    "\u00073\u0002\u0002\u0187\u01a7\u00074\u0002\u0002\u0188\u01a7\u0007",
    "5\u0002\u0002\u0189\u01a7\u00076\u0002\u0002\u018a\u01a7\u00077\u0002",
    "\u0002\u018b\u01a7\u00078\u0002\u0002\u018c\u01a7\u00079\u0002\u0002",
    "\u018d\u01a7\u0007:\u0002\u0002\u018e\u01a7\u0007;\u0002\u0002\u018f",
    "\u01a7\u0007<\u0002\u0002\u0190\u01a7\u0007=\u0002\u0002\u0191\u01a7",
    "\u0007>\u0002\u0002\u0192\u01a7\u0007?\u0002\u0002\u0193\u01a7\u0007",
    "@\u0002\u0002\u0194\u01a7\u0007A\u0002\u0002\u0195\u01a7\u0007B\u0002",
    "\u0002\u0196\u01a7\u0007C\u0002\u0002\u0197\u01a7\u0007D\u0002\u0002",
    "\u0198\u01a7\u0007G\u0002\u0002\u0199\u01a7\u0007H\u0002\u0002\u019a",
    "\u01a7\u0007I\u0002\u0002\u019b\u01a7\u0007J\u0002\u0002\u019c\u01a7",
    "\u0007K\u0002\u0002\u019d\u01a7\u0007L\u0002\u0002\u019e\u01a7\u0007",
    "M\u0002\u0002\u019f\u01a7\u0007N\u0002\u0002\u01a0\u01a7\u0007O\u0002",
    "\u0002\u01a1\u01a7\u0007P\u0002\u0002\u01a2\u01a7\u0007Q\u0002\u0002",
    "\u01a3\u01a7\u0007R\u0002\u0002\u01a4\u01a7\u0007S\u0002\u0002\u01a5",
    "\u01a7\u0007T\u0002\u0002\u01a6\u0153\u0003\u0002\u0002\u0002\u01a6",
    "\u0154\u0003\u0002\u0002\u0002\u01a6\u0155\u0003\u0002\u0002\u0002\u01a6",
    "\u0156\u0003\u0002\u0002\u0002\u01a6\u0157\u0003\u0002\u0002\u0002\u01a6",
    "\u0158\u0003\u0002\u0002\u0002\u01a6\u0159\u0003\u0002\u0002\u0002\u01a6",
    "\u015a\u0003\u0002\u0002\u0002\u01a6\u015b\u0003\u0002\u0002\u0002\u01a6",
    "\u015c\u0003\u0002\u0002\u0002\u01a6\u015d\u0003\u0002\u0002\u0002\u01a6",
    "\u015e\u0003\u0002\u0002\u0002\u01a6\u015f\u0003\u0002\u0002\u0002\u01a6",
    "\u0160\u0003\u0002\u0002\u0002\u01a6\u0161\u0003\u0002\u0002\u0002\u01a6",
    "\u0162\u0003\u0002\u0002\u0002\u01a6\u0163\u0003\u0002\u0002\u0002\u01a6",
    "\u0164\u0003\u0002\u0002\u0002\u01a6\u0165\u0003\u0002\u0002\u0002\u01a6",
    "\u0166\u0003\u0002\u0002\u0002\u01a6\u0167\u0003\u0002\u0002\u0002\u01a6",
    "\u0168\u0003\u0002\u0002\u0002\u01a6\u0169\u0003\u0002\u0002\u0002\u01a6",
    "\u016a\u0003\u0002\u0002\u0002\u01a6\u016b\u0003\u0002\u0002\u0002\u01a6",
    "\u016c\u0003\u0002\u0002\u0002\u01a6\u016d\u0003\u0002\u0002\u0002\u01a6",
    "\u016e\u0003\u0002\u0002\u0002\u01a6\u016f\u0003\u0002\u0002\u0002\u01a6",
    "\u0170\u0003\u0002\u0002\u0002\u01a6\u0171\u0003\u0002\u0002\u0002\u01a6",
    "\u0172\u0003\u0002\u0002\u0002\u01a6\u0173\u0003\u0002\u0002\u0002\u01a6",
    "\u0174\u0003\u0002\u0002\u0002\u01a6\u0175\u0003\u0002\u0002\u0002\u01a6",
    "\u0176\u0003\u0002\u0002\u0002\u01a6\u0177\u0003\u0002\u0002\u0002\u01a6",
    "\u0178\u0003\u0002\u0002\u0002\u01a6\u0179\u0003\u0002\u0002\u0002\u01a6",
    "\u017a\u0003\u0002\u0002\u0002\u01a6\u017b\u0003\u0002\u0002\u0002\u01a6",
    "\u017c\u0003\u0002\u0002\u0002\u01a6\u017d\u0003\u0002\u0002\u0002\u01a6",
    "\u017e\u0003\u0002\u0002\u0002\u01a6\u017f\u0003\u0002\u0002\u0002\u01a6",
    "\u0180\u0003\u0002\u0002\u0002\u01a6\u0181\u0003\u0002\u0002\u0002\u01a6",
    "\u0182\u0003\u0002\u0002\u0002\u01a6\u0183\u0003\u0002\u0002\u0002\u01a6",
    "\u0184\u0003\u0002\u0002\u0002\u01a6\u0185\u0003\u0002\u0002\u0002\u01a6",
    "\u0186\u0003\u0002\u0002\u0002\u01a6\u0187\u0003\u0002\u0002\u0002\u01a6",
    "\u0188\u0003\u0002\u0002\u0002\u01a6\u0189\u0003\u0002\u0002\u0002\u01a6",
    "\u018a\u0003\u0002\u0002\u0002\u01a6\u018b\u0003\u0002\u0002\u0002\u01a6",
    "\u018c\u0003\u0002\u0002\u0002\u01a6\u018d\u0003\u0002\u0002\u0002\u01a6",
    "\u018e\u0003\u0002\u0002\u0002\u01a6\u018f\u0003\u0002\u0002\u0002\u01a6",
    "\u0190\u0003\u0002\u0002\u0002\u01a6\u0191\u0003\u0002\u0002\u0002\u01a6",
    "\u0192\u0003\u0002\u0002\u0002\u01a6\u0193\u0003\u0002\u0002\u0002\u01a6",
    "\u0194\u0003\u0002\u0002\u0002\u01a6\u0195\u0003\u0002\u0002\u0002\u01a6",
    "\u0196\u0003\u0002\u0002\u0002\u01a6\u0197\u0003\u0002\u0002\u0002\u01a6",
    "\u0198\u0003\u0002\u0002\u0002\u01a6\u0199\u0003\u0002\u0002\u0002\u01a6",
    "\u019a\u0003\u0002\u0002\u0002\u01a6\u019b\u0003\u0002\u0002\u0002\u01a6",
    "\u019c\u0003\u0002\u0002\u0002\u01a6\u019d\u0003\u0002\u0002\u0002\u01a6",
    "\u019e\u0003\u0002\u0002\u0002\u01a6\u019f\u0003\u0002\u0002\u0002\u01a6",
    "\u01a0\u0003\u0002\u0002\u0002\u01a6\u01a1\u0003\u0002\u0002\u0002\u01a6",
    "\u01a2\u0003\u0002\u0002\u0002\u01a6\u01a3\u0003\u0002\u0002\u0002\u01a6",
    "\u01a4\u0003\u0002\u0002\u0002\u01a6\u01a5\u0003\u0002\u0002\u0002\u01a7",
    "\u001d\u0003\u0002\u0002\u0002\u01a8\u01a9\b\u0010\u0001\u0002\u01a9",
    "\u01aa\u0005 \u0011\u0002\u01aa\u01b0\u0003\u0002\u0002\u0002\u01ab",
    "\u01ac\f\u0003\u0002\u0002\u01ac\u01ad\u0007O\u0002\u0002\u01ad\u01af",
    "\u0005 \u0011\u0002\u01ae\u01ab\u0003\u0002\u0002\u0002\u01af\u01b2",
    "\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b0\u01b1",
    "\u0003\u0002\u0002\u0002\u01b1\u001f\u0003\u0002\u0002\u0002\u01b2\u01b0",
    "\u0003\u0002\u0002\u0002\u01b3\u01b4\u0005\u000e\b\u0002\u01b4\u01b5",
    "\u0007R\u0002\u0002\u01b5\u01b6\u0005\u00f2z\u0002\u01b6!\u0003\u0002",
    "\u0002\u0002\u01b7\u01ba\u0003\u0002\u0002\u0002\u01b8\u01ba\u0005$",
    "\u0013\u0002\u01b9\u01b7\u0003\u0002\u0002\u0002\u01b9\u01b8\u0003\u0002",
    "\u0002\u0002\u01ba#\u0003\u0002\u0002\u0002\u01bb\u01bc\b\u0013\u0001",
    "\u0002\u01bc\u01bd\u0005&\u0014\u0002\u01bd\u01c3\u0003\u0002\u0002",
    "\u0002\u01be\u01bf\f\u0003\u0002\u0002\u01bf\u01c0\u0007O\u0002\u0002",
    "\u01c0\u01c2\u0005&\u0014\u0002\u01c1\u01be\u0003\u0002\u0002\u0002",
    "\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002",
    "\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4%\u0003\u0002\u0002\u0002",
    "\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c6\u01c7\u0005\u0014\u000b\u0002",
    "\u01c7\u01c8\u0005(\u0015\u0002\u01c8\u01c9\u0005p9\u0002\u01c9\u01ca",
    "\u0005\u000e\b\u0002\u01ca\u01d3\u0003\u0002\u0002\u0002\u01cb\u01cc",
    "\u0005\u0014\u000b\u0002\u01cc\u01cd\u0005(\u0015\u0002\u01cd\u01ce",
    "\u0005p9\u0002\u01ce\u01cf\u0005\u000e\b\u0002\u01cf\u01d0\u0007R\u0002",
    "\u0002\u01d0\u01d1\u0005\u00f2z\u0002\u01d1\u01d3\u0003\u0002\u0002",
    "\u0002\u01d2\u01c6\u0003\u0002\u0002\u0002\u01d2\u01cb\u0003\u0002\u0002",
    "\u0002\u01d3\'\u0003\u0002\u0002\u0002\u01d4\u01d9\u0007\u0017\u0002",
    "\u0002\u01d5\u01d9\u0007\u001d\u0002\u0002\u01d6\u01d9\u0007\u0018\u0002",
    "\u0002\u01d7\u01d9\u0003\u0002\u0002\u0002\u01d8\u01d4\u0003\u0002\u0002",
    "\u0002\u01d8\u01d5\u0003\u0002\u0002\u0002\u01d8\u01d6\u0003\u0002\u0002",
    "\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002\u01d9)\u0003\u0002\u0002",
    "\u0002\u01da\u01db\u0005\u0014\u000b\u0002\u01db\u01dc\u0007\u001f\u0002",
    "\u0002\u01dc\u01dd\u0005\u000e\b\u0002\u01dd\u01de\u0005\u0082B\u0002",
    "\u01de\u01df\u0007E\u0002\u0002\u01df\u01e0\u0005\"\u0012\u0002\u01e0",
    "\u01e1\u0007F\u0002\u0002\u01e1+\u0003\u0002\u0002\u0002\u01e2\u01e3",
    "\u0005\u0016\f\u0002\u01e3\u01e4\u0005p9\u0002\u01e4\u01e5\u0007E\u0002",
    "\u0002\u01e5\u01e6\u0005\u00e6t\u0002\u01e6\u01e7\u0007F\u0002\u0002",
    "\u01e7\u01e8\u0005\u000e\b\u0002\u01e8\u01e9\u0007S\u0002\u0002\u01e9",
    "\u0205\u0003\u0002\u0002\u0002\u01ea\u01eb\u0005p9\u0002\u01eb\u01ec",
    "\u0007E\u0002\u0002\u01ec\u01ed\u0005\u00e6t\u0002\u01ed\u01ee\u0007",
    "F\u0002\u0002\u01ee\u01ef\u0005\u000e\b\u0002\u01ef\u01f0\u0007S\u0002",
    "\u0002\u01f0\u0205\u0003\u0002\u0002\u0002\u01f1\u01f2\u0005\u0016\f",
    "\u0002\u01f2\u01f3\u0005p9\u0002\u01f3\u01f4\u0007E\u0002\u0002\u01f4",
    "\u01f5\u0005\u00e6t\u0002\u01f5\u01f6\u0007F\u0002\u0002\u01f6\u01f7",
    "\u0005\u000e\b\u0002\u01f7\u01f8\u0007R\u0002\u0002\u01f8\u01f9\u0005",
    ".\u0018\u0002\u01f9\u01fa\u0007S\u0002\u0002\u01fa\u0205\u0003\u0002",
    "\u0002\u0002\u01fb\u01fc\u0005p9\u0002\u01fc\u01fd\u0007E\u0002\u0002",
    "\u01fd\u01fe\u0005\u00e6t\u0002\u01fe\u01ff\u0007F\u0002\u0002\u01ff",
    "\u0200\u0005\u000e\b\u0002\u0200\u0201\u0007R\u0002\u0002\u0201\u0202",
    "\u0005.\u0018\u0002\u0202\u0203\u0007S\u0002\u0002\u0203\u0205\u0003",
    "\u0002\u0002\u0002\u0204\u01e2\u0003\u0002\u0002\u0002\u0204\u01ea\u0003",
    "\u0002\u0002\u0002\u0204\u01f1\u0003\u0002\u0002\u0002\u0204\u01fb\u0003",
    "\u0002\u0002\u0002\u0205-\u0003\u0002\u0002\u0002\u0206\u0207\u0007",
    "I\u0002\u0002\u0207\u0208\u00050\u0019\u0002\u0208\u0209\u0007J\u0002",
    "\u0002\u0209/\u0003\u0002\u0002\u0002\u020a\u020f\b\u0019\u0001\u0002",
    "\u020b\u020c\f\u0003\u0002\u0002\u020c\u020e\u00052\u001a\u0002\u020d",
    "\u020b\u0003\u0002\u0002\u0002\u020e\u0211\u0003\u0002\u0002\u0002\u020f",
    "\u020d\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210",
    "1\u0003\u0002\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0212",
    "\u0215\u0005\u00e4s\u0002\u0213\u0215\u0005,\u0017\u0002\u0214\u0212",
    "\u0003\u0002\u0002\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u02153",
    "\u0003\u0002\u0002\u0002\u0216\u021c\u0003\u0002\u0002\u0002\u0217\u0218",
    "\u0007E\u0002\u0002\u0218\u0219\u0005\"\u0012\u0002\u0219\u021a\u0007",
    "F\u0002\u0002\u021a\u021c\u0003\u0002\u0002\u0002\u021b\u0216\u0003",
    "\u0002\u0002\u0002\u021b\u0217\u0003\u0002\u0002\u0002\u021c5\u0003",
    "\u0002\u0002\u0002\u021d\u021e\u0007Q\u0002\u0002\u021e7\u0003\u0002",
    "\u0002\u0002\u021f\u0220\u0005> \u0002\u0220\u0221\u00054\u001b\u0002",
    "\u0221\u0222\u0007I\u0002\u0002\u0222\u0223\u0005:\u001e\u0002\u0223",
    "\u0224\u0005@!\u0002\u0224\u0225\u0007J\u0002\u0002\u02259\u0003\u0002",
    "\u0002\u0002\u0226\u022b\b\u001e\u0001\u0002\u0227\u0228\f\u0003\u0002",
    "\u0002\u0228\u022a\u0005<\u001f\u0002\u0229\u0227\u0003\u0002\u0002",
    "\u0002\u022a\u022d\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002",
    "\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c;\u0003\u0002\u0002",
    "\u0002\u022d\u022b\u0003\u0002\u0002\u0002\u022e\u0233\u0005\u00dep",
    "\u0002\u022f\u0233\u0005,\u0017\u0002\u0230\u0233\u0005\u00dco\u0002",
    "\u0231\u0233\u0005\\/\u0002\u0232\u022e\u0003\u0002\u0002\u0002\u0232",
    "\u022f\u0003\u0002\u0002\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0232",
    "\u0231\u0003\u0002\u0002\u0002\u0233=\u0003\u0002\u0002\u0002\u0234",
    "\u0235\u0005\u0014\u000b\u0002\u0235\u0236\u0007\u001e\u0002\u0002\u0236",
    "\u0237\u0005\u000e\b\u0002\u0237\u0238\u0005\u0082B\u0002\u0238\u0239",
    "\u0007E\u0002\u0002\u0239\u023a\u0005\"\u0012\u0002\u023a\u023b\u0007",
    "F\u0002\u0002\u023b?\u0003\u0002\u0002\u0002\u023c\u023d\b!\u0001\u0002",
    "\u023d\u023e\u0005B\"\u0002\u023e\u0243\u0003\u0002\u0002\u0002\u023f",
    "\u0240\f\u0003\u0002\u0002\u0240\u0242\u0005B\"\u0002\u0241\u023f\u0003",
    "\u0002\u0002\u0002\u0242\u0245\u0003\u0002\u0002\u0002\u0243\u0241\u0003",
    "\u0002\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244A\u0003",
    "\u0002\u0002\u0002\u0245\u0243\u0003\u0002\u0002\u0002\u0246\u0247\u0005",
    "\u0014\u000b\u0002\u0247\u0248\u0007\"\u0002\u0002\u0248\u0249\u0005",
    "\u000e\b\u0002\u0249\u024a\u0007I\u0002\u0002\u024a\u024b\u0005D#\u0002",
    "\u024b\u024c\u0005J&\u0002\u024c\u024d\u0007J\u0002\u0002\u024dC\u0003",
    "\u0002\u0002\u0002\u024e\u0253\b#\u0001\u0002\u024f\u0250\f\u0003\u0002",
    "\u0002\u0250\u0252\u0005F$\u0002\u0251\u024f\u0003\u0002\u0002\u0002",
    "\u0252\u0255\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002",
    "\u0253\u0254\u0003\u0002\u0002\u0002\u0254E\u0003\u0002\u0002\u0002",
    "\u0255\u0253\u0003\u0002\u0002\u0002\u0256\u025c\u0005\u00aaV\u0002",
    "\u0257\u025c\u0005\u00b4[\u0002\u0258\u025c\u0005\u00dco\u0002\u0259",
    "\u025c\u0005\u00dep\u0002\u025a\u025c\u0005H%\u0002\u025b\u0256\u0003",
    "\u0002\u0002\u0002\u025b\u0257\u0003\u0002\u0002\u0002\u025b\u0258\u0003",
    "\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002\u025b\u025a\u0003",
    "\u0002\u0002\u0002\u025cG\u0003\u0002\u0002\u0002\u025d\u025e\u0005",
    "\u0014\u000b\u0002\u025e\u025f\u0007I\u0002\u0002\u025f\u0260\u0005",
    "D#\u0002\u0260\u0261\u0007J\u0002\u0002\u0261I\u0003\u0002\u0002\u0002",
    "\u0262\u0266\u0003\u0002\u0002\u0002\u0263\u0264\u0007(\u0002\u0002",
    "\u0264\u0266\u0005L\'\u0002\u0265\u0262\u0003\u0002\u0002\u0002\u0265",
    "\u0263\u0003\u0002\u0002\u0002\u0266K\u0003\u0002\u0002\u0002\u0267",
    "\u0268\u0005\u000e\b\u0002\u0268\u0269\u0007S\u0002\u0002\u0269\u026c",
    "\u0003\u0002\u0002\u0002\u026a\u026c\u0005N(\u0002\u026b\u0267\u0003",
    "\u0002\u0002\u0002\u026b\u026a\u0003\u0002\u0002\u0002\u026cM\u0003",
    "\u0002\u0002\u0002\u026d\u026e\u0007!\u0002\u0002\u026e\u026f\u0007",
    "E\u0002\u0002\u026f\u0270\u0005\u00ecw\u0002\u0270\u0271\u0007F\u0002",
    "\u0002\u0271\u0272\u0007I\u0002\u0002\u0272\u0273\u0005P)\u0002\u0273",
    "\u0274\u0007J\u0002\u0002\u0274O\u0003\u0002\u0002\u0002\u0275\u027a",
    "\b)\u0001\u0002\u0276\u0277\f\u0003\u0002\u0002\u0277\u0279\u0005R*",
    "\u0002\u0278\u0276\u0003\u0002\u0002\u0002\u0279\u027c\u0003\u0002\u0002",
    "\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002",
    "\u0002\u027bQ\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002",
    "\u0002\u027d\u027e\u0005T+\u0002\u027e\u027f\u0007N\u0002\u0002\u027f",
    "\u0280\u0005\u000e\b\u0002\u0280\u0281\u0007S\u0002\u0002\u0281S\u0003",
    "\u0002\u0002\u0002\u0282\u0285\u0005V,\u0002\u0283\u0285\u0005Z.\u0002",
    "\u0284\u0282\u0003\u0002\u0002\u0002\u0284\u0283\u0003\u0002\u0002\u0002",
    "\u0285U\u0003\u0002\u0002\u0002\u0286\u0287\u0007E\u0002\u0002\u0287",
    "\u0288\u0005Z.\u0002\u0288\u0289\u0007O\u0002\u0002\u0289\u028a\u0005",
    "X-\u0002\u028a\u028b\u0007F\u0002\u0002\u028bW\u0003\u0002\u0002\u0002",
    "\u028c\u028d\b-\u0001\u0002\u028d\u028e\u0005Z.\u0002\u028e\u0294\u0003",
    "\u0002\u0002\u0002\u028f\u0290\f\u0003\u0002\u0002\u0290\u0291\u0007",
    "O\u0002\u0002\u0291\u0293\u0005Z.\u0002\u0292\u028f\u0003\u0002\u0002",
    "\u0002\u0293\u0296\u0003\u0002\u0002\u0002\u0294\u0292\u0003\u0002\u0002",
    "\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295Y\u0003\u0002\u0002",
    "\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0297\u02a3\u0005\u00f2z",
    "\u0002\u0298\u0299\u0005\u00f2z\u0002\u0299\u029a\u00070\u0002\u0002",
    "\u029a\u029b\u0005\u00f2z\u0002\u029b\u02a3\u0003\u0002\u0002\u0002",
    "\u029c\u029d\u0005\u00f2z\u0002\u029d\u029e\u00071\u0002\u0002\u029e",
    "\u029f\u0005\u00f2z\u0002\u029f\u02a3\u0003\u0002\u0002\u0002\u02a0",
    "\u02a3\u0007\f\u0002\u0002\u02a1\u02a3\u0007/\u0002\u0002\u02a2\u0297",
    "\u0003\u0002\u0002\u0002\u02a2\u0298\u0003\u0002\u0002\u0002\u02a2\u029c",
    "\u0003\u0002\u0002\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002\u02a2\u02a1",
    "\u0003\u0002\u0002\u0002\u02a3[\u0003\u0002\u0002\u0002\u02a4\u02a5",
    "\u0005\u0014\u000b\u0002\u02a5\u02a6\u0007-\u0002\u0002\u02a6\u02a7",
    "\u0007K\u0002\u0002\u02a7\u02a8\u0005~@\u0002\u02a8\u02a9\u0007L\u0002",
    "\u0002\u02a9\u02aa\u0007E\u0002\u0002\u02aa\u02ab\u0005\u00f2z\u0002",
    "\u02ab\u02ac\u0007F\u0002\u0002\u02ac\u02ad\u0005\u000e\b\u0002\u02ad",
    "\u02ae\u0007S\u0002\u0002\u02ae\u02c6\u0003\u0002\u0002\u0002\u02af",
    "\u02b0\u0005\u0014\u000b\u0002\u02b0\u02b1\u0007-\u0002\u0002\u02b1",
    "\u02b2\u0007K\u0002\u0002\u02b2\u02b3\u0005x=\u0002\u02b3\u02b4\u0007",
    "L\u0002\u0002\u02b4\u02b5\u0007E\u0002\u0002\u02b5\u02b6\u0005\u00f2",
    "z\u0002\u02b6\u02b7\u0007F\u0002\u0002\u02b7\u02b8\u0005\u000e\b\u0002",
    "\u02b8\u02b9\u0007S\u0002\u0002\u02b9\u02c6\u0003\u0002\u0002\u0002",
    "\u02ba\u02bb\u0005\u0014\u000b\u0002\u02bb\u02bc\u0007-\u0002\u0002",
    "\u02bc\u02bd\u0007K\u0002\u0002\u02bd\u02be\u0005v<\u0002\u02be\u02bf",
    "\u0007L\u0002\u0002\u02bf\u02c0\u0007E\u0002\u0002\u02c0\u02c1\u0005",
    "\u00f2z\u0002\u02c1\u02c2\u0007F\u0002\u0002\u02c2\u02c3\u0005\u000e",
    "\b\u0002\u02c3\u02c4\u0007S\u0002\u0002\u02c4\u02c6\u0003\u0002\u0002",
    "\u0002\u02c5\u02a4\u0003\u0002\u0002\u0002\u02c5\u02af\u0003\u0002\u0002",
    "\u0002\u02c5\u02ba\u0003\u0002\u0002\u0002\u02c6]\u0003\u0002\u0002",
    "\u0002\u02c7\u02c8\u0005`1\u0002\u02c8\u02c9\u00054\u001b\u0002\u02c9",
    "\u02ca\u0007I\u0002\u0002\u02ca\u02cb\u0005b2\u0002\u02cb\u02cc\u0007",
    "\u0007\u0002\u0002\u02cc\u02cd\u0005f4\u0002\u02cd\u02ce\u0007J\u0002",
    "\u0002\u02ce_\u0003\u0002\u0002\u0002\u02cf\u02d0\u0005\u0014\u000b",
    "\u0002\u02d0\u02d1\u0007\u000b\u0002\u0002\u02d1\u02d2\u0005\u000e\b",
    "\u0002\u02d2\u02d3\u0005\u0082B\u0002\u02d3\u02d4\u0007E\u0002\u0002",
    "\u02d4\u02d5\u0005\"\u0012\u0002\u02d5\u02d6\u0007F\u0002\u0002\u02d6",
    "a\u0003\u0002\u0002\u0002\u02d7\u02dc\b2\u0001\u0002\u02d8\u02d9\f\u0003",
    "\u0002\u0002\u02d9\u02db\u0005d3\u0002\u02da\u02d8\u0003\u0002\u0002",
    "\u0002\u02db\u02de\u0003\u0002\u0002\u0002\u02dc\u02da\u0003\u0002\u0002",
    "\u0002\u02dc\u02dd\u0003\u0002\u0002\u0002\u02ddc\u0003\u0002\u0002",
    "\u0002\u02de\u02dc\u0003\u0002\u0002\u0002\u02df\u02e5\u0005\u00dep",
    "\u0002\u02e0\u02e5\u0005\u00dan\u0002\u02e1\u02e5\u0005\u00c6d\u0002",
    "\u02e2\u02e5\u0005,\u0017\u0002\u02e3\u02e5\u0005\u00dco\u0002\u02e4",
    "\u02df\u0003\u0002\u0002\u0002\u02e4\u02e0\u0003\u0002\u0002\u0002\u02e4",
    "\u02e1\u0003\u0002\u0002\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e4",
    "\u02e3\u0003\u0002\u0002\u0002\u02e5e\u0003\u0002\u0002\u0002\u02e6",
    "\u02e7\u0005\u00b8]\u0002\u02e7g\u0003\u0002\u0002\u0002\u02e8\u02e9",
    "\u0005\u0014\u000b\u0002\u02e9\u02ea\u0007\u0012\u0002\u0002\u02ea\u02eb",
    "\u0005\f\u0007\u0002\u02eb\u02ec\u0005\u0082B\u0002\u02ec\u02ed\u0007",
    "I\u0002\u0002\u02ed\u02ee\u0005j6\u0002\u02ee\u02ef\u0007J\u0002\u0002",
    "\u02ef\u02fb\u0003\u0002\u0002\u0002\u02f0\u02f1\u0005\u0014\u000b\u0002",
    "\u02f1\u02f2\u0007\u0012\u0002\u0002\u02f2\u02f3\u0005l7\u0002\u02f3",
    "\u02f4\u0007S\u0002\u0002\u02f4\u02fb\u0003\u0002\u0002\u0002\u02f5",
    "\u02f6\u0005\u0014\u000b\u0002\u02f6\u02f7\u0007\u0012\u0002\u0002\u02f7",
    "\u02f8\u0005\u000e\b\u0002\u02f8\u02f9\u0007S\u0002\u0002\u02f9\u02fb",
    "\u0003\u0002\u0002\u0002\u02fa\u02e8\u0003\u0002\u0002\u0002\u02fa\u02f0",
    "\u0003\u0002\u0002\u0002\u02fa\u02f5\u0003\u0002\u0002\u0002\u02fbi",
    "\u0003\u0002\u0002\u0002\u02fc\u0301\b6\u0001\u0002\u02fd\u02fe\f\u0003",
    "\u0002\u0002\u02fe\u0300\u0005n8\u0002\u02ff\u02fd\u0003\u0002\u0002",
    "\u0002\u0300\u0303\u0003\u0002\u0002\u0002\u0301\u02ff\u0003\u0002\u0002",
    "\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302k\u0003\u0002\u0002",
    "\u0002\u0303\u0301\u0003\u0002\u0002\u0002\u0304\u0305\u0005\u0080A",
    "\u0002\u0305\u0306\u0005\u000e\b\u0002\u0306\u0307\u0005\u0082B\u0002",
    "\u0307\u0308\u0007E\u0002\u0002\u0308\u0309\u0005\"\u0012\u0002\u0309",
    "\u030a\u0007F\u0002\u0002\u030am\u0003\u0002\u0002\u0002\u030b\u030c",
    "\u0005\u0014\u000b\u0002\u030c\u030d\u0005l7\u0002\u030d\u030e\u0007",
    "S\u0002\u0002\u030e\u031c\u0003\u0002\u0002\u0002\u030f\u0310\u0005",
    "\u0014\u000b\u0002\u0310\u0311\u0007\u0004\u0002\u0002\u0311\u0312\u0005",
    "l7\u0002\u0312\u0313\u0007S\u0002\u0002\u0313\u031c\u0003\u0002\u0002",
    "\u0002\u0314\u0315\u0005\u0014\u000b\u0002\u0315\u0316\u0005\u00f4{",
    "\u0002\u0316\u0317\u0007E\u0002\u0002\u0317\u0318\u0005\"\u0012\u0002",
    "\u0318\u0319\u0007F\u0002\u0002\u0319\u031a\u0007S\u0002\u0002\u031a",
    "\u031c\u0003\u0002\u0002\u0002\u031b\u030b\u0003\u0002\u0002\u0002\u031b",
    "\u030f\u0003\u0002\u0002\u0002\u031b\u0314\u0003\u0002\u0002\u0002\u031c",
    "o\u0003\u0002\u0002\u0002\u031d\u0323\u0005~@\u0002\u031e\u0323\u0005",
    "v<\u0002\u031f\u0323\u0005|?\u0002\u0320\u0323\u0005z>\u0002\u0321\u0323",
    "\u0005x=\u0002\u0322\u031d\u0003\u0002\u0002\u0002\u0322\u031e\u0003",
    "\u0002\u0002\u0002\u0322\u031f\u0003\u0002\u0002\u0002\u0322\u0320\u0003",
    "\u0002\u0002\u0002\u0322\u0321\u0003\u0002\u0002\u0002\u0323q\u0003",
    "\u0002\u0002\u0002\u0324\u0327\u0005v<\u0002\u0325\u0327\u0005|?\u0002",
    "\u0326\u0324\u0003\u0002\u0002\u0002\u0326\u0325\u0003\u0002\u0002\u0002",
    "\u0327s\u0003\u0002\u0002\u0002\u0328\u032d\u0005\u00f4{\u0002\u0329",
    "\u032a\u00056\u001c\u0002\u032a\u032b\u0005\u00f4{\u0002\u032b\u032d",
    "\u0003\u0002\u0002\u0002\u032c\u0328\u0003\u0002\u0002\u0002\u032c\u0329",
    "\u0003\u0002\u0002\u0002\u032du\u0003\u0002\u0002\u0002\u032e\u032f",
    "\u0005t;\u0002\u032fw\u0003\u0002\u0002\u0002\u0330\u0331\u0007*\u0002",
    "\u0002\u0331\u0332\u0007K\u0002\u0002\u0332\u0333\u0005\u0088E\u0002",
    "\u0333\u0334\u0007L\u0002\u0002\u0334y\u0003\u0002\u0002\u0002\u0335",
    "\u0336\u0005v<\u0002\u0336\u0337\u0007G\u0002\u0002\u0337\u0338\u0005",
    "\u00f2z\u0002\u0338\u0339\u0007H\u0002\u0002\u0339{\u0003\u0002\u0002",
    "\u0002\u033a\u033b\u0005v<\u0002\u033b\u033c\u0007K\u0002\u0002\u033c",
    "\u033d\u0005\u0088E\u0002\u033d\u033e\u0007L\u0002\u0002\u033e}\u0003",
    "\u0002\u0002\u0002\u033f\u0365\u0007\b\u0002\u0002\u0340\u0365\u0007",
    "\u0010\u0002\u0002\u0341\u0365\u0007\t\u0002\u0002\u0342\u0365\u0007",
    "\u0019\u0002\u0002\u0343\u0344\u0007\t\u0002\u0002\u0344\u0345\u0007",
    "K\u0002\u0002\u0345\u0346\u0007]\u0002\u0002\u0346\u0365\u0007L\u0002",
    "\u0002\u0347\u0348\u0007\u0019\u0002\u0002\u0348\u0349\u0007K\u0002",
    "\u0002\u0349\u034a\u0007]\u0002\u0002\u034a\u0365\u0007L\u0002\u0002",
    "\u034b\u034c\u0007,\u0002\u0002\u034c\u034d\u0007K\u0002\u0002\u034d",
    "\u034e\u0007]\u0002\u0002\u034e\u0365\u0007L\u0002\u0002\u034f\u0350",
    "\u0007\t\u0002\u0002\u0350\u0351\u0007K\u0002\u0002\u0351\u0352\u0007",
    "E\u0002\u0002\u0352\u0353\u0005\u00f2z\u0002\u0353\u0354\u0007F\u0002",
    "\u0002\u0354\u0355\u0007L\u0002\u0002\u0355\u0365\u0003\u0002\u0002",
    "\u0002\u0356\u0357\u0007\u0019\u0002\u0002\u0357\u0358\u0007K\u0002",
    "\u0002\u0358\u0359\u0007E\u0002\u0002\u0359\u035a\u0005\u00f2z\u0002",
    "\u035a\u035b\u0007F\u0002\u0002\u035b\u035c\u0007L\u0002\u0002\u035c",
    "\u0365\u0003\u0002\u0002\u0002\u035d\u035e\u0007,\u0002\u0002\u035e",
    "\u035f\u0007K\u0002\u0002\u035f\u0360\u0007E\u0002\u0002\u0360\u0361",
    "\u0005\u00f2z\u0002\u0361\u0362\u0007F\u0002\u0002\u0362\u0363\u0007",
    "L\u0002\u0002\u0363\u0365\u0003\u0002\u0002\u0002\u0364\u033f\u0003",
    "\u0002\u0002\u0002\u0364\u0340\u0003\u0002\u0002\u0002\u0364\u0341\u0003",
    "\u0002\u0002\u0002\u0364\u0342\u0003\u0002\u0002\u0002\u0364\u0343\u0003",
    "\u0002\u0002\u0002\u0364\u0347\u0003\u0002\u0002\u0002\u0364\u034b\u0003",
    "\u0002\u0002\u0002\u0364\u034f\u0003\u0002\u0002\u0002\u0364\u0356\u0003",
    "\u0002\u0002\u0002\u0364\u035d\u0003\u0002\u0002\u0002\u0365\u007f\u0003",
    "\u0002\u0002\u0002\u0366\u036a\u0005p9\u0002\u0367\u036a\u0007.\u0002",
    "\u0002\u0368\u036a\u0005\u00f4{\u0002\u0369\u0366\u0003\u0002\u0002",
    "\u0002\u0369\u0367\u0003\u0002\u0002\u0002\u0369\u0368\u0003\u0002\u0002",
    "\u0002\u036a\u0081\u0003\u0002\u0002\u0002\u036b\u0371\u0003\u0002\u0002",
    "\u0002\u036c\u036d\u0007K\u0002\u0002\u036d\u036e\u0005\u0084C\u0002",
    "\u036e\u036f\u0007L\u0002\u0002\u036f\u0371\u0003\u0002\u0002\u0002",
    "\u0370\u036b\u0003\u0002\u0002\u0002\u0370\u036c\u0003\u0002\u0002\u0002",
    "\u0371\u0083\u0003\u0002\u0002\u0002\u0372\u0373\bC\u0001\u0002\u0373",
    "\u0374\u0005\u000e\b\u0002\u0374\u037a\u0003\u0002\u0002\u0002\u0375",
    "\u0376\f\u0003\u0002\u0002\u0376\u0377\u0007O\u0002\u0002\u0377\u0379",
    "\u0005\u000e\b\u0002\u0378\u0375\u0003\u0002\u0002\u0002\u0379\u037c",
    "\u0003\u0002\u0002\u0002\u037a\u0378\u0003\u0002\u0002\u0002\u037a\u037b",
    "\u0003\u0002\u0002\u0002\u037b\u0085\u0003\u0002\u0002\u0002\u037c\u037a",
    "\u0003\u0002\u0002\u0002\u037d\u0382\u0005p9\u0002\u037e\u0382\u0005",
    "\f\u0007\u0002\u037f\u0382\u0007.\u0002\u0002\u0380\u0382\u0007/\u0002",
    "\u0002\u0381\u037d\u0003\u0002\u0002\u0002\u0381\u037e\u0003\u0002\u0002",
    "\u0002\u0381\u037f\u0003\u0002\u0002\u0002\u0381\u0380\u0003\u0002\u0002",
    "\u0002\u0382\u0087\u0003\u0002\u0002\u0002\u0383\u0386\bE\u0001\u0002",
    "\u0384\u0386\u0005\u0086D\u0002\u0385\u0383\u0003\u0002\u0002\u0002",
    "\u0385\u0384\u0003\u0002\u0002\u0002\u0386\u038c\u0003\u0002\u0002\u0002",
    "\u0387\u0388\f\u0003\u0002\u0002\u0388\u0389\u0007O\u0002\u0002\u0389",
    "\u038b\u0005\u0086D\u0002\u038a\u0387\u0003\u0002\u0002\u0002\u038b",
    "\u038e\u0003\u0002\u0002\u0002\u038c\u038a\u0003\u0002\u0002\u0002\u038c",
    "\u038d\u0003\u0002\u0002\u0002\u038d\u0089\u0003\u0002\u0002\u0002\u038e",
    "\u038c\u0003\u0002\u0002\u0002\u038f\u0393\u0005p9\u0002\u0390\u0393",
    "\u0007.\u0002\u0002\u0391\u0393\u0007/\u0002\u0002\u0392\u038f\u0003",
    "\u0002\u0002\u0002\u0392\u0390\u0003\u0002\u0002\u0002\u0392\u0391\u0003",
    "\u0002\u0002\u0002\u0393\u008b\u0003\u0002\u0002\u0002\u0394\u0395\b",
    "G\u0001\u0002\u0395\u0396\u0005\u008aF\u0002\u0396\u039c\u0003\u0002",
    "\u0002\u0002\u0397\u0398\f\u0003\u0002\u0002\u0398\u0399\u0007O\u0002",
    "\u0002\u0399\u039b\u0005\u0086D\u0002\u039a\u0397\u0003\u0002\u0002",
    "\u0002\u039b\u039e\u0003\u0002\u0002\u0002\u039c\u039a\u0003\u0002\u0002",
    "\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u008d\u0003\u0002\u0002",
    "\u0002\u039e\u039c\u0003\u0002\u0002\u0002\u039f\u03ad\u0005\u0090I",
    "\u0002\u03a0\u03a1\u0005\u00a8U\u0002\u03a1\u03a2\u0007S\u0002\u0002",
    "\u03a2\u03ad\u0003\u0002\u0002\u0002\u03a3\u03a4\u0005> \u0002\u03a4",
    "\u03a5\u0007S\u0002\u0002\u03a5\u03ad\u0003\u0002\u0002\u0002\u03a6",
    "\u03a7\u0005`1\u0002\u03a7\u03a8\u0007S\u0002\u0002\u03a8\u03ad\u0003",
    "\u0002\u0002\u0002\u03a9\u03aa\u0005*\u0016\u0002\u03aa\u03ab\u0007",
    "S\u0002\u0002\u03ab\u03ad\u0003\u0002\u0002\u0002\u03ac\u039f\u0003",
    "\u0002\u0002\u0002\u03ac\u03a0\u0003\u0002\u0002\u0002\u03ac\u03a3\u0003",
    "\u0002\u0002\u0002\u03ac\u03a6\u0003\u0002\u0002\u0002\u03ac\u03a9\u0003",
    "\u0002\u0002\u0002\u03ad\u008f\u0003\u0002\u0002\u0002\u03ae\u03b3\u0005",
    "\u0092J\u0002\u03af\u03b3\u0005\u0096L\u0002\u03b0\u03b3\u0005\u0094",
    "K\u0002\u03b1\u03b3\u0005\u009cO\u0002\u03b2\u03ae\u0003\u0002\u0002",
    "\u0002\u03b2\u03af\u0003\u0002\u0002\u0002\u03b2\u03b0\u0003\u0002\u0002",
    "\u0002\u03b2\u03b1\u0003\u0002\u0002\u0002\u03b3\u0091\u0003\u0002\u0002",
    "\u0002\u03b4\u03b5\u0005\u0014\u000b\u0002\u03b5\u03b6\u0007\u0014\u0002",
    "\u0002\u03b6\u03b7\u0005\u000e\b\u0002\u03b7\u03b8\u0007I\u0002\u0002",
    "\u03b8\u03b9\u0005\u0098M\u0002\u03b9\u03ba\u0007J\u0002\u0002\u03ba",
    "\u0093\u0003\u0002\u0002\u0002\u03bb\u03bc\u0005\u0014\u000b\u0002\u03bc",
    "\u03bd\u0007$\u0002\u0002\u03bd\u03be\u0005\u000e\b\u0002\u03be\u03bf",
    "\u0007I\u0002\u0002\u03bf\u03c0\u0005\u0098M\u0002\u03c0\u03c1\u0007",
    "J\u0002\u0002\u03c1\u0095\u0003\u0002\u0002\u0002\u03c2\u03c3\u0005",
    "\u0014\u000b\u0002\u03c3\u03c4\u0007\u0015\u0002\u0002\u03c4\u03c5\u0005",
    "\u000e\b\u0002\u03c5\u03c6\u0007I\u0002\u0002\u03c6\u03c7\u0005\u0098",
    "M\u0002\u03c7\u03c8\u0007J\u0002\u0002\u03c8\u0097\u0003\u0002\u0002",
    "\u0002\u03c9\u03ce\bM\u0001\u0002\u03ca\u03cb\f\u0003\u0002\u0002\u03cb",
    "\u03cd\u0005\u009aN\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cd",
    "\u03d0\u0003\u0002\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03ce",
    "\u03cf\u0003\u0002\u0002\u0002\u03cf\u0099\u0003\u0002\u0002\u0002\u03d0",
    "\u03ce\u0003\u0002\u0002\u0002\u03d1\u03d2\u0005\u0014\u000b\u0002\u03d2",
    "\u03d3\u0005p9\u0002\u03d3\u03d4\u0005\u000e\b\u0002\u03d4\u03d5\u0007",
    "S\u0002\u0002\u03d5\u009b\u0003\u0002\u0002\u0002\u03d6\u03d7\u0005",
    "\u0014\u000b\u0002\u03d7\u03d8\u0007\u000f\u0002\u0002\u03d8\u03d9\u0005",
    "\u000e\b\u0002\u03d9\u03da\u0007I\u0002\u0002\u03da\u03db\u0005\u00a6",
    "T\u0002\u03db\u03dc\u0007J\u0002\u0002\u03dc\u03e9\u0003\u0002\u0002",
    "\u0002\u03dd\u03de\u0005\u0014\u000b\u0002\u03de\u03df\u0007\u000f\u0002",
    "\u0002\u03df\u03e0\u0007\t\u0002\u0002\u03e0\u03e1\u0007K\u0002\u0002",
    "\u03e1\u03e2\u0007]\u0002\u0002\u03e2\u03e3\u0007L\u0002\u0002\u03e3",
    "\u03e4\u0005\u000e\b\u0002\u03e4\u03e5\u0007I\u0002\u0002\u03e5\u03e6",
    "\u0005\u009eP\u0002\u03e6\u03e7\u0007J\u0002\u0002\u03e7\u03e9\u0003",
    "\u0002\u0002\u0002\u03e8\u03d6\u0003\u0002\u0002\u0002\u03e8\u03dd\u0003",
    "\u0002\u0002\u0002\u03e9\u009d\u0003\u0002\u0002\u0002\u03ea\u03eb\b",
    "P\u0001\u0002\u03eb\u03ec\u0005\u00a0Q\u0002\u03ec\u03f2\u0003\u0002",
    "\u0002\u0002\u03ed\u03ee\f\u0003\u0002\u0002\u03ee\u03ef\u0007O\u0002",
    "\u0002\u03ef\u03f1\u0005\u00a0Q\u0002\u03f0\u03ed\u0003\u0002\u0002",
    "\u0002\u03f1\u03f4\u0003\u0002\u0002\u0002\u03f2\u03f0\u0003\u0002\u0002",
    "\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3\u009f\u0003\u0002\u0002",
    "\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002\u03f5\u03f6\u0005\u000e\b",
    "\u0002\u03f6\u03f7\u0007R\u0002\u0002\u03f7\u03f8\u0005\u00e2r\u0002",
    "\u03f8\u00a1\u0003\u0002\u0002\u0002\u03f9\u03fa\u0007\u0010\u0002\u0002",
    "\u03fa\u03fb\u0007I\u0002\u0002\u03fb\u03fc\u0005\u00a6T\u0002\u03fc",
    "\u03fd\u0007J\u0002\u0002\u03fd\u00a3\u0003\u0002\u0002\u0002\u03fe",
    "\u03ff\u0007\u001b\u0002\u0002\u03ff\u0400\u0007I\u0002\u0002\u0400",
    "\u0401\u0005\u00a6T\u0002\u0401\u0402\u0007J\u0002\u0002\u0402\u00a5",
    "\u0003\u0002\u0002\u0002\u0403\u0404\bT\u0001\u0002\u0404\u0405\u0005",
    "\u000e\b\u0002\u0405\u040b\u0003\u0002\u0002\u0002\u0406\u0407\f\u0003",
    "\u0002\u0002\u0407\u0408\u0007O\u0002\u0002\u0408\u040a\u0005\u000e",
    "\b\u0002\u0409\u0406\u0003\u0002\u0002\u0002\u040a\u040d\u0003\u0002",
    "\u0002\u0002\u040b\u0409\u0003\u0002\u0002\u0002\u040b\u040c\u0003\u0002",
    "\u0002\u0002\u040c\u00a7\u0003\u0002\u0002\u0002\u040d\u040b\u0003\u0002",
    "\u0002\u0002\u040e\u040f\u0005\u0014\u000b\u0002\u040f\u0410\u0007+",
    "\u0002\u0002\u0410\u0411\u0005p9\u0002\u0411\u0412\u0005\u000e\b\u0002",
    "\u0412\u0423\u0003\u0002\u0002\u0002\u0413\u0414\u0005\u0014\u000b\u0002",
    "\u0414\u0415\u0007+\u0002\u0002\u0415\u0416\u0005\u0090I\u0002\u0416",
    "\u0417\u0005\u000e\b\u0002\u0417\u0423\u0003\u0002\u0002\u0002\u0418",
    "\u0419\u0005\u0014\u000b\u0002\u0419\u041a\u0007\u001c\u0002\u0002\u041a",
    "\u041b\u0005p9\u0002\u041b\u041c\u0005\u000e\b\u0002\u041c\u0423\u0003",
    "\u0002\u0002\u0002\u041d\u041e\u0005\u0014\u000b\u0002\u041e\u041f\u0007",
    "\u001c\u0002\u0002\u041f\u0420\u0005\u0090I\u0002\u0420\u0421\u0005",
    "\u000e\b\u0002\u0421\u0423\u0003\u0002\u0002\u0002\u0422\u040e\u0003",
    "\u0002\u0002\u0002\u0422\u0413\u0003\u0002\u0002\u0002\u0422\u0418\u0003",
    "\u0002\u0002\u0002\u0422\u041d\u0003\u0002\u0002\u0002\u0423\u00a9\u0003",
    "\u0002\u0002\u0002\u0424\u0425\u0005\u00f0y\u0002\u0425\u0426\u0007",
    "E\u0002\u0002\u0426\u0427\u0005\u00e6t\u0002\u0427\u0428\u0007F\u0002",
    "\u0002\u0428\u0429\u0007S\u0002\u0002\u0429\u0439\u0003\u0002\u0002",
    "\u0002\u042a\u042b\u0005\u00f0y\u0002\u042b\u042c\u0007K\u0002\u0002",
    "\u042c\u042d\u0005\u0088E\u0002\u042d\u042e\u0007L\u0002\u0002\u042e",
    "\u042f\u0007E\u0002\u0002\u042f\u0430\u0005\u00e6t\u0002\u0430\u0431",
    "\u0007F\u0002\u0002\u0431\u0432\u0007S\u0002\u0002\u0432\u0439\u0003",
    "\u0002\u0002\u0002\u0433\u0434\u0005\u00f0y\u0002\u0434\u0435\u0007",
    "R\u0002\u0002\u0435\u0436\u0005\u00f2z\u0002\u0436\u0437\u0007S\u0002",
    "\u0002\u0437\u0439\u0003\u0002\u0002\u0002\u0438\u0424\u0003\u0002\u0002",
    "\u0002\u0438\u042a\u0003\u0002\u0002\u0002\u0438\u0433\u0003\u0002\u0002",
    "\u0002\u0439\u00ab\u0003\u0002\u0002\u0002\u043a\u043b\u0007S\u0002",
    "\u0002\u043b\u00ad\u0003\u0002\u0002\u0002\u043c\u043d\u0007\u0011\u0002",
    "\u0002\u043d\u043e\u0007S\u0002\u0002\u043e\u00af\u0003\u0002\u0002",
    "\u0002\u043f\u0440\u0007 \u0002\u0002\u0440\u0446\u0007S\u0002\u0002",
    "\u0441\u0442\u0007 \u0002\u0002\u0442\u0443\u0005\u00f2z\u0002\u0443",
    "\u0444\u0007S\u0002\u0002\u0444\u0446\u0003\u0002\u0002\u0002\u0445",
    "\u043f\u0003\u0002\u0002\u0002\u0445\u0441\u0003\u0002\u0002\u0002\u0446",
    "\u00b1\u0003\u0002\u0002\u0002\u0447\u0448\u0007\u0016\u0002\u0002\u0448",
    "\u0449\u0007E\u0002\u0002\u0449\u044a\u0005\u00f2z\u0002\u044a\u044b",
    "\u0007F\u0002\u0002\u044b\u044c\u0005\u00b6\\\u0002\u044c\u0456\u0003",
    "\u0002\u0002\u0002\u044d\u044e\u0007\u0016\u0002\u0002\u044e\u044f\u0007",
    "E\u0002\u0002\u044f\u0450\u0005\u00f2z\u0002\u0450\u0451\u0007F\u0002",
    "\u0002\u0451\u0452\u0005\u00b6\\\u0002\u0452\u0453\u0007\r\u0002\u0002",
    "\u0453\u0454\u0005\u00b6\\\u0002\u0454\u0456\u0003\u0002\u0002\u0002",
    "\u0455\u0447\u0003\u0002\u0002\u0002\u0455\u044d\u0003\u0002\u0002\u0002",
    "\u0456\u00b3\u0003\u0002\u0002\u0002\u0457\u0458\u0005v<\u0002\u0458",
    "\u0459\u0007Q\u0002\u0002\u0459\u045a\u0007\u0007\u0002\u0002\u045a",
    "\u045b\u0007E\u0002\u0002\u045b\u045c\u0005\u00e6t\u0002\u045c\u045d",
    "\u0007F\u0002\u0002\u045d\u045e\u0007S\u0002\u0002\u045e\u00b5\u0003",
    "\u0002\u0002\u0002\u045f\u0468\u0005\u00b4[\u0002\u0460\u0468\u0005",
    "\u00aaV\u0002\u0461\u0468\u0005\u00b2Z\u0002\u0462\u0468\u0005\u00ac",
    "W\u0002\u0463\u0468\u0005\u00b8]\u0002\u0464\u0468\u0005\u00b0Y\u0002",
    "\u0465\u0468\u0005\u00aeX\u0002\u0466\u0468\u0005\u00bc_\u0002\u0467",
    "\u045f\u0003\u0002\u0002\u0002\u0467\u0460\u0003\u0002\u0002\u0002\u0467",
    "\u0461\u0003\u0002\u0002\u0002\u0467\u0462\u0003\u0002\u0002\u0002\u0467",
    "\u0463\u0003\u0002\u0002\u0002\u0467\u0464\u0003\u0002\u0002\u0002\u0467",
    "\u0465\u0003\u0002\u0002\u0002\u0467\u0466\u0003\u0002\u0002\u0002\u0468",
    "\u00b7\u0003\u0002\u0002\u0002\u0469\u046a\u0005\u0014\u000b\u0002\u046a",
    "\u046b\u0007I\u0002\u0002\u046b\u046c\u0005\u00ba^\u0002\u046c\u046d",
    "\u0007J\u0002\u0002\u046d\u00b9\u0003\u0002\u0002\u0002\u046e\u0473",
    "\b^\u0001\u0002\u046f\u0470\f\u0003\u0002\u0002\u0470\u0472\u0005\u00c4",
    "c\u0002\u0471\u046f\u0003\u0002\u0002\u0002\u0472\u0475\u0003\u0002",
    "\u0002\u0002\u0473\u0471\u0003\u0002\u0002\u0002\u0473\u0474\u0003\u0002",
    "\u0002\u0002\u0474\u00bb\u0003\u0002\u0002\u0002\u0475\u0473\u0003\u0002",
    "\u0002\u0002\u0476\u0477\u0007%\u0002\u0002\u0477\u0478\u0007E\u0002",
    "\u0002\u0478\u0479\u0005\u00f2z\u0002\u0479\u047a\u0007F\u0002\u0002",
    "\u047a\u047b\u0007I\u0002\u0002\u047b\u047c\u0005\u00be`\u0002\u047c",
    "\u047d\u0007J\u0002\u0002\u047d\u00bd\u0003\u0002\u0002\u0002\u047e",
    "\u0483\b`\u0001\u0002\u047f\u0480\f\u0003\u0002\u0002\u0480\u0482\u0005",
    "\u00c0a\u0002\u0481\u047f\u0003\u0002\u0002\u0002\u0482\u0485\u0003",
    "\u0002\u0002\u0002\u0483\u0481\u0003\u0002\u0002\u0002\u0483\u0484\u0003",
    "\u0002\u0002\u0002\u0484\u00bf\u0003\u0002\u0002\u0002\u0485\u0483\u0003",
    "\u0002\u0002\u0002\u0486\u0487\u0005\u00c2b\u0002\u0487\u0488\u0007",
    "N\u0002\u0002\u0488\u0489\u0005\u00b8]\u0002\u0489\u048e\u0003\u0002",
    "\u0002\u0002\u048a\u048b\u0005\u00c2b\u0002\u048b\u048c\u0007N\u0002",
    "\u0002\u048c\u048e\u0003\u0002\u0002\u0002\u048d\u0486\u0003\u0002\u0002",
    "\u0002\u048d\u048a\u0003\u0002\u0002\u0002\u048e\u00c1\u0003\u0002\u0002",
    "\u0002\u048f\u0492\u0005\u000e\b\u0002\u0490\u0492\u0007\f\u0002\u0002",
    "\u0491\u048f\u0003\u0002\u0002\u0002\u0491\u0490\u0003\u0002\u0002\u0002",
    "\u0492\u00c3\u0003\u0002\u0002\u0002\u0493\u0498\u0005\u00dco\u0002",
    "\u0494\u0498\u0005\u00dep\u0002\u0495\u0498\u0005\u00b6\\\u0002\u0496",
    "\u0498\u0005,\u0017\u0002\u0497\u0493\u0003\u0002\u0002\u0002\u0497",
    "\u0494\u0003\u0002\u0002\u0002\u0497\u0495\u0003\u0002\u0002\u0002\u0497",
    "\u0496\u0003\u0002\u0002\u0002\u0498\u00c5\u0003\u0002\u0002\u0002\u0499",
    "\u049a\u0005\u0014\u000b\u0002\u049a\u049b\u0007&\u0002\u0002\u049b",
    "\u049c\u0005\u000e\b\u0002\u049c\u049d\u0007I\u0002\u0002\u049d\u049e",
    "\u0005\u00c8e\u0002\u049e\u049f\u0007J\u0002\u0002\u049f\u00c7\u0003",
    "\u0002\u0002\u0002\u04a0\u04a1\be\u0001\u0002\u04a1\u04a2\u0005\u00ca",
    "f\u0002\u04a2\u04a7\u0003\u0002\u0002\u0002\u04a3\u04a4\f\u0003\u0002",
    "\u0002\u04a4\u04a6\u0005\u00caf\u0002\u04a5\u04a3\u0003\u0002\u0002",
    "\u0002\u04a6\u04a9\u0003\u0002\u0002\u0002\u04a7\u04a5\u0003\u0002\u0002",
    "\u0002\u04a7\u04a8\u0003\u0002\u0002\u0002\u04a8\u00c9\u0003\u0002\u0002",
    "\u0002\u04a9\u04a7\u0003\u0002\u0002\u0002\u04aa\u04ab\u0007\u001a\u0002",
    "\u0002\u04ab\u04ac\u0007R\u0002\u0002\u04ac\u04ad\u0007I\u0002\u0002",
    "\u04ad\u04ae\u0005\u00ccg\u0002\u04ae\u04af\u0007J\u0002\u0002\u04af",
    "\u04c6\u0003\u0002\u0002\u0002\u04b0\u04b1\u0007\u0006\u0002\u0002\u04b1",
    "\u04b2\u0007R\u0002\u0002\u04b2\u04b3\u0007I\u0002\u0002\u04b3\u04b4",
    "\u0005\u00d0i\u0002\u04b4\u04b5\u0007J\u0002\u0002\u04b5\u04c6\u0003",
    "\u0002\u0002\u0002\u04b6\u04b7\u0005\u0014\u000b\u0002\u04b7\u04b8\u0005",
    "\u0012\n\u0002\u04b8\u04b9\u0007\u000e\u0002\u0002\u04b9\u04ba\u0007",
    "R\u0002\u0002\u04ba\u04bb\u0007I\u0002\u0002\u04bb\u04bc\u0005\u00d8",
    "m\u0002\u04bc\u04bd\u0007J\u0002\u0002\u04bd\u04c6\u0003\u0002\u0002",
    "\u0002\u04be\u04bf\u0005\u0014\u000b\u0002\u04bf\u04c0\u0005\u0012\n",
    "\u0002\u04c0\u04c1\u0005\u0010\t\u0002\u04c1\u04c2\u0007R\u0002\u0002",
    "\u04c2\u04c3\u0005\u00e2r\u0002\u04c3\u04c4\u0007S\u0002\u0002\u04c4",
    "\u04c6\u0003\u0002\u0002\u0002\u04c5\u04aa\u0003\u0002\u0002\u0002\u04c5",
    "\u04b0\u0003\u0002\u0002\u0002\u04c5\u04b6\u0003\u0002\u0002\u0002\u04c5",
    "\u04be\u0003\u0002\u0002\u0002\u04c6\u00cb\u0003\u0002\u0002\u0002\u04c7",
    "\u04cc\bg\u0001\u0002\u04c8\u04c9\f\u0003\u0002\u0002\u04c9\u04cb\u0005",
    "\u00ceh\u0002\u04ca\u04c8\u0003\u0002\u0002\u0002\u04cb\u04ce\u0003",
    "\u0002\u0002\u0002\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cc\u04cd\u0003",
    "\u0002\u0002\u0002\u04cd\u00cd\u0003\u0002\u0002\u0002\u04ce\u04cc\u0003",
    "\u0002\u0002\u0002\u04cf\u04d0\u0005\u00f2z\u0002\u04d0\u04d1\u0007",
    "N\u0002\u0002\u04d1\u04d2\u0005\u000e\b\u0002\u04d2\u04d3\u0005\u0014",
    "\u000b\u0002\u04d3\u04d4\u0007S\u0002\u0002\u04d4\u00cf\u0003\u0002",
    "\u0002\u0002\u04d5\u04dc\bi\u0001\u0002\u04d6\u04d7\f\u0003\u0002\u0002",
    "\u04d7\u04d8\u0005\u00d2j\u0002\u04d8\u04d9\u0007S\u0002\u0002\u04d9",
    "\u04db\u0003\u0002\u0002\u0002\u04da\u04d6\u0003\u0002\u0002\u0002\u04db",
    "\u04de\u0003\u0002\u0002\u0002\u04dc\u04da\u0003\u0002\u0002\u0002\u04dc",
    "\u04dd\u0003\u0002\u0002\u0002\u04dd\u00d1\u0003\u0002\u0002\u0002\u04de",
    "\u04dc\u0003\u0002\u0002\u0002\u04df\u04e0\u0005\u0014\u000b\u0002\u04e0",
    "\u04e1\u0005\u000e\b\u0002\u04e1\u04e9\u0003\u0002\u0002\u0002\u04e2",
    "\u04e3\u0005\u0014\u000b\u0002\u04e3\u04e4\u0005\u000e\b\u0002\u04e4",
    "\u04e5\u0007E\u0002\u0002\u04e5\u04e6\u0005\u00e6t\u0002\u04e6\u04e7",
    "\u0007F\u0002\u0002\u04e7\u04e9\u0003\u0002\u0002\u0002\u04e8\u04df",
    "\u0003\u0002\u0002\u0002\u04e8\u04e2\u0003\u0002\u0002\u0002\u04e9\u00d3",
    "\u0003\u0002\u0002\u0002\u04ea\u04eb\u0005T+\u0002\u04eb\u04ec\u0007",
    "N\u0002\u0002\u04ec\u04ed\u0005\u00d6l\u0002\u04ed\u04ee\u0005\u0014",
    "\u000b\u0002\u04ee\u04ef\u0007S\u0002\u0002\u04ef\u00d5\u0003\u0002",
    "\u0002\u0002\u04f0\u04f1\u0005\u00f0y\u0002\u04f1\u04f2\u0007E\u0002",
    "\u0002\u04f2\u04f3\u0005\u00e6t\u0002\u04f3\u04f4\u0007F\u0002\u0002",
    "\u04f4\u04fe\u0003\u0002\u0002\u0002\u04f5\u04f6\u0005\u00f0y\u0002",
    "\u04f6\u04f7\u0007K\u0002\u0002\u04f7\u04f8\u0005\u0088E\u0002\u04f8",
    "\u04f9\u0007L\u0002\u0002\u04f9\u04fa\u0007E\u0002\u0002\u04fa\u04fb",
    "\u0005\u00e6t\u0002\u04fb\u04fc\u0007F\u0002\u0002\u04fc\u04fe\u0003",
    "\u0002\u0002\u0002\u04fd\u04f0\u0003\u0002\u0002\u0002\u04fd\u04f5\u0003",
    "\u0002\u0002\u0002\u04fe\u00d7\u0003\u0002\u0002\u0002\u04ff\u0500\b",
    "m\u0001\u0002\u0500\u0501\u0005\u00d4k\u0002\u0501\u0506\u0003\u0002",
    "\u0002\u0002\u0502\u0503\f\u0003\u0002\u0002\u0503\u0505\u0005\u00d4",
    "k\u0002\u0504\u0502\u0003\u0002\u0002\u0002\u0505\u0508\u0003\u0002",
    "\u0002\u0002\u0506\u0504\u0003\u0002\u0002\u0002\u0506\u0507\u0003\u0002",
    "\u0002\u0002\u0507\u00d9\u0003\u0002\u0002\u0002\u0508\u0506\u0003\u0002",
    "\u0002\u0002\u0509\u050a\u0005\u0014\u000b\u0002\u050a\u050b\u0007\u0005",
    "\u0002\u0002\u050b\u050c\u0005\u000e\b\u0002\u050c\u050d\u0007E\u0002",
    "\u0002\u050d\u050e\u0005\"\u0012\u0002\u050e\u050f\u0007F\u0002\u0002",
    "\u050f\u0510\u0005\u00b8]\u0002\u0510\u00db\u0003\u0002\u0002\u0002",
    "\u0511\u0512\u0005\u0016\f\u0002\u0512\u0513\u0005p9\u0002\u0513\u0514",
    "\u0005\u000e\b\u0002\u0514\u0515\u0005\u00e0q\u0002\u0515\u0516\u0007",
    "S\u0002\u0002\u0516\u051d\u0003\u0002\u0002\u0002\u0517\u0518\u0005",
    "p9\u0002\u0518\u0519\u0005\u000e\b\u0002\u0519\u051a\u0005\u00e0q\u0002",
    "\u051a\u051b\u0007S\u0002\u0002\u051b\u051d\u0003\u0002\u0002\u0002",
    "\u051c\u0511\u0003\u0002\u0002\u0002\u051c\u0517\u0003\u0002\u0002\u0002",
    "\u051d\u00dd\u0003\u0002\u0002\u0002\u051e\u051f\u0005\u0014\u000b\u0002",
    "\u051f\u0520\u0007\n\u0002\u0002\u0520\u0521\u0005p9\u0002\u0521\u0522",
    "\u0005\u000e\b\u0002\u0522\u0523\u0007R\u0002\u0002\u0523\u0524\u0005",
    "\u00e2r\u0002\u0524\u0525\u0007S\u0002\u0002\u0525\u00df\u0003\u0002",
    "\u0002\u0002\u0526\u052a\u0003\u0002\u0002\u0002\u0527\u0528\u0007R",
    "\u0002\u0002\u0528\u052a\u0005\u00e2r\u0002\u0529\u0526\u0003\u0002",
    "\u0002\u0002\u0529\u0527\u0003\u0002\u0002\u0002\u052a\u00e1\u0003\u0002",
    "\u0002\u0002\u052b\u052c\u0005\u00f2z\u0002\u052c\u00e3\u0003\u0002",
    "\u0002\u0002\u052d\u052e\u0005l7\u0002\u052e\u052f\u0005\u00b8]\u0002",
    "\u052f\u00e5\u0003\u0002\u0002\u0002\u0530\u0533\u0003\u0002\u0002\u0002",
    "\u0531\u0533\u0005\u00e8u\u0002\u0532\u0530\u0003\u0002\u0002\u0002",
    "\u0532\u0531\u0003\u0002\u0002\u0002\u0533\u00e7\u0003\u0002\u0002\u0002",
    "\u0534\u0535\bu\u0001\u0002\u0535\u0536\u0005\u00eav\u0002\u0536\u053c",
    "\u0003\u0002\u0002\u0002\u0537\u0538\f\u0003\u0002\u0002\u0538\u0539",
    "\u0007O\u0002\u0002\u0539\u053b\u0005\u00eav\u0002\u053a\u0537\u0003",
    "\u0002\u0002\u0002\u053b\u053e\u0003\u0002\u0002\u0002\u053c\u053a\u0003",
    "\u0002\u0002\u0002\u053c\u053d\u0003\u0002\u0002\u0002\u053d\u00e9\u0003",
    "\u0002\u0002\u0002\u053e\u053c\u0003\u0002\u0002\u0002\u053f\u0546\u0005",
    "\u00f2z\u0002\u0540\u0541\u0005\u000e\b\u0002\u0541\u0542\u0007R\u0002",
    "\u0002\u0542\u0543\u0005\u00f2z\u0002\u0543\u0546\u0003\u0002\u0002",
    "\u0002\u0544\u0546\u0007/\u0002\u0002\u0545\u053f\u0003\u0002\u0002",
    "\u0002\u0545\u0540\u0003\u0002\u0002\u0002\u0545\u0544\u0003\u0002\u0002",
    "\u0002\u0546\u00eb\u0003\u0002\u0002\u0002\u0547\u054a\bw\u0001\u0002",
    "\u0548\u054a\u0005\u00f2z\u0002\u0549\u0547\u0003\u0002\u0002\u0002",
    "\u0549\u0548\u0003\u0002\u0002\u0002\u054a\u0550\u0003\u0002\u0002\u0002",
    "\u054b\u054c\f\u0003\u0002\u0002\u054c\u054d\u0007O\u0002\u0002\u054d",
    "\u054f\u0005\u00f2z\u0002\u054e\u054b\u0003\u0002\u0002\u0002\u054f",
    "\u0552\u0003\u0002\u0002\u0002\u0550\u054e\u0003\u0002\u0002\u0002\u0550",
    "\u0551\u0003\u0002\u0002\u0002\u0551\u00ed\u0003\u0002\u0002\u0002\u0552",
    "\u0550\u0003\u0002\u0002\u0002\u0553\u0558\u0005\f\u0007\u0002\u0554",
    "\u0555\u00056\u001c\u0002\u0555\u0556\u0005\f\u0007\u0002\u0556\u0558",
    "\u0003\u0002\u0002\u0002\u0557\u0553\u0003\u0002\u0002\u0002\u0557\u0554",
    "\u0003\u0002\u0002\u0002\u0558\u00ef\u0003\u0002\u0002\u0002\u0559\u055a",
    "\by\u0001\u0002\u055a\u055d\u0005\u00eex\u0002\u055b\u055d\u0007\'\u0002",
    "\u0002\u055c\u0559\u0003\u0002\u0002\u0002\u055c\u055b\u0003\u0002\u0002",
    "\u0002\u055d\u056f\u0003\u0002\u0002\u0002\u055e\u055f\f\u0005\u0002",
    "\u0002\u055f\u0560\u0007Q\u0002\u0002\u0560\u056e\u0005\u000e\b\u0002",
    "\u0561\u0562\f\u0004\u0002\u0002\u0562\u0563\u0007G\u0002\u0002\u0563",
    "\u0564\u0005\u00f2z\u0002\u0564\u0565\u0007H\u0002\u0002\u0565\u056e",
    "\u0003\u0002\u0002\u0002\u0566\u0567\f\u0003\u0002\u0002\u0567\u0568",
    "\u0007G\u0002\u0002\u0568\u0569\u0005\u00f2z\u0002\u0569\u056a\u0007",
    "N\u0002\u0002\u056a\u056b\u0005\u00f2z\u0002\u056b\u056c\u0007H\u0002",
    "\u0002\u056c\u056e\u0003\u0002\u0002\u0002\u056d\u055e\u0003\u0002\u0002",
    "\u0002\u056d\u0561\u0003\u0002\u0002\u0002\u056d\u0566\u0003\u0002\u0002",
    "\u0002\u056e\u0571\u0003\u0002\u0002\u0002\u056f\u056d\u0003\u0002\u0002",
    "\u0002\u056f\u0570\u0003\u0002\u0002\u0002\u0570\u00f1\u0003\u0002\u0002",
    "\u0002\u0571\u056f\u0003\u0002\u0002\u0002\u0572\u0573\bz\u0001\u0002",
    "\u0573\u059e\u0007]\u0002\u0002\u0574\u059e\u0007Y\u0002\u0002\u0575",
    "\u059e\u0007)\u0002\u0002\u0576\u059e\u0007\u0013\u0002\u0002\u0577",
    "\u059e\u0007\'\u0002\u0002\u0578\u059e\u0005\f\u0007\u0002\u0579\u057a",
    "\u00056\u001c\u0002\u057a\u057b\u0005\f\u0007\u0002\u057b\u059e\u0003",
    "\u0002\u0002\u0002\u057c\u057d\u0007I\u0002\u0002\u057d\u057e\u0005",
    "\u00ecw\u0002\u057e\u057f\u0007J\u0002\u0002\u057f\u059e\u0003\u0002",
    "\u0002\u0002\u0580\u0581\u0007E\u0002\u0002\u0581\u0582\u0005\u00f2",
    "z\u0002\u0582\u0583\u0007F\u0002\u0002\u0583\u059e\u0003\u0002\u0002",
    "\u0002\u0584\u0585\u0007M\u0002\u0002\u0585\u059e\u0005\u00f2z#\u0586",
    "\u0587\u0007D\u0002\u0002\u0587\u059e\u0005\u00f2z\"\u0588\u0589\u0007",
    "<\u0002\u0002\u0589\u059e\u0005\u00f2z!\u058a\u058b\u0007:\u0002\u0002",
    "\u058b\u059e\u0005\u00f2z \u058c\u058d\u0005v<\u0002\u058d\u058e\u0007",
    "Q\u0002\u0002\u058e\u058f\u0005\u000e\b\u0002\u058f\u059e\u0003\u0002",
    "\u0002\u0002\u0590\u0591\u0007\u0010\u0002\u0002\u0591\u0592\u0007Q",
    "\u0002\u0002\u0592\u059e\u0005\u000e\b\u0002\u0593\u0594\u0005r:\u0002",
    "\u0594\u0595\u0007E\u0002\u0002\u0595\u0596\u0005\u00e6t\u0002\u0596",
    "\u0597\u0007F\u0002\u0002\u0597\u059e\u0003\u0002\u0002\u0002\u0598",
    "\u0599\u0007E\u0002\u0002\u0599\u059a\u0005p9\u0002\u059a\u059b\u0007",
    "F\u0002\u0002\u059b\u059c\u0005\u00f2z\u0003\u059c\u059e\u0003\u0002",
    "\u0002\u0002\u059d\u0572\u0003\u0002\u0002\u0002\u059d\u0574\u0003\u0002",
    "\u0002\u0002\u059d\u0575\u0003\u0002\u0002\u0002\u059d\u0576\u0003\u0002",
    "\u0002\u0002\u059d\u0577\u0003\u0002\u0002\u0002\u059d\u0578\u0003\u0002",
    "\u0002\u0002\u059d\u0579\u0003\u0002\u0002\u0002\u059d\u057c\u0003\u0002",
    "\u0002\u0002\u059d\u0580\u0003\u0002\u0002\u0002\u059d\u0584\u0003\u0002",
    "\u0002\u0002\u059d\u0586\u0003\u0002\u0002\u0002\u059d\u0588\u0003\u0002",
    "\u0002\u0002\u059d\u058a\u0003\u0002\u0002\u0002\u059d\u058c\u0003\u0002",
    "\u0002\u0002\u059d\u0590\u0003\u0002\u0002\u0002\u059d\u0593\u0003\u0002",
    "\u0002\u0002\u059d\u0598\u0003\u0002\u0002\u0002\u059e\u0603\u0003\u0002",
    "\u0002\u0002\u059f\u05a0\f\u001c\u0002\u0002\u05a0\u05a1\u0007>\u0002",
    "\u0002\u05a1\u0602\u0005\u00f2z\u001d\u05a2\u05a3\f\u001b\u0002\u0002",
    "\u05a3\u05a4\u0007?\u0002\u0002\u05a4\u0602\u0005\u00f2z\u001c\u05a5",
    "\u05a6\f\u001a\u0002\u0002\u05a6\u05a7\u0007@\u0002\u0002\u05a7\u0602",
    "\u0005\u00f2z\u001b\u05a8\u05a9\f\u0019\u0002\u0002\u05a9\u05aa\u0007",
    ":\u0002\u0002\u05aa\u0602\u0005\u00f2z\u001a\u05ab\u05ac\f\u0018\u0002",
    "\u0002\u05ac\u05ad\u0007<\u0002\u0002\u05ad\u0602\u0005\u00f2z\u0019",
    "\u05ae\u05af\f\u0017\u0002\u0002\u05af\u05b0\u0007;\u0002\u0002\u05b0",
    "\u0602\u0005\u00f2z\u0018\u05b1\u05b2\f\u0016\u0002\u0002\u05b2\u05b3",
    "\u0007=\u0002\u0002\u05b3\u0602\u0005\u00f2z\u0017\u05b4\u05b5\f\u0015",
    "\u0002\u0002\u05b5\u05b6\u00072\u0002\u0002\u05b6\u0602\u0005\u00f2",
    "z\u0016\u05b7\u05b8\f\u0014\u0002\u0002\u05b8\u05b9\u0007L\u0002\u0002",
    "\u05b9\u05ba\u0007L\u0002\u0002\u05ba\u0602\u0005\u00f2z\u0015\u05bb",
    "\u05bc\f\u0013\u0002\u0002\u05bc\u05bd\u00078\u0002\u0002\u05bd\u0602",
    "\u0005\u00f2z\u0014\u05be\u05bf\f\u0012\u0002\u0002\u05bf\u05c0\u0007",
    "7\u0002\u0002\u05c0\u0602\u0005\u00f2z\u0013\u05c1\u05c2\f\u0011\u0002",
    "\u0002\u05c2\u05c3\u0007K\u0002\u0002\u05c3\u0602\u0005\u00f2z\u0012",
    "\u05c4\u05c5\f\u0010\u0002\u0002\u05c5\u05c6\u0007L\u0002\u0002\u05c6",
    "\u0602\u0005\u00f2z\u0011\u05c7\u05c8\f\u000f\u0002\u0002\u05c8\u05c9",
    "\u00076\u0002\u0002\u05c9\u0602\u0005\u00f2z\u0010\u05ca\u05cb\f\u000e",
    "\u0002\u0002\u05cb\u05cc\u00075\u0002\u0002\u05cc\u0602\u0005\u00f2",
    "z\u000f\u05cd\u05ce\f\r\u0002\u0002\u05ce\u05cf\u0007B\u0002\u0002\u05cf",
    "\u0602\u0005\u00f2z\u000e\u05d0\u05d1\f\f\u0002\u0002\u05d1\u05d2\u0007",
    "C\u0002\u0002\u05d2\u0602\u0005\u00f2z\r\u05d3\u05d4\f\u000b\u0002\u0002",
    "\u05d4\u05d5\u0007A\u0002\u0002\u05d5\u0602\u0005\u00f2z\f\u05d6\u05d7",
    "\f\n\u0002\u0002\u05d7\u05d8\u00079\u0002\u0002\u05d8\u0602\u0005\u00f2",
    "z\u000b\u05d9\u05da\f\t\u0002\u0002\u05da\u05db\u00073\u0002\u0002\u05db",
    "\u0602\u0005\u00f2z\n\u05dc\u05dd\f\b\u0002\u0002\u05dd\u05de\u0007",
    "4\u0002\u0002\u05de\u0602\u0005\u00f2z\t\u05df\u05e0\f\u0007\u0002\u0002",
    "\u05e0\u05e1\u0007P\u0002\u0002\u05e1\u05e2\u0005\u00f2z\u0002\u05e2",
    "\u05e3\u0007N\u0002\u0002\u05e3\u05e4\u0005\u00f2z\b\u05e4\u0602\u0003",
    "\u0002\u0002\u0002\u05e5\u05e6\f\'\u0002\u0002\u05e6\u05e7\u0007G\u0002",
    "\u0002\u05e7\u05e8\u0005\u00f2z\u0002\u05e8\u05e9\u0007H\u0002\u0002",
    "\u05e9\u0602\u0003\u0002\u0002\u0002\u05ea\u05eb\f&\u0002\u0002\u05eb",
    "\u05ec\u0007G\u0002\u0002\u05ec\u05ed\u0005\u00f2z\u0002\u05ed\u05ee",
    "\u0007N\u0002\u0002\u05ee\u05ef\u0005\u00f2z\u0002\u05ef\u05f0\u0007",
    "H\u0002\u0002\u05f0\u0602\u0003\u0002\u0002\u0002\u05f1\u05f2\f\u001d",
    "\u0002\u0002\u05f2\u05f3\u0007Q\u0002\u0002\u05f3\u0602\u0005\u000e",
    "\b\u0002\u05f4\u05f5\f\u0006\u0002\u0002\u05f5\u05f6\u0007K\u0002\u0002",
    "\u05f6\u05f7\u0005\u008cG\u0002\u05f7\u05f8\u0007L\u0002\u0002\u05f8",
    "\u05f9\u0007E\u0002\u0002\u05f9\u05fa\u0005\u00e6t\u0002\u05fa\u05fb",
    "\u0007F\u0002\u0002\u05fb\u0602\u0003\u0002\u0002\u0002\u05fc\u05fd",
    "\f\u0005\u0002\u0002\u05fd\u05fe\u0007E\u0002\u0002\u05fe\u05ff\u0005",
    "\u00e6t\u0002\u05ff\u0600\u0007F\u0002\u0002\u0600\u0602\u0003\u0002",
    "\u0002\u0002\u0601\u059f\u0003\u0002\u0002\u0002\u0601\u05a2\u0003\u0002",
    "\u0002\u0002\u0601\u05a5\u0003\u0002\u0002\u0002\u0601\u05a8\u0003\u0002",
    "\u0002\u0002\u0601\u05ab\u0003\u0002\u0002\u0002\u0601\u05ae\u0003\u0002",
    "\u0002\u0002\u0601\u05b1\u0003\u0002\u0002\u0002\u0601\u05b4\u0003\u0002",
    "\u0002\u0002\u0601\u05b7\u0003\u0002\u0002\u0002\u0601\u05bb\u0003\u0002",
    "\u0002\u0002\u0601\u05be\u0003\u0002\u0002\u0002\u0601\u05c1\u0003\u0002",
    "\u0002\u0002\u0601\u05c4\u0003\u0002\u0002\u0002\u0601\u05c7\u0003\u0002",
    "\u0002\u0002\u0601\u05ca\u0003\u0002\u0002\u0002\u0601\u05cd\u0003\u0002",
    "\u0002\u0002\u0601\u05d0\u0003\u0002\u0002\u0002\u0601\u05d3\u0003\u0002",
    "\u0002\u0002\u0601\u05d6\u0003\u0002\u0002\u0002\u0601\u05d9\u0003\u0002",
    "\u0002\u0002\u0601\u05dc\u0003\u0002\u0002\u0002\u0601\u05df\u0003\u0002",
    "\u0002\u0002\u0601\u05e5\u0003\u0002\u0002\u0002\u0601\u05ea\u0003\u0002",
    "\u0002\u0002\u0601\u05f1\u0003\u0002\u0002\u0002\u0601\u05f4\u0003\u0002",
    "\u0002\u0002\u0601\u05fc\u0003\u0002\u0002\u0002\u0602\u0605\u0003\u0002",
    "\u0002\u0002\u0603\u0601\u0003\u0002\u0002\u0002\u0603\u0604\u0003\u0002",
    "\u0002\u0002\u0604\u00f3\u0003\u0002\u0002\u0002\u0605\u0603\u0003\u0002",
    "\u0002\u0002\u0606\u0607\t\u0002\u0002\u0002\u0607\u00f5\u0003\u0002",
    "\u0002\u0002Z\u00ff\u0101\u010f\u011a\u011e\u0124\u0128\u012c\u0135",
    "\u0144\u014e\u0150\u01a6\u01b0\u01b9\u01c3\u01d2\u01d8\u0204\u020f\u0214",
    "\u021b\u022b\u0232\u0243\u0253\u025b\u0265\u026b\u027a\u0284\u0294\u02a2",
    "\u02c5\u02dc\u02e4\u02fa\u0301\u031b\u0322\u0326\u032c\u0364\u0369\u0370",
    "\u037a\u0381\u0385\u038c\u0392\u039c\u03ac\u03b2\u03ce\u03e8\u03f2\u040b",
    "\u0422\u0438\u0445\u0455\u0467\u0473\u0483\u048d\u0491\u0497\u04a7\u04c5",
    "\u04cc\u04dc\u04e8\u04fd\u0506\u051c\u0529\u0532\u053c\u0545\u0549\u0550",
    "\u0557\u055c\u056d\u056f\u059d\u0601\u0603"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'@pragma'", "'abstract'", "'action'", "'actions'", 
                     "'apply'", "'bool'", "'bit'", "'const'", "'control'", 
                     "'default'", "'else'", "'entries'", "'enum'", "'error'", 
                     "'exit'", "'extern'", "'false'", "'header'", "'header_union'", 
                     "'if'", "'in'", "'inout'", "'int'", "'key'", "'match_kind'", 
                     "'type'", "'out'", "'parser'", "'package'", "'return'", 
                     "'select'", "'state'", "'mega_state'", "'struct'", 
                     "'switch'", "'table'", "'this'", "'transition'", "'true'", 
                     "'tuple'", "'typedef'", "'varbit'", "'value_set'", 
                     "'void'", "'_'", "'&&&'", "'..'", "'<<'", "'&&'", "'||'", 
                     "'=='", "'!='", "'>='", "'<='", "'++'", "'+'", "'|+|'", 
                     "'-'", "'|-|'", "'*'", "'/'", "'%'", "'|'", "'&'", 
                     "'^'", "'~'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'<'", "'>'", "'!'", "':'", "','", "'?'", "'.'", "'='", 
                     "';'", "'@'", "'<*>.|\n'" ];

var symbolicNames = [ null, "PRAGMA", "ABSTRACT", "ACTION", "ACTIONS", "APPLY", 
                      "BOOL", "BIT", "CONST", "CONTROL", "DEFAULT", "ELSE", 
                      "ENTRIES", "ENUM", "ERROR", "EXIT", "EXTERN", "FALSE", 
                      "HEADER", "HEADER_UNION", "IF", "IN", "INOUT", "INT", 
                      "KEY", "MATCH_KIND", "TYPE", "OUT", "PARSER", "PACKAGE", 
                      "RETURN", "SELECT", "STATE", "MEGA_STATE", "STRUCT", 
                      "SWITCH", "TABLE", "THIS", "TRANSITION", "TRUE", "TUPLE", 
                      "TYPEDEF", "VARBIT", "VALUESET", "VOID", "DONTCARE", 
                      "MASK", "RANGE", "SHL", "AND", "OR", "EQ", "NE", "GE", 
                      "LE", "PP", "PLUS", "PLUS_SAT", "MINUS", "MINUS_SAT", 
                      "MUL", "DIV", "MOD", "BIT_OR", "BIT_AND", "BIT_XOR", 
                      "COMPLEMENT", "L_PAREN", "R_PAREN", "L_BRACKET", "R_BRACKET", 
                      "L_BRACE", "R_BRACE", "L_ANGLE", "R_ANGLE", "NOT", 
                      "COLON", "COMMA", "QUESTION", "DOT", "ASSIGN", "SEMICOLON", 
                      "AT", "UNEXPECTED_TOKEN", "WS", "COMMENT", "LINE_COMMENT", 
                      "STRING_LITERAL", "INCLUDE_LINE", "IDENTIFIER", "TYPE_IDENTIFIER", 
                      "INTEGER" ];

var ruleNames =  [ "start", "program", "input", "declaration", "includeLine", 
                   "nonTypeName", "name", "nonTableKwName", "optCONST", 
                   "optAnnotations", "annotations", "annotation", "annotationBody", 
                   "annotationToken", "kvList", "kvPair", "parameterList", 
                   "nonEmptyParameterList", "parameter", "direction", "packageTypeDeclaration", 
                   "instantiation", "objInitializer", "objDeclarations", 
                   "objDeclaration", "optConstructorParameters", "dotPrefix", 
                   "parserDeclaration", "parserLocalElements", "parserLocalElement", 
                   "parserTypeDeclaration", "parserStates", "parserState", 
                   "parserStatements", "parserStatement", "parserBlockStatement", 
                   "transitionStatement", "stateExpression", "selectExpression", 
                   "selectCaseList", "selectCase", "keysetExpression", "tupleKeysetExpression", 
                   "simpleExpressionList", "simpleKeysetExpression", "valueSetDeclaration", 
                   "controlDeclaration", "controlTypeDeclaration", "controlLocalDeclarations", 
                   "controlLocalDeclaration", "controlBody", "externDeclaration", 
                   "methodPrototypes", "functionPrototype", "methodPrototype", 
                   "typeRef", "namedType", "prefixedType", "typeName", "tupleType", 
                   "headerStackType", "specializedType", "baseType", "typeOrVoid", 
                   "optTypeParameters", "typeParameterList", "typeArg", 
                   "typeArgumentList", "realTypeArg", "realTypeArgumentList", 
                   "typeDeclaration", "derivedTypeDeclaration", "headerTypeDeclaration", 
                   "structTypeDeclaration", "headerUnionDeclaration", "structFieldList", 
                   "structField", "enumDeclaration", "specifiedIdentifierList", 
                   "specifiedIdentifier", "errorDeclaration", "matchKindDeclaration", 
                   "identifierList", "typedefDeclaration", "assignmentOrMethodCallStatement", 
                   "emptyStatement", "exitStatement", "returnStatement", 
                   "conditionalStatement", "directApplication", "statement", 
                   "blockStatement", "statOrDeclList", "switchStatement", 
                   "switchCases", "switchCase", "switchLabel", "statementOrDeclaration", 
                   "tableDeclaration", "tablePropertyList", "tableProperty", 
                   "keyElementList", "keyElement", "actionList", "actionRef", 
                   "entry", "actionBinding", "entriesList", "actionDeclaration", 
                   "variableDeclaration", "constantDeclaration", "optInitializer", 
                   "initializer", "functionDeclaration", "argumentList", 
                   "nonEmptyArgList", "argument", "expressionList", "prefixedNonTypeName", 
                   "lvalue", "expression", "type_or_id" ];

function P4Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

P4Parser.prototype = Object.create(antlr4.Parser.prototype);
P4Parser.prototype.constructor = P4Parser;

Object.defineProperty(P4Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

P4Parser.EOF = antlr4.Token.EOF;
P4Parser.PRAGMA = 1;
P4Parser.ABSTRACT = 2;
P4Parser.ACTION = 3;
P4Parser.ACTIONS = 4;
P4Parser.APPLY = 5;
P4Parser.BOOL = 6;
P4Parser.BIT = 7;
P4Parser.CONST = 8;
P4Parser.CONTROL = 9;
P4Parser.DEFAULT = 10;
P4Parser.ELSE = 11;
P4Parser.ENTRIES = 12;
P4Parser.ENUM = 13;
P4Parser.ERROR = 14;
P4Parser.EXIT = 15;
P4Parser.EXTERN = 16;
P4Parser.FALSE = 17;
P4Parser.HEADER = 18;
P4Parser.HEADER_UNION = 19;
P4Parser.IF = 20;
P4Parser.IN = 21;
P4Parser.INOUT = 22;
P4Parser.INT = 23;
P4Parser.KEY = 24;
P4Parser.MATCH_KIND = 25;
P4Parser.TYPE = 26;
P4Parser.OUT = 27;
P4Parser.PARSER = 28;
P4Parser.PACKAGE = 29;
P4Parser.RETURN = 30;
P4Parser.SELECT = 31;
P4Parser.STATE = 32;
P4Parser.MEGA_STATE = 33;
P4Parser.STRUCT = 34;
P4Parser.SWITCH = 35;
P4Parser.TABLE = 36;
P4Parser.THIS = 37;
P4Parser.TRANSITION = 38;
P4Parser.TRUE = 39;
P4Parser.TUPLE = 40;
P4Parser.TYPEDEF = 41;
P4Parser.VARBIT = 42;
P4Parser.VALUESET = 43;
P4Parser.VOID = 44;
P4Parser.DONTCARE = 45;
P4Parser.MASK = 46;
P4Parser.RANGE = 47;
P4Parser.SHL = 48;
P4Parser.AND = 49;
P4Parser.OR = 50;
P4Parser.EQ = 51;
P4Parser.NE = 52;
P4Parser.GE = 53;
P4Parser.LE = 54;
P4Parser.PP = 55;
P4Parser.PLUS = 56;
P4Parser.PLUS_SAT = 57;
P4Parser.MINUS = 58;
P4Parser.MINUS_SAT = 59;
P4Parser.MUL = 60;
P4Parser.DIV = 61;
P4Parser.MOD = 62;
P4Parser.BIT_OR = 63;
P4Parser.BIT_AND = 64;
P4Parser.BIT_XOR = 65;
P4Parser.COMPLEMENT = 66;
P4Parser.L_PAREN = 67;
P4Parser.R_PAREN = 68;
P4Parser.L_BRACKET = 69;
P4Parser.R_BRACKET = 70;
P4Parser.L_BRACE = 71;
P4Parser.R_BRACE = 72;
P4Parser.L_ANGLE = 73;
P4Parser.R_ANGLE = 74;
P4Parser.NOT = 75;
P4Parser.COLON = 76;
P4Parser.COMMA = 77;
P4Parser.QUESTION = 78;
P4Parser.DOT = 79;
P4Parser.ASSIGN = 80;
P4Parser.SEMICOLON = 81;
P4Parser.AT = 82;
P4Parser.UNEXPECTED_TOKEN = 83;
P4Parser.WS = 84;
P4Parser.COMMENT = 85;
P4Parser.LINE_COMMENT = 86;
P4Parser.STRING_LITERAL = 87;
P4Parser.INCLUDE_LINE = 88;
P4Parser.IDENTIFIER = 89;
P4Parser.TYPE_IDENTIFIER = 90;
P4Parser.INTEGER = 91;

P4Parser.RULE_start = 0;
P4Parser.RULE_program = 1;
P4Parser.RULE_input = 2;
P4Parser.RULE_declaration = 3;
P4Parser.RULE_includeLine = 4;
P4Parser.RULE_nonTypeName = 5;
P4Parser.RULE_name = 6;
P4Parser.RULE_nonTableKwName = 7;
P4Parser.RULE_optCONST = 8;
P4Parser.RULE_optAnnotations = 9;
P4Parser.RULE_annotations = 10;
P4Parser.RULE_annotation = 11;
P4Parser.RULE_annotationBody = 12;
P4Parser.RULE_annotationToken = 13;
P4Parser.RULE_kvList = 14;
P4Parser.RULE_kvPair = 15;
P4Parser.RULE_parameterList = 16;
P4Parser.RULE_nonEmptyParameterList = 17;
P4Parser.RULE_parameter = 18;
P4Parser.RULE_direction = 19;
P4Parser.RULE_packageTypeDeclaration = 20;
P4Parser.RULE_instantiation = 21;
P4Parser.RULE_objInitializer = 22;
P4Parser.RULE_objDeclarations = 23;
P4Parser.RULE_objDeclaration = 24;
P4Parser.RULE_optConstructorParameters = 25;
P4Parser.RULE_dotPrefix = 26;
P4Parser.RULE_parserDeclaration = 27;
P4Parser.RULE_parserLocalElements = 28;
P4Parser.RULE_parserLocalElement = 29;
P4Parser.RULE_parserTypeDeclaration = 30;
P4Parser.RULE_parserStates = 31;
P4Parser.RULE_parserState = 32;
P4Parser.RULE_parserStatements = 33;
P4Parser.RULE_parserStatement = 34;
P4Parser.RULE_parserBlockStatement = 35;
P4Parser.RULE_transitionStatement = 36;
P4Parser.RULE_stateExpression = 37;
P4Parser.RULE_selectExpression = 38;
P4Parser.RULE_selectCaseList = 39;
P4Parser.RULE_selectCase = 40;
P4Parser.RULE_keysetExpression = 41;
P4Parser.RULE_tupleKeysetExpression = 42;
P4Parser.RULE_simpleExpressionList = 43;
P4Parser.RULE_simpleKeysetExpression = 44;
P4Parser.RULE_valueSetDeclaration = 45;
P4Parser.RULE_controlDeclaration = 46;
P4Parser.RULE_controlTypeDeclaration = 47;
P4Parser.RULE_controlLocalDeclarations = 48;
P4Parser.RULE_controlLocalDeclaration = 49;
P4Parser.RULE_controlBody = 50;
P4Parser.RULE_externDeclaration = 51;
P4Parser.RULE_methodPrototypes = 52;
P4Parser.RULE_functionPrototype = 53;
P4Parser.RULE_methodPrototype = 54;
P4Parser.RULE_typeRef = 55;
P4Parser.RULE_namedType = 56;
P4Parser.RULE_prefixedType = 57;
P4Parser.RULE_typeName = 58;
P4Parser.RULE_tupleType = 59;
P4Parser.RULE_headerStackType = 60;
P4Parser.RULE_specializedType = 61;
P4Parser.RULE_baseType = 62;
P4Parser.RULE_typeOrVoid = 63;
P4Parser.RULE_optTypeParameters = 64;
P4Parser.RULE_typeParameterList = 65;
P4Parser.RULE_typeArg = 66;
P4Parser.RULE_typeArgumentList = 67;
P4Parser.RULE_realTypeArg = 68;
P4Parser.RULE_realTypeArgumentList = 69;
P4Parser.RULE_typeDeclaration = 70;
P4Parser.RULE_derivedTypeDeclaration = 71;
P4Parser.RULE_headerTypeDeclaration = 72;
P4Parser.RULE_structTypeDeclaration = 73;
P4Parser.RULE_headerUnionDeclaration = 74;
P4Parser.RULE_structFieldList = 75;
P4Parser.RULE_structField = 76;
P4Parser.RULE_enumDeclaration = 77;
P4Parser.RULE_specifiedIdentifierList = 78;
P4Parser.RULE_specifiedIdentifier = 79;
P4Parser.RULE_errorDeclaration = 80;
P4Parser.RULE_matchKindDeclaration = 81;
P4Parser.RULE_identifierList = 82;
P4Parser.RULE_typedefDeclaration = 83;
P4Parser.RULE_assignmentOrMethodCallStatement = 84;
P4Parser.RULE_emptyStatement = 85;
P4Parser.RULE_exitStatement = 86;
P4Parser.RULE_returnStatement = 87;
P4Parser.RULE_conditionalStatement = 88;
P4Parser.RULE_directApplication = 89;
P4Parser.RULE_statement = 90;
P4Parser.RULE_blockStatement = 91;
P4Parser.RULE_statOrDeclList = 92;
P4Parser.RULE_switchStatement = 93;
P4Parser.RULE_switchCases = 94;
P4Parser.RULE_switchCase = 95;
P4Parser.RULE_switchLabel = 96;
P4Parser.RULE_statementOrDeclaration = 97;
P4Parser.RULE_tableDeclaration = 98;
P4Parser.RULE_tablePropertyList = 99;
P4Parser.RULE_tableProperty = 100;
P4Parser.RULE_keyElementList = 101;
P4Parser.RULE_keyElement = 102;
P4Parser.RULE_actionList = 103;
P4Parser.RULE_actionRef = 104;
P4Parser.RULE_entry = 105;
P4Parser.RULE_actionBinding = 106;
P4Parser.RULE_entriesList = 107;
P4Parser.RULE_actionDeclaration = 108;
P4Parser.RULE_variableDeclaration = 109;
P4Parser.RULE_constantDeclaration = 110;
P4Parser.RULE_optInitializer = 111;
P4Parser.RULE_initializer = 112;
P4Parser.RULE_functionDeclaration = 113;
P4Parser.RULE_argumentList = 114;
P4Parser.RULE_nonEmptyArgList = 115;
P4Parser.RULE_argument = 116;
P4Parser.RULE_expressionList = 117;
P4Parser.RULE_prefixedNonTypeName = 118;
P4Parser.RULE_lvalue = 119;
P4Parser.RULE_expression = 120;
P4Parser.RULE_type_or_id = 121;


function StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_start;
    return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.program = function() {
    return this.getTypedRuleContext(ProgramContext,0);
};

StartContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterStart(this);
	}
};

StartContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitStart(this);
	}
};




P4Parser.StartContext = StartContext;

P4Parser.prototype.start = function() {

    var localctx = new StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, P4Parser.RULE_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 244;
        this.program();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.input = function() {
    return this.getTypedRuleContext(InputContext,0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitProgram(this);
	}
};




P4Parser.ProgramContext = ProgramContext;

P4Parser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, P4Parser.RULE_program);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 246;
        this.input(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_input;
    return this;
}

InputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputContext.prototype.constructor = InputContext;

InputContext.prototype.input = function() {
    return this.getTypedRuleContext(InputContext,0);
};

InputContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

InputContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

InputContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterInput(this);
	}
};

InputContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitInput(this);
	}
};



P4Parser.prototype.input = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InputContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 4;
    this.enterRecursionRule(localctx, 4, P4Parser.RULE_input, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 255;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 253;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new InputContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_input);
                    this.state = 249;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 250;
                    this.declaration();
                    break;

                case 2:
                    localctx = new InputContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_input);
                    this.state = 251;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 252;
                    this.match(P4Parser.SEMICOLON);
                    break;

                } 
            }
            this.state = 257;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.constantDeclaration = function() {
    return this.getTypedRuleContext(ConstantDeclarationContext,0);
};

DeclarationContext.prototype.externDeclaration = function() {
    return this.getTypedRuleContext(ExternDeclarationContext,0);
};

DeclarationContext.prototype.actionDeclaration = function() {
    return this.getTypedRuleContext(ActionDeclarationContext,0);
};

DeclarationContext.prototype.parserDeclaration = function() {
    return this.getTypedRuleContext(ParserDeclarationContext,0);
};

DeclarationContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

DeclarationContext.prototype.controlDeclaration = function() {
    return this.getTypedRuleContext(ControlDeclarationContext,0);
};

DeclarationContext.prototype.instantiation = function() {
    return this.getTypedRuleContext(InstantiationContext,0);
};

DeclarationContext.prototype.errorDeclaration = function() {
    return this.getTypedRuleContext(ErrorDeclarationContext,0);
};

DeclarationContext.prototype.matchKindDeclaration = function() {
    return this.getTypedRuleContext(MatchKindDeclarationContext,0);
};

DeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

DeclarationContext.prototype.includeLine = function() {
    return this.getTypedRuleContext(IncludeLineContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitDeclaration(this);
	}
};




P4Parser.DeclarationContext = DeclarationContext;

P4Parser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, P4Parser.RULE_declaration);
    try {
        this.state = 269;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 258;
            this.constantDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 259;
            this.externDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 260;
            this.actionDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 261;
            this.parserDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 262;
            this.typeDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 263;
            this.controlDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 264;
            this.instantiation();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 265;
            this.errorDeclaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 266;
            this.matchKindDeclaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 267;
            this.functionDeclaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 268;
            this.includeLine();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_includeLine;
    return this;
}

IncludeLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeLineContext.prototype.constructor = IncludeLineContext;

IncludeLineContext.prototype.INCLUDE_LINE = function() {
    return this.getToken(P4Parser.INCLUDE_LINE, 0);
};

IncludeLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterIncludeLine(this);
	}
};

IncludeLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitIncludeLine(this);
	}
};




P4Parser.IncludeLineContext = IncludeLineContext;

P4Parser.prototype.includeLine = function() {

    var localctx = new IncludeLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, P4Parser.RULE_includeLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this.match(P4Parser.INCLUDE_LINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_nonTypeName;
    return this;
}

NonTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonTypeNameContext.prototype.constructor = NonTypeNameContext;

NonTypeNameContext.prototype.type_or_id = function() {
    return this.getTypedRuleContext(Type_or_idContext,0);
};

NonTypeNameContext.prototype.APPLY = function() {
    return this.getToken(P4Parser.APPLY, 0);
};

NonTypeNameContext.prototype.KEY = function() {
    return this.getToken(P4Parser.KEY, 0);
};

NonTypeNameContext.prototype.ACTIONS = function() {
    return this.getToken(P4Parser.ACTIONS, 0);
};

NonTypeNameContext.prototype.STATE = function() {
    return this.getToken(P4Parser.STATE, 0);
};

NonTypeNameContext.prototype.ENTRIES = function() {
    return this.getToken(P4Parser.ENTRIES, 0);
};

NonTypeNameContext.prototype.TYPE = function() {
    return this.getToken(P4Parser.TYPE, 0);
};

NonTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterNonTypeName(this);
	}
};

NonTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitNonTypeName(this);
	}
};




P4Parser.NonTypeNameContext = NonTypeNameContext;

P4Parser.prototype.nonTypeName = function() {

    var localctx = new NonTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, P4Parser.RULE_nonTypeName);
    try {
        this.state = 280;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 273;
            this.type_or_id();
            break;
        case P4Parser.APPLY:
            this.enterOuterAlt(localctx, 2);
            this.state = 274;
            this.match(P4Parser.APPLY);
            break;
        case P4Parser.KEY:
            this.enterOuterAlt(localctx, 3);
            this.state = 275;
            this.match(P4Parser.KEY);
            break;
        case P4Parser.ACTIONS:
            this.enterOuterAlt(localctx, 4);
            this.state = 276;
            this.match(P4Parser.ACTIONS);
            break;
        case P4Parser.STATE:
            this.enterOuterAlt(localctx, 5);
            this.state = 277;
            this.match(P4Parser.STATE);
            break;
        case P4Parser.ENTRIES:
            this.enterOuterAlt(localctx, 6);
            this.state = 278;
            this.match(P4Parser.ENTRIES);
            break;
        case P4Parser.TYPE:
            this.enterOuterAlt(localctx, 7);
            this.state = 279;
            this.match(P4Parser.TYPE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_name;
    return this;
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameContext.prototype.constructor = NameContext;

NameContext.prototype.nonTypeName = function() {
    return this.getTypedRuleContext(NonTypeNameContext,0);
};

NameContext.prototype.type_or_id = function() {
    return this.getTypedRuleContext(Type_or_idContext,0);
};

NameContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterName(this);
	}
};

NameContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitName(this);
	}
};




P4Parser.NameContext = NameContext;

P4Parser.prototype.name = function() {

    var localctx = new NameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, P4Parser.RULE_name);
    try {
        this.state = 284;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 282;
            this.nonTypeName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 283;
            this.type_or_id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonTableKwNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_nonTableKwName;
    return this;
}

NonTableKwNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonTableKwNameContext.prototype.constructor = NonTableKwNameContext;

NonTableKwNameContext.prototype.type_or_id = function() {
    return this.getTypedRuleContext(Type_or_idContext,0);
};

NonTableKwNameContext.prototype.APPLY = function() {
    return this.getToken(P4Parser.APPLY, 0);
};

NonTableKwNameContext.prototype.STATE = function() {
    return this.getToken(P4Parser.STATE, 0);
};

NonTableKwNameContext.prototype.TYPE = function() {
    return this.getToken(P4Parser.TYPE, 0);
};

NonTableKwNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterNonTableKwName(this);
	}
};

NonTableKwNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitNonTableKwName(this);
	}
};




P4Parser.NonTableKwNameContext = NonTableKwNameContext;

P4Parser.prototype.nonTableKwName = function() {

    var localctx = new NonTableKwNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, P4Parser.RULE_nonTableKwName);
    try {
        this.state = 290;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 286;
            this.type_or_id();
            break;
        case P4Parser.APPLY:
            this.enterOuterAlt(localctx, 2);
            this.state = 287;
            this.match(P4Parser.APPLY);
            break;
        case P4Parser.STATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 288;
            this.match(P4Parser.STATE);
            break;
        case P4Parser.TYPE:
            this.enterOuterAlt(localctx, 4);
            this.state = 289;
            this.match(P4Parser.TYPE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptCONSTContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_optCONST;
    return this;
}

OptCONSTContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptCONSTContext.prototype.constructor = OptCONSTContext;

OptCONSTContext.prototype.CONST = function() {
    return this.getToken(P4Parser.CONST, 0);
};

OptCONSTContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterOptCONST(this);
	}
};

OptCONSTContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitOptCONST(this);
	}
};




P4Parser.OptCONSTContext = OptCONSTContext;

P4Parser.prototype.optCONST = function() {

    var localctx = new OptCONSTContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, P4Parser.RULE_optCONST);
    try {
        this.state = 294;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.APPLY:
        case P4Parser.ENTRIES:
        case P4Parser.TYPE:
        case P4Parser.STATE:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);

            break;
        case P4Parser.CONST:
            this.enterOuterAlt(localctx, 2);
            this.state = 293;
            this.match(P4Parser.CONST);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptAnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_optAnnotations;
    return this;
}

OptAnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptAnnotationsContext.prototype.constructor = OptAnnotationsContext;

OptAnnotationsContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

OptAnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterOptAnnotations(this);
	}
};

OptAnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitOptAnnotations(this);
	}
};




P4Parser.OptAnnotationsContext = OptAnnotationsContext;

P4Parser.prototype.optAnnotations = function() {

    var localctx = new OptAnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, P4Parser.RULE_optAnnotations);
    try {
        this.state = 298;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.ABSTRACT:
        case P4Parser.ACTION:
        case P4Parser.ACTIONS:
        case P4Parser.APPLY:
        case P4Parser.BOOL:
        case P4Parser.BIT:
        case P4Parser.CONST:
        case P4Parser.CONTROL:
        case P4Parser.ENTRIES:
        case P4Parser.ENUM:
        case P4Parser.ERROR:
        case P4Parser.EXTERN:
        case P4Parser.HEADER:
        case P4Parser.HEADER_UNION:
        case P4Parser.IN:
        case P4Parser.INOUT:
        case P4Parser.INT:
        case P4Parser.KEY:
        case P4Parser.TYPE:
        case P4Parser.OUT:
        case P4Parser.PARSER:
        case P4Parser.PACKAGE:
        case P4Parser.STATE:
        case P4Parser.STRUCT:
        case P4Parser.TABLE:
        case P4Parser.TUPLE:
        case P4Parser.TYPEDEF:
        case P4Parser.VARBIT:
        case P4Parser.VALUESET:
        case P4Parser.VOID:
        case P4Parser.L_BRACE:
        case P4Parser.DOT:
        case P4Parser.SEMICOLON:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);

            break;
        case P4Parser.PRAGMA:
        case P4Parser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 297;
            this.annotations(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

AnnotationsContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitAnnotations(this);
	}
};



P4Parser.prototype.annotations = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AnnotationsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 20;
    this.enterRecursionRule(localctx, 20, P4Parser.RULE_annotations, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.annotation();
        this._ctx.stop = this._input.LT(-1);
        this.state = 307;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AnnotationsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_annotations);
                this.state = 303;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 304;
                this.annotation(); 
            }
            this.state = 309;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.AT = function() {
    return this.getToken(P4Parser.AT, 0);
};

AnnotationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

AnnotationContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

AnnotationContext.prototype.annotationBody = function() {
    return this.getTypedRuleContext(AnnotationBodyContext,0);
};

AnnotationContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

AnnotationContext.prototype.PRAGMA = function() {
    return this.getToken(P4Parser.PRAGMA, 0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitAnnotation(this);
	}
};




P4Parser.AnnotationContext = AnnotationContext;

P4Parser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, P4Parser.RULE_annotation);
    try {
        this.state = 322;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 310;
            this.match(P4Parser.AT);
            this.state = 311;
            this.name();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 312;
            this.match(P4Parser.AT);
            this.state = 313;
            this.name();
            this.state = 314;
            this.match(P4Parser.L_PAREN);
            this.state = 315;
            this.annotationBody(0);
            this.state = 316;
            this.match(P4Parser.R_PAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 318;
            this.match(P4Parser.PRAGMA);
            this.state = 319;
            this.name();
            this.state = 320;
            this.annotationBody(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_annotationBody;
    return this;
}

AnnotationBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationBodyContext.prototype.constructor = AnnotationBodyContext;

AnnotationBodyContext.prototype.annotationBody = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationBodyContext);
    } else {
        return this.getTypedRuleContext(AnnotationBodyContext,i);
    }
};

AnnotationBodyContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

AnnotationBodyContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

AnnotationBodyContext.prototype.annotationToken = function() {
    return this.getTypedRuleContext(AnnotationTokenContext,0);
};

AnnotationBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterAnnotationBody(this);
	}
};

AnnotationBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitAnnotationBody(this);
	}
};



P4Parser.prototype.annotationBody = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AnnotationBodyContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 24;
    this.enterRecursionRule(localctx, 24, P4Parser.RULE_annotationBody, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 334;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 332;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AnnotationBodyContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_annotationBody);
                    this.state = 325;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 326;
                    this.match(P4Parser.L_PAREN);
                    this.state = 327;
                    this.annotationBody(0);
                    this.state = 328;
                    this.match(P4Parser.R_PAREN);
                    break;

                case 2:
                    localctx = new AnnotationBodyContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_annotationBody);
                    this.state = 330;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 331;
                    this.annotationToken();
                    break;

                } 
            }
            this.state = 336;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AnnotationTokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_annotationToken;
    return this;
}

AnnotationTokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTokenContext.prototype.constructor = AnnotationTokenContext;

AnnotationTokenContext.prototype.UNEXPECTED_TOKEN = function() {
    return this.getToken(P4Parser.UNEXPECTED_TOKEN, 0);
};

AnnotationTokenContext.prototype.ABSTRACT = function() {
    return this.getToken(P4Parser.ABSTRACT, 0);
};

AnnotationTokenContext.prototype.ACTION = function() {
    return this.getToken(P4Parser.ACTION, 0);
};

AnnotationTokenContext.prototype.ACTIONS = function() {
    return this.getToken(P4Parser.ACTIONS, 0);
};

AnnotationTokenContext.prototype.APPLY = function() {
    return this.getToken(P4Parser.APPLY, 0);
};

AnnotationTokenContext.prototype.BOOL = function() {
    return this.getToken(P4Parser.BOOL, 0);
};

AnnotationTokenContext.prototype.BIT = function() {
    return this.getToken(P4Parser.BIT, 0);
};

AnnotationTokenContext.prototype.CONST = function() {
    return this.getToken(P4Parser.CONST, 0);
};

AnnotationTokenContext.prototype.CONTROL = function() {
    return this.getToken(P4Parser.CONTROL, 0);
};

AnnotationTokenContext.prototype.DEFAULT = function() {
    return this.getToken(P4Parser.DEFAULT, 0);
};

AnnotationTokenContext.prototype.ELSE = function() {
    return this.getToken(P4Parser.ELSE, 0);
};

AnnotationTokenContext.prototype.ENTRIES = function() {
    return this.getToken(P4Parser.ENTRIES, 0);
};

AnnotationTokenContext.prototype.ENUM = function() {
    return this.getToken(P4Parser.ENUM, 0);
};

AnnotationTokenContext.prototype.ERROR = function() {
    return this.getToken(P4Parser.ERROR, 0);
};

AnnotationTokenContext.prototype.EXIT = function() {
    return this.getToken(P4Parser.EXIT, 0);
};

AnnotationTokenContext.prototype.EXTERN = function() {
    return this.getToken(P4Parser.EXTERN, 0);
};

AnnotationTokenContext.prototype.FALSE = function() {
    return this.getToken(P4Parser.FALSE, 0);
};

AnnotationTokenContext.prototype.HEADER = function() {
    return this.getToken(P4Parser.HEADER, 0);
};

AnnotationTokenContext.prototype.HEADER_UNION = function() {
    return this.getToken(P4Parser.HEADER_UNION, 0);
};

AnnotationTokenContext.prototype.IF = function() {
    return this.getToken(P4Parser.IF, 0);
};

AnnotationTokenContext.prototype.IN = function() {
    return this.getToken(P4Parser.IN, 0);
};

AnnotationTokenContext.prototype.INOUT = function() {
    return this.getToken(P4Parser.INOUT, 0);
};

AnnotationTokenContext.prototype.INT = function() {
    return this.getToken(P4Parser.INT, 0);
};

AnnotationTokenContext.prototype.KEY = function() {
    return this.getToken(P4Parser.KEY, 0);
};

AnnotationTokenContext.prototype.MATCH_KIND = function() {
    return this.getToken(P4Parser.MATCH_KIND, 0);
};

AnnotationTokenContext.prototype.TYPE = function() {
    return this.getToken(P4Parser.TYPE, 0);
};

AnnotationTokenContext.prototype.OUT = function() {
    return this.getToken(P4Parser.OUT, 0);
};

AnnotationTokenContext.prototype.PARSER = function() {
    return this.getToken(P4Parser.PARSER, 0);
};

AnnotationTokenContext.prototype.PACKAGE = function() {
    return this.getToken(P4Parser.PACKAGE, 0);
};

AnnotationTokenContext.prototype.PRAGMA = function() {
    return this.getToken(P4Parser.PRAGMA, 0);
};

AnnotationTokenContext.prototype.RETURN = function() {
    return this.getToken(P4Parser.RETURN, 0);
};

AnnotationTokenContext.prototype.SELECT = function() {
    return this.getToken(P4Parser.SELECT, 0);
};

AnnotationTokenContext.prototype.STATE = function() {
    return this.getToken(P4Parser.STATE, 0);
};

AnnotationTokenContext.prototype.STRUCT = function() {
    return this.getToken(P4Parser.STRUCT, 0);
};

AnnotationTokenContext.prototype.SWITCH = function() {
    return this.getToken(P4Parser.SWITCH, 0);
};

AnnotationTokenContext.prototype.TABLE = function() {
    return this.getToken(P4Parser.TABLE, 0);
};

AnnotationTokenContext.prototype.THIS = function() {
    return this.getToken(P4Parser.THIS, 0);
};

AnnotationTokenContext.prototype.TRANSITION = function() {
    return this.getToken(P4Parser.TRANSITION, 0);
};

AnnotationTokenContext.prototype.TRUE = function() {
    return this.getToken(P4Parser.TRUE, 0);
};

AnnotationTokenContext.prototype.TUPLE = function() {
    return this.getToken(P4Parser.TUPLE, 0);
};

AnnotationTokenContext.prototype.TYPEDEF = function() {
    return this.getToken(P4Parser.TYPEDEF, 0);
};

AnnotationTokenContext.prototype.VARBIT = function() {
    return this.getToken(P4Parser.VARBIT, 0);
};

AnnotationTokenContext.prototype.VALUESET = function() {
    return this.getToken(P4Parser.VALUESET, 0);
};

AnnotationTokenContext.prototype.VOID = function() {
    return this.getToken(P4Parser.VOID, 0);
};

AnnotationTokenContext.prototype.DONTCARE = function() {
    return this.getToken(P4Parser.DONTCARE, 0);
};

AnnotationTokenContext.prototype.type_or_id = function() {
    return this.getTypedRuleContext(Type_or_idContext,0);
};

AnnotationTokenContext.prototype.STRING_LITERAL = function() {
    return this.getToken(P4Parser.STRING_LITERAL, 0);
};

AnnotationTokenContext.prototype.INTEGER = function() {
    return this.getToken(P4Parser.INTEGER, 0);
};

AnnotationTokenContext.prototype.MASK = function() {
    return this.getToken(P4Parser.MASK, 0);
};

AnnotationTokenContext.prototype.RANGE = function() {
    return this.getToken(P4Parser.RANGE, 0);
};

AnnotationTokenContext.prototype.SHL = function() {
    return this.getToken(P4Parser.SHL, 0);
};

AnnotationTokenContext.prototype.AND = function() {
    return this.getToken(P4Parser.AND, 0);
};

AnnotationTokenContext.prototype.OR = function() {
    return this.getToken(P4Parser.OR, 0);
};

AnnotationTokenContext.prototype.EQ = function() {
    return this.getToken(P4Parser.EQ, 0);
};

AnnotationTokenContext.prototype.NE = function() {
    return this.getToken(P4Parser.NE, 0);
};

AnnotationTokenContext.prototype.GE = function() {
    return this.getToken(P4Parser.GE, 0);
};

AnnotationTokenContext.prototype.LE = function() {
    return this.getToken(P4Parser.LE, 0);
};

AnnotationTokenContext.prototype.PP = function() {
    return this.getToken(P4Parser.PP, 0);
};

AnnotationTokenContext.prototype.PLUS = function() {
    return this.getToken(P4Parser.PLUS, 0);
};

AnnotationTokenContext.prototype.PLUS_SAT = function() {
    return this.getToken(P4Parser.PLUS_SAT, 0);
};

AnnotationTokenContext.prototype.MINUS = function() {
    return this.getToken(P4Parser.MINUS, 0);
};

AnnotationTokenContext.prototype.MINUS_SAT = function() {
    return this.getToken(P4Parser.MINUS_SAT, 0);
};

AnnotationTokenContext.prototype.MUL = function() {
    return this.getToken(P4Parser.MUL, 0);
};

AnnotationTokenContext.prototype.DIV = function() {
    return this.getToken(P4Parser.DIV, 0);
};

AnnotationTokenContext.prototype.MOD = function() {
    return this.getToken(P4Parser.MOD, 0);
};

AnnotationTokenContext.prototype.BIT_OR = function() {
    return this.getToken(P4Parser.BIT_OR, 0);
};

AnnotationTokenContext.prototype.BIT_AND = function() {
    return this.getToken(P4Parser.BIT_AND, 0);
};

AnnotationTokenContext.prototype.BIT_XOR = function() {
    return this.getToken(P4Parser.BIT_XOR, 0);
};

AnnotationTokenContext.prototype.COMPLEMENT = function() {
    return this.getToken(P4Parser.COMPLEMENT, 0);
};

AnnotationTokenContext.prototype.L_BRACKET = function() {
    return this.getToken(P4Parser.L_BRACKET, 0);
};

AnnotationTokenContext.prototype.R_BRACKET = function() {
    return this.getToken(P4Parser.R_BRACKET, 0);
};

AnnotationTokenContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

AnnotationTokenContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

AnnotationTokenContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

AnnotationTokenContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

AnnotationTokenContext.prototype.NOT = function() {
    return this.getToken(P4Parser.NOT, 0);
};

AnnotationTokenContext.prototype.COLON = function() {
    return this.getToken(P4Parser.COLON, 0);
};

AnnotationTokenContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

AnnotationTokenContext.prototype.QUESTION = function() {
    return this.getToken(P4Parser.QUESTION, 0);
};

AnnotationTokenContext.prototype.DOT = function() {
    return this.getToken(P4Parser.DOT, 0);
};

AnnotationTokenContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

AnnotationTokenContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

AnnotationTokenContext.prototype.AT = function() {
    return this.getToken(P4Parser.AT, 0);
};

AnnotationTokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterAnnotationToken(this);
	}
};

AnnotationTokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitAnnotationToken(this);
	}
};




P4Parser.AnnotationTokenContext = AnnotationTokenContext;

P4Parser.prototype.annotationToken = function() {

    var localctx = new AnnotationTokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, P4Parser.RULE_annotationToken);
    try {
        this.state = 420;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.UNEXPECTED_TOKEN:
            this.enterOuterAlt(localctx, 1);
            this.state = 337;
            this.match(P4Parser.UNEXPECTED_TOKEN);
            break;
        case P4Parser.ABSTRACT:
            this.enterOuterAlt(localctx, 2);
            this.state = 338;
            this.match(P4Parser.ABSTRACT);
            break;
        case P4Parser.ACTION:
            this.enterOuterAlt(localctx, 3);
            this.state = 339;
            this.match(P4Parser.ACTION);
            break;
        case P4Parser.ACTIONS:
            this.enterOuterAlt(localctx, 4);
            this.state = 340;
            this.match(P4Parser.ACTIONS);
            break;
        case P4Parser.APPLY:
            this.enterOuterAlt(localctx, 5);
            this.state = 341;
            this.match(P4Parser.APPLY);
            break;
        case P4Parser.BOOL:
            this.enterOuterAlt(localctx, 6);
            this.state = 342;
            this.match(P4Parser.BOOL);
            break;
        case P4Parser.BIT:
            this.enterOuterAlt(localctx, 7);
            this.state = 343;
            this.match(P4Parser.BIT);
            break;
        case P4Parser.CONST:
            this.enterOuterAlt(localctx, 8);
            this.state = 344;
            this.match(P4Parser.CONST);
            break;
        case P4Parser.CONTROL:
            this.enterOuterAlt(localctx, 9);
            this.state = 345;
            this.match(P4Parser.CONTROL);
            break;
        case P4Parser.DEFAULT:
            this.enterOuterAlt(localctx, 10);
            this.state = 346;
            this.match(P4Parser.DEFAULT);
            break;
        case P4Parser.ELSE:
            this.enterOuterAlt(localctx, 11);
            this.state = 347;
            this.match(P4Parser.ELSE);
            break;
        case P4Parser.ENTRIES:
            this.enterOuterAlt(localctx, 12);
            this.state = 348;
            this.match(P4Parser.ENTRIES);
            break;
        case P4Parser.ENUM:
            this.enterOuterAlt(localctx, 13);
            this.state = 349;
            this.match(P4Parser.ENUM);
            break;
        case P4Parser.ERROR:
            this.enterOuterAlt(localctx, 14);
            this.state = 350;
            this.match(P4Parser.ERROR);
            break;
        case P4Parser.EXIT:
            this.enterOuterAlt(localctx, 15);
            this.state = 351;
            this.match(P4Parser.EXIT);
            break;
        case P4Parser.EXTERN:
            this.enterOuterAlt(localctx, 16);
            this.state = 352;
            this.match(P4Parser.EXTERN);
            break;
        case P4Parser.FALSE:
            this.enterOuterAlt(localctx, 17);
            this.state = 353;
            this.match(P4Parser.FALSE);
            break;
        case P4Parser.HEADER:
            this.enterOuterAlt(localctx, 18);
            this.state = 354;
            this.match(P4Parser.HEADER);
            break;
        case P4Parser.HEADER_UNION:
            this.enterOuterAlt(localctx, 19);
            this.state = 355;
            this.match(P4Parser.HEADER_UNION);
            break;
        case P4Parser.IF:
            this.enterOuterAlt(localctx, 20);
            this.state = 356;
            this.match(P4Parser.IF);
            break;
        case P4Parser.IN:
            this.enterOuterAlt(localctx, 21);
            this.state = 357;
            this.match(P4Parser.IN);
            break;
        case P4Parser.INOUT:
            this.enterOuterAlt(localctx, 22);
            this.state = 358;
            this.match(P4Parser.INOUT);
            break;
        case P4Parser.INT:
            this.enterOuterAlt(localctx, 23);
            this.state = 359;
            this.match(P4Parser.INT);
            break;
        case P4Parser.KEY:
            this.enterOuterAlt(localctx, 24);
            this.state = 360;
            this.match(P4Parser.KEY);
            break;
        case P4Parser.MATCH_KIND:
            this.enterOuterAlt(localctx, 25);
            this.state = 361;
            this.match(P4Parser.MATCH_KIND);
            break;
        case P4Parser.TYPE:
            this.enterOuterAlt(localctx, 26);
            this.state = 362;
            this.match(P4Parser.TYPE);
            break;
        case P4Parser.OUT:
            this.enterOuterAlt(localctx, 27);
            this.state = 363;
            this.match(P4Parser.OUT);
            break;
        case P4Parser.PARSER:
            this.enterOuterAlt(localctx, 28);
            this.state = 364;
            this.match(P4Parser.PARSER);
            break;
        case P4Parser.PACKAGE:
            this.enterOuterAlt(localctx, 29);
            this.state = 365;
            this.match(P4Parser.PACKAGE);
            break;
        case P4Parser.PRAGMA:
            this.enterOuterAlt(localctx, 30);
            this.state = 366;
            this.match(P4Parser.PRAGMA);
            break;
        case P4Parser.RETURN:
            this.enterOuterAlt(localctx, 31);
            this.state = 367;
            this.match(P4Parser.RETURN);
            break;
        case P4Parser.SELECT:
            this.enterOuterAlt(localctx, 32);
            this.state = 368;
            this.match(P4Parser.SELECT);
            break;
        case P4Parser.STATE:
            this.enterOuterAlt(localctx, 33);
            this.state = 369;
            this.match(P4Parser.STATE);
            break;
        case P4Parser.STRUCT:
            this.enterOuterAlt(localctx, 34);
            this.state = 370;
            this.match(P4Parser.STRUCT);
            break;
        case P4Parser.SWITCH:
            this.enterOuterAlt(localctx, 35);
            this.state = 371;
            this.match(P4Parser.SWITCH);
            break;
        case P4Parser.TABLE:
            this.enterOuterAlt(localctx, 36);
            this.state = 372;
            this.match(P4Parser.TABLE);
            break;
        case P4Parser.THIS:
            this.enterOuterAlt(localctx, 37);
            this.state = 373;
            this.match(P4Parser.THIS);
            break;
        case P4Parser.TRANSITION:
            this.enterOuterAlt(localctx, 38);
            this.state = 374;
            this.match(P4Parser.TRANSITION);
            break;
        case P4Parser.TRUE:
            this.enterOuterAlt(localctx, 39);
            this.state = 375;
            this.match(P4Parser.TRUE);
            break;
        case P4Parser.TUPLE:
            this.enterOuterAlt(localctx, 40);
            this.state = 376;
            this.match(P4Parser.TUPLE);
            break;
        case P4Parser.TYPEDEF:
            this.enterOuterAlt(localctx, 41);
            this.state = 377;
            this.match(P4Parser.TYPEDEF);
            break;
        case P4Parser.VARBIT:
            this.enterOuterAlt(localctx, 42);
            this.state = 378;
            this.match(P4Parser.VARBIT);
            break;
        case P4Parser.VALUESET:
            this.enterOuterAlt(localctx, 43);
            this.state = 379;
            this.match(P4Parser.VALUESET);
            break;
        case P4Parser.VOID:
            this.enterOuterAlt(localctx, 44);
            this.state = 380;
            this.match(P4Parser.VOID);
            break;
        case P4Parser.DONTCARE:
            this.enterOuterAlt(localctx, 45);
            this.state = 381;
            this.match(P4Parser.DONTCARE);
            break;
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 46);
            this.state = 382;
            this.type_or_id();
            break;
        case P4Parser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 47);
            this.state = 383;
            this.match(P4Parser.STRING_LITERAL);
            break;
        case P4Parser.INTEGER:
            this.enterOuterAlt(localctx, 48);
            this.state = 384;
            this.match(P4Parser.INTEGER);
            break;
        case P4Parser.MASK:
            this.enterOuterAlt(localctx, 49);
            this.state = 385;
            this.match(P4Parser.MASK);
            break;
        case P4Parser.RANGE:
            this.enterOuterAlt(localctx, 50);
            this.state = 386;
            this.match(P4Parser.RANGE);
            break;
        case P4Parser.SHL:
            this.enterOuterAlt(localctx, 51);
            this.state = 387;
            this.match(P4Parser.SHL);
            break;
        case P4Parser.AND:
            this.enterOuterAlt(localctx, 52);
            this.state = 388;
            this.match(P4Parser.AND);
            break;
        case P4Parser.OR:
            this.enterOuterAlt(localctx, 53);
            this.state = 389;
            this.match(P4Parser.OR);
            break;
        case P4Parser.EQ:
            this.enterOuterAlt(localctx, 54);
            this.state = 390;
            this.match(P4Parser.EQ);
            break;
        case P4Parser.NE:
            this.enterOuterAlt(localctx, 55);
            this.state = 391;
            this.match(P4Parser.NE);
            break;
        case P4Parser.GE:
            this.enterOuterAlt(localctx, 56);
            this.state = 392;
            this.match(P4Parser.GE);
            break;
        case P4Parser.LE:
            this.enterOuterAlt(localctx, 57);
            this.state = 393;
            this.match(P4Parser.LE);
            break;
        case P4Parser.PP:
            this.enterOuterAlt(localctx, 58);
            this.state = 394;
            this.match(P4Parser.PP);
            break;
        case P4Parser.PLUS:
            this.enterOuterAlt(localctx, 59);
            this.state = 395;
            this.match(P4Parser.PLUS);
            break;
        case P4Parser.PLUS_SAT:
            this.enterOuterAlt(localctx, 60);
            this.state = 396;
            this.match(P4Parser.PLUS_SAT);
            break;
        case P4Parser.MINUS:
            this.enterOuterAlt(localctx, 61);
            this.state = 397;
            this.match(P4Parser.MINUS);
            break;
        case P4Parser.MINUS_SAT:
            this.enterOuterAlt(localctx, 62);
            this.state = 398;
            this.match(P4Parser.MINUS_SAT);
            break;
        case P4Parser.MUL:
            this.enterOuterAlt(localctx, 63);
            this.state = 399;
            this.match(P4Parser.MUL);
            break;
        case P4Parser.DIV:
            this.enterOuterAlt(localctx, 64);
            this.state = 400;
            this.match(P4Parser.DIV);
            break;
        case P4Parser.MOD:
            this.enterOuterAlt(localctx, 65);
            this.state = 401;
            this.match(P4Parser.MOD);
            break;
        case P4Parser.BIT_OR:
            this.enterOuterAlt(localctx, 66);
            this.state = 402;
            this.match(P4Parser.BIT_OR);
            break;
        case P4Parser.BIT_AND:
            this.enterOuterAlt(localctx, 67);
            this.state = 403;
            this.match(P4Parser.BIT_AND);
            break;
        case P4Parser.BIT_XOR:
            this.enterOuterAlt(localctx, 68);
            this.state = 404;
            this.match(P4Parser.BIT_XOR);
            break;
        case P4Parser.COMPLEMENT:
            this.enterOuterAlt(localctx, 69);
            this.state = 405;
            this.match(P4Parser.COMPLEMENT);
            break;
        case P4Parser.L_BRACKET:
            this.enterOuterAlt(localctx, 70);
            this.state = 406;
            this.match(P4Parser.L_BRACKET);
            break;
        case P4Parser.R_BRACKET:
            this.enterOuterAlt(localctx, 71);
            this.state = 407;
            this.match(P4Parser.R_BRACKET);
            break;
        case P4Parser.L_BRACE:
            this.enterOuterAlt(localctx, 72);
            this.state = 408;
            this.match(P4Parser.L_BRACE);
            break;
        case P4Parser.R_BRACE:
            this.enterOuterAlt(localctx, 73);
            this.state = 409;
            this.match(P4Parser.R_BRACE);
            break;
        case P4Parser.L_ANGLE:
            this.enterOuterAlt(localctx, 74);
            this.state = 410;
            this.match(P4Parser.L_ANGLE);
            break;
        case P4Parser.R_ANGLE:
            this.enterOuterAlt(localctx, 75);
            this.state = 411;
            this.match(P4Parser.R_ANGLE);
            break;
        case P4Parser.NOT:
            this.enterOuterAlt(localctx, 76);
            this.state = 412;
            this.match(P4Parser.NOT);
            break;
        case P4Parser.COLON:
            this.enterOuterAlt(localctx, 77);
            this.state = 413;
            this.match(P4Parser.COLON);
            break;
        case P4Parser.COMMA:
            this.enterOuterAlt(localctx, 78);
            this.state = 414;
            this.match(P4Parser.COMMA);
            break;
        case P4Parser.QUESTION:
            this.enterOuterAlt(localctx, 79);
            this.state = 415;
            this.match(P4Parser.QUESTION);
            break;
        case P4Parser.DOT:
            this.enterOuterAlt(localctx, 80);
            this.state = 416;
            this.match(P4Parser.DOT);
            break;
        case P4Parser.ASSIGN:
            this.enterOuterAlt(localctx, 81);
            this.state = 417;
            this.match(P4Parser.ASSIGN);
            break;
        case P4Parser.SEMICOLON:
            this.enterOuterAlt(localctx, 82);
            this.state = 418;
            this.match(P4Parser.SEMICOLON);
            break;
        case P4Parser.AT:
            this.enterOuterAlt(localctx, 83);
            this.state = 419;
            this.match(P4Parser.AT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KvListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_kvList;
    return this;
}

KvListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KvListContext.prototype.constructor = KvListContext;

KvListContext.prototype.kvPair = function() {
    return this.getTypedRuleContext(KvPairContext,0);
};

KvListContext.prototype.kvList = function() {
    return this.getTypedRuleContext(KvListContext,0);
};

KvListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

KvListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterKvList(this);
	}
};

KvListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitKvList(this);
	}
};



P4Parser.prototype.kvList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new KvListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 28;
    this.enterRecursionRule(localctx, 28, P4Parser.RULE_kvList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.kvPair();
        this._ctx.stop = this._input.LT(-1);
        this.state = 430;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new KvListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_kvList);
                this.state = 425;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 426;
                this.match(P4Parser.COMMA);
                this.state = 427;
                this.kvPair(); 
            }
            this.state = 432;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function KvPairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_kvPair;
    return this;
}

KvPairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KvPairContext.prototype.constructor = KvPairContext;

KvPairContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

KvPairContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

KvPairContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

KvPairContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterKvPair(this);
	}
};

KvPairContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitKvPair(this);
	}
};




P4Parser.KvPairContext = KvPairContext;

P4Parser.prototype.kvPair = function() {

    var localctx = new KvPairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, P4Parser.RULE_kvPair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.name();
        this.state = 434;
        this.match(P4Parser.ASSIGN);
        this.state = 435;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.nonEmptyParameterList = function() {
    return this.getTypedRuleContext(NonEmptyParameterListContext,0);
};

ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParameterList(this);
	}
};




P4Parser.ParameterListContext = ParameterListContext;

P4Parser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, P4Parser.RULE_parameterList);
    try {
        this.state = 439;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.R_PAREN:
            this.enterOuterAlt(localctx, 1);

            break;
        case P4Parser.PRAGMA:
        case P4Parser.BOOL:
        case P4Parser.BIT:
        case P4Parser.ERROR:
        case P4Parser.IN:
        case P4Parser.INOUT:
        case P4Parser.INT:
        case P4Parser.OUT:
        case P4Parser.TUPLE:
        case P4Parser.VARBIT:
        case P4Parser.DOT:
        case P4Parser.AT:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 438;
            this.nonEmptyParameterList(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonEmptyParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_nonEmptyParameterList;
    return this;
}

NonEmptyParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonEmptyParameterListContext.prototype.constructor = NonEmptyParameterListContext;

NonEmptyParameterListContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

NonEmptyParameterListContext.prototype.nonEmptyParameterList = function() {
    return this.getTypedRuleContext(NonEmptyParameterListContext,0);
};

NonEmptyParameterListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

NonEmptyParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterNonEmptyParameterList(this);
	}
};

NonEmptyParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitNonEmptyParameterList(this);
	}
};



P4Parser.prototype.nonEmptyParameterList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NonEmptyParameterListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 34;
    this.enterRecursionRule(localctx, 34, P4Parser.RULE_nonEmptyParameterList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 442;
        this.parameter();
        this._ctx.stop = this._input.LT(-1);
        this.state = 449;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NonEmptyParameterListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_nonEmptyParameterList);
                this.state = 444;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 445;
                this.match(P4Parser.COMMA);
                this.state = 446;
                this.parameter(); 
            }
            this.state = 451;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ParameterContext.prototype.direction = function() {
    return this.getTypedRuleContext(DirectionContext,0);
};

ParameterContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

ParameterContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ParameterContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

ParameterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParameter(this);
	}
};




P4Parser.ParameterContext = ParameterContext;

P4Parser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, P4Parser.RULE_parameter);
    try {
        this.state = 464;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 452;
            this.optAnnotations();
            this.state = 453;
            this.direction();
            this.state = 454;
            this.typeRef();
            this.state = 455;
            this.name();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 457;
            this.optAnnotations();
            this.state = 458;
            this.direction();
            this.state = 459;
            this.typeRef();
            this.state = 460;
            this.name();
            this.state = 461;
            this.match(P4Parser.ASSIGN);
            this.state = 462;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DirectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_direction;
    return this;
}

DirectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectionContext.prototype.constructor = DirectionContext;

DirectionContext.prototype.IN = function() {
    return this.getToken(P4Parser.IN, 0);
};

DirectionContext.prototype.OUT = function() {
    return this.getToken(P4Parser.OUT, 0);
};

DirectionContext.prototype.INOUT = function() {
    return this.getToken(P4Parser.INOUT, 0);
};

DirectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterDirection(this);
	}
};

DirectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitDirection(this);
	}
};




P4Parser.DirectionContext = DirectionContext;

P4Parser.prototype.direction = function() {

    var localctx = new DirectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, P4Parser.RULE_direction);
    try {
        this.state = 470;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 466;
            this.match(P4Parser.IN);
            break;
        case P4Parser.OUT:
            this.enterOuterAlt(localctx, 2);
            this.state = 467;
            this.match(P4Parser.OUT);
            break;
        case P4Parser.INOUT:
            this.enterOuterAlt(localctx, 3);
            this.state = 468;
            this.match(P4Parser.INOUT);
            break;
        case P4Parser.BOOL:
        case P4Parser.BIT:
        case P4Parser.ERROR:
        case P4Parser.INT:
        case P4Parser.TUPLE:
        case P4Parser.VARBIT:
        case P4Parser.DOT:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 4);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PackageTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_packageTypeDeclaration;
    return this;
}

PackageTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageTypeDeclarationContext.prototype.constructor = PackageTypeDeclarationContext;

PackageTypeDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

PackageTypeDeclarationContext.prototype.PACKAGE = function() {
    return this.getToken(P4Parser.PACKAGE, 0);
};

PackageTypeDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

PackageTypeDeclarationContext.prototype.optTypeParameters = function() {
    return this.getTypedRuleContext(OptTypeParametersContext,0);
};

PackageTypeDeclarationContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

PackageTypeDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

PackageTypeDeclarationContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

PackageTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterPackageTypeDeclaration(this);
	}
};

PackageTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitPackageTypeDeclaration(this);
	}
};




P4Parser.PackageTypeDeclarationContext = PackageTypeDeclarationContext;

P4Parser.prototype.packageTypeDeclaration = function() {

    var localctx = new PackageTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, P4Parser.RULE_packageTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 472;
        this.optAnnotations();
        this.state = 473;
        this.match(P4Parser.PACKAGE);
        this.state = 474;
        this.name();
        this.state = 475;
        this.optTypeParameters();
        this.state = 476;
        this.match(P4Parser.L_PAREN);
        this.state = 477;
        this.parameterList();
        this.state = 478;
        this.match(P4Parser.R_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstantiationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_instantiation;
    return this;
}

InstantiationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstantiationContext.prototype.constructor = InstantiationContext;

InstantiationContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

InstantiationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

InstantiationContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

InstantiationContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

InstantiationContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

InstantiationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

InstantiationContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

InstantiationContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

InstantiationContext.prototype.objInitializer = function() {
    return this.getTypedRuleContext(ObjInitializerContext,0);
};

InstantiationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterInstantiation(this);
	}
};

InstantiationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitInstantiation(this);
	}
};




P4Parser.InstantiationContext = InstantiationContext;

P4Parser.prototype.instantiation = function() {

    var localctx = new InstantiationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, P4Parser.RULE_instantiation);
    try {
        this.state = 514;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 480;
            this.annotations(0);
            this.state = 481;
            this.typeRef();
            this.state = 482;
            this.match(P4Parser.L_PAREN);
            this.state = 483;
            this.argumentList();
            this.state = 484;
            this.match(P4Parser.R_PAREN);
            this.state = 485;
            this.name();
            this.state = 486;
            this.match(P4Parser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 488;
            this.typeRef();
            this.state = 489;
            this.match(P4Parser.L_PAREN);
            this.state = 490;
            this.argumentList();
            this.state = 491;
            this.match(P4Parser.R_PAREN);
            this.state = 492;
            this.name();
            this.state = 493;
            this.match(P4Parser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 495;
            this.annotations(0);
            this.state = 496;
            this.typeRef();
            this.state = 497;
            this.match(P4Parser.L_PAREN);
            this.state = 498;
            this.argumentList();
            this.state = 499;
            this.match(P4Parser.R_PAREN);
            this.state = 500;
            this.name();
            this.state = 501;
            this.match(P4Parser.ASSIGN);
            this.state = 502;
            this.objInitializer();
            this.state = 503;
            this.match(P4Parser.SEMICOLON);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 505;
            this.typeRef();
            this.state = 506;
            this.match(P4Parser.L_PAREN);
            this.state = 507;
            this.argumentList();
            this.state = 508;
            this.match(P4Parser.R_PAREN);
            this.state = 509;
            this.name();
            this.state = 510;
            this.match(P4Parser.ASSIGN);
            this.state = 511;
            this.objInitializer();
            this.state = 512;
            this.match(P4Parser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_objInitializer;
    return this;
}

ObjInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjInitializerContext.prototype.constructor = ObjInitializerContext;

ObjInitializerContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

ObjInitializerContext.prototype.objDeclarations = function() {
    return this.getTypedRuleContext(ObjDeclarationsContext,0);
};

ObjInitializerContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

ObjInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterObjInitializer(this);
	}
};

ObjInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitObjInitializer(this);
	}
};




P4Parser.ObjInitializerContext = ObjInitializerContext;

P4Parser.prototype.objInitializer = function() {

    var localctx = new ObjInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, P4Parser.RULE_objInitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 516;
        this.match(P4Parser.L_BRACE);
        this.state = 517;
        this.objDeclarations(0);
        this.state = 518;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_objDeclarations;
    return this;
}

ObjDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjDeclarationsContext.prototype.constructor = ObjDeclarationsContext;

ObjDeclarationsContext.prototype.objDeclarations = function() {
    return this.getTypedRuleContext(ObjDeclarationsContext,0);
};

ObjDeclarationsContext.prototype.objDeclaration = function() {
    return this.getTypedRuleContext(ObjDeclarationContext,0);
};

ObjDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterObjDeclarations(this);
	}
};

ObjDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitObjDeclarations(this);
	}
};



P4Parser.prototype.objDeclarations = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ObjDeclarationsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 46;
    this.enterRecursionRule(localctx, 46, P4Parser.RULE_objDeclarations, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 525;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ObjDeclarationsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_objDeclarations);
                this.state = 521;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 522;
                this.objDeclaration(); 
            }
            this.state = 527;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ObjDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_objDeclaration;
    return this;
}

ObjDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjDeclarationContext.prototype.constructor = ObjDeclarationContext;

ObjDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

ObjDeclarationContext.prototype.instantiation = function() {
    return this.getTypedRuleContext(InstantiationContext,0);
};

ObjDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterObjDeclaration(this);
	}
};

ObjDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitObjDeclaration(this);
	}
};




P4Parser.ObjDeclarationContext = ObjDeclarationContext;

P4Parser.prototype.objDeclaration = function() {

    var localctx = new ObjDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, P4Parser.RULE_objDeclaration);
    try {
        this.state = 530;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 528;
            this.functionDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 529;
            this.instantiation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptConstructorParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_optConstructorParameters;
    return this;
}

OptConstructorParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptConstructorParametersContext.prototype.constructor = OptConstructorParametersContext;

OptConstructorParametersContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

OptConstructorParametersContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

OptConstructorParametersContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

OptConstructorParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterOptConstructorParameters(this);
	}
};

OptConstructorParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitOptConstructorParameters(this);
	}
};




P4Parser.OptConstructorParametersContext = OptConstructorParametersContext;

P4Parser.prototype.optConstructorParameters = function() {

    var localctx = new OptConstructorParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, P4Parser.RULE_optConstructorParameters);
    try {
        this.state = 537;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.L_BRACE:
            this.enterOuterAlt(localctx, 1);

            break;
        case P4Parser.L_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 533;
            this.match(P4Parser.L_PAREN);
            this.state = 534;
            this.parameterList();
            this.state = 535;
            this.match(P4Parser.R_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DotPrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_dotPrefix;
    return this;
}

DotPrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DotPrefixContext.prototype.constructor = DotPrefixContext;

DotPrefixContext.prototype.DOT = function() {
    return this.getToken(P4Parser.DOT, 0);
};

DotPrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterDotPrefix(this);
	}
};

DotPrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitDotPrefix(this);
	}
};




P4Parser.DotPrefixContext = DotPrefixContext;

P4Parser.prototype.dotPrefix = function() {

    var localctx = new DotPrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, P4Parser.RULE_dotPrefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this.match(P4Parser.DOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParserDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserDeclaration;
    return this;
}

ParserDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserDeclarationContext.prototype.constructor = ParserDeclarationContext;

ParserDeclarationContext.prototype.parserTypeDeclaration = function() {
    return this.getTypedRuleContext(ParserTypeDeclarationContext,0);
};

ParserDeclarationContext.prototype.optConstructorParameters = function() {
    return this.getTypedRuleContext(OptConstructorParametersContext,0);
};

ParserDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

ParserDeclarationContext.prototype.parserLocalElements = function() {
    return this.getTypedRuleContext(ParserLocalElementsContext,0);
};

ParserDeclarationContext.prototype.parserStates = function() {
    return this.getTypedRuleContext(ParserStatesContext,0);
};

ParserDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

ParserDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserDeclaration(this);
	}
};

ParserDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserDeclaration(this);
	}
};




P4Parser.ParserDeclarationContext = ParserDeclarationContext;

P4Parser.prototype.parserDeclaration = function() {

    var localctx = new ParserDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, P4Parser.RULE_parserDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 541;
        this.parserTypeDeclaration();
        this.state = 542;
        this.optConstructorParameters();
        this.state = 543;
        this.match(P4Parser.L_BRACE);
        this.state = 544;
        this.parserLocalElements(0);
        this.state = 545;
        this.parserStates(0);
        this.state = 546;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParserLocalElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserLocalElements;
    return this;
}

ParserLocalElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserLocalElementsContext.prototype.constructor = ParserLocalElementsContext;

ParserLocalElementsContext.prototype.parserLocalElements = function() {
    return this.getTypedRuleContext(ParserLocalElementsContext,0);
};

ParserLocalElementsContext.prototype.parserLocalElement = function() {
    return this.getTypedRuleContext(ParserLocalElementContext,0);
};

ParserLocalElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserLocalElements(this);
	}
};

ParserLocalElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserLocalElements(this);
	}
};



P4Parser.prototype.parserLocalElements = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParserLocalElementsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 56;
    this.enterRecursionRule(localctx, 56, P4Parser.RULE_parserLocalElements, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 553;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParserLocalElementsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_parserLocalElements);
                this.state = 549;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 550;
                this.parserLocalElement(); 
            }
            this.state = 555;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ParserLocalElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserLocalElement;
    return this;
}

ParserLocalElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserLocalElementContext.prototype.constructor = ParserLocalElementContext;

ParserLocalElementContext.prototype.constantDeclaration = function() {
    return this.getTypedRuleContext(ConstantDeclarationContext,0);
};

ParserLocalElementContext.prototype.instantiation = function() {
    return this.getTypedRuleContext(InstantiationContext,0);
};

ParserLocalElementContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

ParserLocalElementContext.prototype.valueSetDeclaration = function() {
    return this.getTypedRuleContext(ValueSetDeclarationContext,0);
};

ParserLocalElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserLocalElement(this);
	}
};

ParserLocalElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserLocalElement(this);
	}
};




P4Parser.ParserLocalElementContext = ParserLocalElementContext;

P4Parser.prototype.parserLocalElement = function() {

    var localctx = new ParserLocalElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, P4Parser.RULE_parserLocalElement);
    try {
        this.state = 560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 556;
            this.constantDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 557;
            this.instantiation();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 558;
            this.variableDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 559;
            this.valueSetDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParserTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserTypeDeclaration;
    return this;
}

ParserTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserTypeDeclarationContext.prototype.constructor = ParserTypeDeclarationContext;

ParserTypeDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ParserTypeDeclarationContext.prototype.PARSER = function() {
    return this.getToken(P4Parser.PARSER, 0);
};

ParserTypeDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ParserTypeDeclarationContext.prototype.optTypeParameters = function() {
    return this.getTypedRuleContext(OptTypeParametersContext,0);
};

ParserTypeDeclarationContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

ParserTypeDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ParserTypeDeclarationContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

ParserTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserTypeDeclaration(this);
	}
};

ParserTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserTypeDeclaration(this);
	}
};




P4Parser.ParserTypeDeclarationContext = ParserTypeDeclarationContext;

P4Parser.prototype.parserTypeDeclaration = function() {

    var localctx = new ParserTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, P4Parser.RULE_parserTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.optAnnotations();
        this.state = 563;
        this.match(P4Parser.PARSER);
        this.state = 564;
        this.name();
        this.state = 565;
        this.optTypeParameters();
        this.state = 566;
        this.match(P4Parser.L_PAREN);
        this.state = 567;
        this.parameterList();
        this.state = 568;
        this.match(P4Parser.R_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParserStatesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserStates;
    return this;
}

ParserStatesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserStatesContext.prototype.constructor = ParserStatesContext;

ParserStatesContext.prototype.parserState = function() {
    return this.getTypedRuleContext(ParserStateContext,0);
};

ParserStatesContext.prototype.parserStates = function() {
    return this.getTypedRuleContext(ParserStatesContext,0);
};

ParserStatesContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserStates(this);
	}
};

ParserStatesContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserStates(this);
	}
};



P4Parser.prototype.parserStates = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParserStatesContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 62;
    this.enterRecursionRule(localctx, 62, P4Parser.RULE_parserStates, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.parserState();
        this._ctx.stop = this._input.LT(-1);
        this.state = 577;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParserStatesContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_parserStates);
                this.state = 573;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 574;
                this.parserState(); 
            }
            this.state = 579;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ParserStateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserState;
    return this;
}

ParserStateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserStateContext.prototype.constructor = ParserStateContext;

ParserStateContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ParserStateContext.prototype.STATE = function() {
    return this.getToken(P4Parser.STATE, 0);
};

ParserStateContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ParserStateContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

ParserStateContext.prototype.parserStatements = function() {
    return this.getTypedRuleContext(ParserStatementsContext,0);
};

ParserStateContext.prototype.transitionStatement = function() {
    return this.getTypedRuleContext(TransitionStatementContext,0);
};

ParserStateContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

ParserStateContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserState(this);
	}
};

ParserStateContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserState(this);
	}
};




P4Parser.ParserStateContext = ParserStateContext;

P4Parser.prototype.parserState = function() {

    var localctx = new ParserStateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, P4Parser.RULE_parserState);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.optAnnotations();
        this.state = 581;
        this.match(P4Parser.STATE);
        this.state = 582;
        this.name();
        this.state = 583;
        this.match(P4Parser.L_BRACE);
        this.state = 584;
        this.parserStatements(0);
        this.state = 585;
        this.transitionStatement();
        this.state = 586;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParserStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserStatements;
    return this;
}

ParserStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserStatementsContext.prototype.constructor = ParserStatementsContext;

ParserStatementsContext.prototype.parserStatements = function() {
    return this.getTypedRuleContext(ParserStatementsContext,0);
};

ParserStatementsContext.prototype.parserStatement = function() {
    return this.getTypedRuleContext(ParserStatementContext,0);
};

ParserStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserStatements(this);
	}
};

ParserStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserStatements(this);
	}
};



P4Parser.prototype.parserStatements = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParserStatementsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, P4Parser.RULE_parserStatements, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 593;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParserStatementsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_parserStatements);
                this.state = 589;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 590;
                this.parserStatement(); 
            }
            this.state = 595;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ParserStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserStatement;
    return this;
}

ParserStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserStatementContext.prototype.constructor = ParserStatementContext;

ParserStatementContext.prototype.assignmentOrMethodCallStatement = function() {
    return this.getTypedRuleContext(AssignmentOrMethodCallStatementContext,0);
};

ParserStatementContext.prototype.directApplication = function() {
    return this.getTypedRuleContext(DirectApplicationContext,0);
};

ParserStatementContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

ParserStatementContext.prototype.constantDeclaration = function() {
    return this.getTypedRuleContext(ConstantDeclarationContext,0);
};

ParserStatementContext.prototype.parserBlockStatement = function() {
    return this.getTypedRuleContext(ParserBlockStatementContext,0);
};

ParserStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserStatement(this);
	}
};

ParserStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserStatement(this);
	}
};




P4Parser.ParserStatementContext = ParserStatementContext;

P4Parser.prototype.parserStatement = function() {

    var localctx = new ParserStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, P4Parser.RULE_parserStatement);
    try {
        this.state = 601;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 596;
            this.assignmentOrMethodCallStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 597;
            this.directApplication();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 598;
            this.variableDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 599;
            this.constantDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 600;
            this.parserBlockStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParserBlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_parserBlockStatement;
    return this;
}

ParserBlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserBlockStatementContext.prototype.constructor = ParserBlockStatementContext;

ParserBlockStatementContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ParserBlockStatementContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

ParserBlockStatementContext.prototype.parserStatements = function() {
    return this.getTypedRuleContext(ParserStatementsContext,0);
};

ParserBlockStatementContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

ParserBlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterParserBlockStatement(this);
	}
};

ParserBlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitParserBlockStatement(this);
	}
};




P4Parser.ParserBlockStatementContext = ParserBlockStatementContext;

P4Parser.prototype.parserBlockStatement = function() {

    var localctx = new ParserBlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, P4Parser.RULE_parserBlockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this.optAnnotations();
        this.state = 604;
        this.match(P4Parser.L_BRACE);
        this.state = 605;
        this.parserStatements(0);
        this.state = 606;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransitionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_transitionStatement;
    return this;
}

TransitionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransitionStatementContext.prototype.constructor = TransitionStatementContext;

TransitionStatementContext.prototype.TRANSITION = function() {
    return this.getToken(P4Parser.TRANSITION, 0);
};

TransitionStatementContext.prototype.stateExpression = function() {
    return this.getTypedRuleContext(StateExpressionContext,0);
};

TransitionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTransitionStatement(this);
	}
};

TransitionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTransitionStatement(this);
	}
};




P4Parser.TransitionStatementContext = TransitionStatementContext;

P4Parser.prototype.transitionStatement = function() {

    var localctx = new TransitionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, P4Parser.RULE_transitionStatement);
    try {
        this.state = 611;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.R_BRACE:
            this.enterOuterAlt(localctx, 1);

            break;
        case P4Parser.TRANSITION:
            this.enterOuterAlt(localctx, 2);
            this.state = 609;
            this.match(P4Parser.TRANSITION);
            this.state = 610;
            this.stateExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_stateExpression;
    return this;
}

StateExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateExpressionContext.prototype.constructor = StateExpressionContext;

StateExpressionContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

StateExpressionContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

StateExpressionContext.prototype.selectExpression = function() {
    return this.getTypedRuleContext(SelectExpressionContext,0);
};

StateExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterStateExpression(this);
	}
};

StateExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitStateExpression(this);
	}
};




P4Parser.StateExpressionContext = StateExpressionContext;

P4Parser.prototype.stateExpression = function() {

    var localctx = new StateExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, P4Parser.RULE_stateExpression);
    try {
        this.state = 617;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.ACTIONS:
        case P4Parser.APPLY:
        case P4Parser.ENTRIES:
        case P4Parser.KEY:
        case P4Parser.TYPE:
        case P4Parser.STATE:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 613;
            this.name();
            this.state = 614;
            this.match(P4Parser.SEMICOLON);
            break;
        case P4Parser.SELECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 616;
            this.selectExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_selectExpression;
    return this;
}

SelectExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectExpressionContext.prototype.constructor = SelectExpressionContext;

SelectExpressionContext.prototype.SELECT = function() {
    return this.getToken(P4Parser.SELECT, 0);
};

SelectExpressionContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

SelectExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

SelectExpressionContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

SelectExpressionContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

SelectExpressionContext.prototype.selectCaseList = function() {
    return this.getTypedRuleContext(SelectCaseListContext,0);
};

SelectExpressionContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

SelectExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSelectExpression(this);
	}
};

SelectExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSelectExpression(this);
	}
};




P4Parser.SelectExpressionContext = SelectExpressionContext;

P4Parser.prototype.selectExpression = function() {

    var localctx = new SelectExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, P4Parser.RULE_selectExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 619;
        this.match(P4Parser.SELECT);
        this.state = 620;
        this.match(P4Parser.L_PAREN);
        this.state = 621;
        this.expressionList(0);
        this.state = 622;
        this.match(P4Parser.R_PAREN);
        this.state = 623;
        this.match(P4Parser.L_BRACE);
        this.state = 624;
        this.selectCaseList(0);
        this.state = 625;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectCaseListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_selectCaseList;
    return this;
}

SelectCaseListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectCaseListContext.prototype.constructor = SelectCaseListContext;

SelectCaseListContext.prototype.selectCaseList = function() {
    return this.getTypedRuleContext(SelectCaseListContext,0);
};

SelectCaseListContext.prototype.selectCase = function() {
    return this.getTypedRuleContext(SelectCaseContext,0);
};

SelectCaseListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSelectCaseList(this);
	}
};

SelectCaseListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSelectCaseList(this);
	}
};



P4Parser.prototype.selectCaseList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SelectCaseListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, P4Parser.RULE_selectCaseList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 632;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SelectCaseListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_selectCaseList);
                this.state = 628;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 629;
                this.selectCase(); 
            }
            this.state = 634;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SelectCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_selectCase;
    return this;
}

SelectCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectCaseContext.prototype.constructor = SelectCaseContext;

SelectCaseContext.prototype.keysetExpression = function() {
    return this.getTypedRuleContext(KeysetExpressionContext,0);
};

SelectCaseContext.prototype.COLON = function() {
    return this.getToken(P4Parser.COLON, 0);
};

SelectCaseContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

SelectCaseContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

SelectCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSelectCase(this);
	}
};

SelectCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSelectCase(this);
	}
};




P4Parser.SelectCaseContext = SelectCaseContext;

P4Parser.prototype.selectCase = function() {

    var localctx = new SelectCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, P4Parser.RULE_selectCase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        this.keysetExpression();
        this.state = 636;
        this.match(P4Parser.COLON);
        this.state = 637;
        this.name();
        this.state = 638;
        this.match(P4Parser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeysetExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_keysetExpression;
    return this;
}

KeysetExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeysetExpressionContext.prototype.constructor = KeysetExpressionContext;

KeysetExpressionContext.prototype.tupleKeysetExpression = function() {
    return this.getTypedRuleContext(TupleKeysetExpressionContext,0);
};

KeysetExpressionContext.prototype.simpleKeysetExpression = function() {
    return this.getTypedRuleContext(SimpleKeysetExpressionContext,0);
};

KeysetExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterKeysetExpression(this);
	}
};

KeysetExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitKeysetExpression(this);
	}
};




P4Parser.KeysetExpressionContext = KeysetExpressionContext;

P4Parser.prototype.keysetExpression = function() {

    var localctx = new KeysetExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, P4Parser.RULE_keysetExpression);
    try {
        this.state = 642;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 640;
            this.tupleKeysetExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 641;
            this.simpleKeysetExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleKeysetExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_tupleKeysetExpression;
    return this;
}

TupleKeysetExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleKeysetExpressionContext.prototype.constructor = TupleKeysetExpressionContext;

TupleKeysetExpressionContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

TupleKeysetExpressionContext.prototype.simpleKeysetExpression = function() {
    return this.getTypedRuleContext(SimpleKeysetExpressionContext,0);
};

TupleKeysetExpressionContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

TupleKeysetExpressionContext.prototype.simpleExpressionList = function() {
    return this.getTypedRuleContext(SimpleExpressionListContext,0);
};

TupleKeysetExpressionContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

TupleKeysetExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTupleKeysetExpression(this);
	}
};

TupleKeysetExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTupleKeysetExpression(this);
	}
};




P4Parser.TupleKeysetExpressionContext = TupleKeysetExpressionContext;

P4Parser.prototype.tupleKeysetExpression = function() {

    var localctx = new TupleKeysetExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, P4Parser.RULE_tupleKeysetExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(P4Parser.L_PAREN);
        this.state = 645;
        this.simpleKeysetExpression();
        this.state = 646;
        this.match(P4Parser.COMMA);
        this.state = 647;
        this.simpleExpressionList(0);
        this.state = 648;
        this.match(P4Parser.R_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_simpleExpressionList;
    return this;
}

SimpleExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleExpressionListContext.prototype.constructor = SimpleExpressionListContext;

SimpleExpressionListContext.prototype.simpleKeysetExpression = function() {
    return this.getTypedRuleContext(SimpleKeysetExpressionContext,0);
};

SimpleExpressionListContext.prototype.simpleExpressionList = function() {
    return this.getTypedRuleContext(SimpleExpressionListContext,0);
};

SimpleExpressionListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

SimpleExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSimpleExpressionList(this);
	}
};

SimpleExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSimpleExpressionList(this);
	}
};



P4Parser.prototype.simpleExpressionList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SimpleExpressionListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, P4Parser.RULE_simpleExpressionList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.simpleKeysetExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 658;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SimpleExpressionListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_simpleExpressionList);
                this.state = 653;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 654;
                this.match(P4Parser.COMMA);
                this.state = 655;
                this.simpleKeysetExpression(); 
            }
            this.state = 660;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SimpleKeysetExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_simpleKeysetExpression;
    return this;
}

SimpleKeysetExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleKeysetExpressionContext.prototype.constructor = SimpleKeysetExpressionContext;

SimpleKeysetExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SimpleKeysetExpressionContext.prototype.MASK = function() {
    return this.getToken(P4Parser.MASK, 0);
};

SimpleKeysetExpressionContext.prototype.RANGE = function() {
    return this.getToken(P4Parser.RANGE, 0);
};

SimpleKeysetExpressionContext.prototype.DEFAULT = function() {
    return this.getToken(P4Parser.DEFAULT, 0);
};

SimpleKeysetExpressionContext.prototype.DONTCARE = function() {
    return this.getToken(P4Parser.DONTCARE, 0);
};

SimpleKeysetExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSimpleKeysetExpression(this);
	}
};

SimpleKeysetExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSimpleKeysetExpression(this);
	}
};




P4Parser.SimpleKeysetExpressionContext = SimpleKeysetExpressionContext;

P4Parser.prototype.simpleKeysetExpression = function() {

    var localctx = new SimpleKeysetExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, P4Parser.RULE_simpleKeysetExpression);
    try {
        this.state = 672;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 661;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 662;
            this.expression(0);
            this.state = 663;
            this.match(P4Parser.MASK);
            this.state = 664;
            this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 666;
            this.expression(0);
            this.state = 667;
            this.match(P4Parser.RANGE);
            this.state = 668;
            this.expression(0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 670;
            this.match(P4Parser.DEFAULT);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 671;
            this.match(P4Parser.DONTCARE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueSetDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_valueSetDeclaration;
    return this;
}

ValueSetDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueSetDeclarationContext.prototype.constructor = ValueSetDeclarationContext;

ValueSetDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ValueSetDeclarationContext.prototype.VALUESET = function() {
    return this.getToken(P4Parser.VALUESET, 0);
};

ValueSetDeclarationContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

ValueSetDeclarationContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

ValueSetDeclarationContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

ValueSetDeclarationContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

ValueSetDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ValueSetDeclarationContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

ValueSetDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ValueSetDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

ValueSetDeclarationContext.prototype.tupleType = function() {
    return this.getTypedRuleContext(TupleTypeContext,0);
};

ValueSetDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ValueSetDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterValueSetDeclaration(this);
	}
};

ValueSetDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitValueSetDeclaration(this);
	}
};




P4Parser.ValueSetDeclarationContext = ValueSetDeclarationContext;

P4Parser.prototype.valueSetDeclaration = function() {

    var localctx = new ValueSetDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, P4Parser.RULE_valueSetDeclaration);
    try {
        this.state = 707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 674;
            this.optAnnotations();
            this.state = 675;
            this.match(P4Parser.VALUESET);
            this.state = 676;
            this.match(P4Parser.L_ANGLE);
            this.state = 677;
            this.baseType();
            this.state = 678;
            this.match(P4Parser.R_ANGLE);
            this.state = 679;
            this.match(P4Parser.L_PAREN);
            this.state = 680;
            this.expression(0);
            this.state = 681;
            this.match(P4Parser.R_PAREN);
            this.state = 682;
            this.name();
            this.state = 683;
            this.match(P4Parser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 685;
            this.optAnnotations();
            this.state = 686;
            this.match(P4Parser.VALUESET);
            this.state = 687;
            this.match(P4Parser.L_ANGLE);
            this.state = 688;
            this.tupleType();
            this.state = 689;
            this.match(P4Parser.R_ANGLE);
            this.state = 690;
            this.match(P4Parser.L_PAREN);
            this.state = 691;
            this.expression(0);
            this.state = 692;
            this.match(P4Parser.R_PAREN);
            this.state = 693;
            this.name();
            this.state = 694;
            this.match(P4Parser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 696;
            this.optAnnotations();
            this.state = 697;
            this.match(P4Parser.VALUESET);
            this.state = 698;
            this.match(P4Parser.L_ANGLE);
            this.state = 699;
            this.typeName();
            this.state = 700;
            this.match(P4Parser.R_ANGLE);
            this.state = 701;
            this.match(P4Parser.L_PAREN);
            this.state = 702;
            this.expression(0);
            this.state = 703;
            this.match(P4Parser.R_PAREN);
            this.state = 704;
            this.name();
            this.state = 705;
            this.match(P4Parser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ControlDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_controlDeclaration;
    return this;
}

ControlDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ControlDeclarationContext.prototype.constructor = ControlDeclarationContext;

ControlDeclarationContext.prototype.controlTypeDeclaration = function() {
    return this.getTypedRuleContext(ControlTypeDeclarationContext,0);
};

ControlDeclarationContext.prototype.optConstructorParameters = function() {
    return this.getTypedRuleContext(OptConstructorParametersContext,0);
};

ControlDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

ControlDeclarationContext.prototype.controlLocalDeclarations = function() {
    return this.getTypedRuleContext(ControlLocalDeclarationsContext,0);
};

ControlDeclarationContext.prototype.APPLY = function() {
    return this.getToken(P4Parser.APPLY, 0);
};

ControlDeclarationContext.prototype.controlBody = function() {
    return this.getTypedRuleContext(ControlBodyContext,0);
};

ControlDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

ControlDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterControlDeclaration(this);
	}
};

ControlDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitControlDeclaration(this);
	}
};




P4Parser.ControlDeclarationContext = ControlDeclarationContext;

P4Parser.prototype.controlDeclaration = function() {

    var localctx = new ControlDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, P4Parser.RULE_controlDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 709;
        this.controlTypeDeclaration();
        this.state = 710;
        this.optConstructorParameters();
        this.state = 711;
        this.match(P4Parser.L_BRACE);
        this.state = 712;
        this.controlLocalDeclarations(0);
        this.state = 713;
        this.match(P4Parser.APPLY);
        this.state = 714;
        this.controlBody();
        this.state = 715;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ControlTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_controlTypeDeclaration;
    return this;
}

ControlTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ControlTypeDeclarationContext.prototype.constructor = ControlTypeDeclarationContext;

ControlTypeDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ControlTypeDeclarationContext.prototype.CONTROL = function() {
    return this.getToken(P4Parser.CONTROL, 0);
};

ControlTypeDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ControlTypeDeclarationContext.prototype.optTypeParameters = function() {
    return this.getTypedRuleContext(OptTypeParametersContext,0);
};

ControlTypeDeclarationContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

ControlTypeDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ControlTypeDeclarationContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

ControlTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterControlTypeDeclaration(this);
	}
};

ControlTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitControlTypeDeclaration(this);
	}
};




P4Parser.ControlTypeDeclarationContext = ControlTypeDeclarationContext;

P4Parser.prototype.controlTypeDeclaration = function() {

    var localctx = new ControlTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, P4Parser.RULE_controlTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 717;
        this.optAnnotations();
        this.state = 718;
        this.match(P4Parser.CONTROL);
        this.state = 719;
        this.name();
        this.state = 720;
        this.optTypeParameters();
        this.state = 721;
        this.match(P4Parser.L_PAREN);
        this.state = 722;
        this.parameterList();
        this.state = 723;
        this.match(P4Parser.R_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ControlLocalDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_controlLocalDeclarations;
    return this;
}

ControlLocalDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ControlLocalDeclarationsContext.prototype.constructor = ControlLocalDeclarationsContext;

ControlLocalDeclarationsContext.prototype.controlLocalDeclarations = function() {
    return this.getTypedRuleContext(ControlLocalDeclarationsContext,0);
};

ControlLocalDeclarationsContext.prototype.controlLocalDeclaration = function() {
    return this.getTypedRuleContext(ControlLocalDeclarationContext,0);
};

ControlLocalDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterControlLocalDeclarations(this);
	}
};

ControlLocalDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitControlLocalDeclarations(this);
	}
};



P4Parser.prototype.controlLocalDeclarations = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ControlLocalDeclarationsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 96;
    this.enterRecursionRule(localctx, 96, P4Parser.RULE_controlLocalDeclarations, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 730;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ControlLocalDeclarationsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_controlLocalDeclarations);
                this.state = 726;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 727;
                this.controlLocalDeclaration(); 
            }
            this.state = 732;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ControlLocalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_controlLocalDeclaration;
    return this;
}

ControlLocalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ControlLocalDeclarationContext.prototype.constructor = ControlLocalDeclarationContext;

ControlLocalDeclarationContext.prototype.constantDeclaration = function() {
    return this.getTypedRuleContext(ConstantDeclarationContext,0);
};

ControlLocalDeclarationContext.prototype.actionDeclaration = function() {
    return this.getTypedRuleContext(ActionDeclarationContext,0);
};

ControlLocalDeclarationContext.prototype.tableDeclaration = function() {
    return this.getTypedRuleContext(TableDeclarationContext,0);
};

ControlLocalDeclarationContext.prototype.instantiation = function() {
    return this.getTypedRuleContext(InstantiationContext,0);
};

ControlLocalDeclarationContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

ControlLocalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterControlLocalDeclaration(this);
	}
};

ControlLocalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitControlLocalDeclaration(this);
	}
};




P4Parser.ControlLocalDeclarationContext = ControlLocalDeclarationContext;

P4Parser.prototype.controlLocalDeclaration = function() {

    var localctx = new ControlLocalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, P4Parser.RULE_controlLocalDeclaration);
    try {
        this.state = 738;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 733;
            this.constantDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 734;
            this.actionDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 735;
            this.tableDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 736;
            this.instantiation();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 737;
            this.variableDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ControlBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_controlBody;
    return this;
}

ControlBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ControlBodyContext.prototype.constructor = ControlBodyContext;

ControlBodyContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

ControlBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterControlBody(this);
	}
};

ControlBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitControlBody(this);
	}
};




P4Parser.ControlBodyContext = ControlBodyContext;

P4Parser.prototype.controlBody = function() {

    var localctx = new ControlBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, P4Parser.RULE_controlBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 740;
        this.blockStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExternDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_externDeclaration;
    return this;
}

ExternDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternDeclarationContext.prototype.constructor = ExternDeclarationContext;

ExternDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ExternDeclarationContext.prototype.EXTERN = function() {
    return this.getToken(P4Parser.EXTERN, 0);
};

ExternDeclarationContext.prototype.nonTypeName = function() {
    return this.getTypedRuleContext(NonTypeNameContext,0);
};

ExternDeclarationContext.prototype.optTypeParameters = function() {
    return this.getTypedRuleContext(OptTypeParametersContext,0);
};

ExternDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

ExternDeclarationContext.prototype.methodPrototypes = function() {
    return this.getTypedRuleContext(MethodPrototypesContext,0);
};

ExternDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

ExternDeclarationContext.prototype.functionPrototype = function() {
    return this.getTypedRuleContext(FunctionPrototypeContext,0);
};

ExternDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

ExternDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ExternDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterExternDeclaration(this);
	}
};

ExternDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitExternDeclaration(this);
	}
};




P4Parser.ExternDeclarationContext = ExternDeclarationContext;

P4Parser.prototype.externDeclaration = function() {

    var localctx = new ExternDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, P4Parser.RULE_externDeclaration);
    try {
        this.state = 760;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 742;
            this.optAnnotations();
            this.state = 743;
            this.match(P4Parser.EXTERN);
            this.state = 744;
            this.nonTypeName();
            this.state = 745;
            this.optTypeParameters();
            this.state = 746;
            this.match(P4Parser.L_BRACE);
            this.state = 747;
            this.methodPrototypes(0);
            this.state = 748;
            this.match(P4Parser.R_BRACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 750;
            this.optAnnotations();
            this.state = 751;
            this.match(P4Parser.EXTERN);
            this.state = 752;
            this.functionPrototype();
            this.state = 753;
            this.match(P4Parser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 755;
            this.optAnnotations();
            this.state = 756;
            this.match(P4Parser.EXTERN);
            this.state = 757;
            this.name();
            this.state = 758;
            this.match(P4Parser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodPrototypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_methodPrototypes;
    return this;
}

MethodPrototypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodPrototypesContext.prototype.constructor = MethodPrototypesContext;

MethodPrototypesContext.prototype.methodPrototypes = function() {
    return this.getTypedRuleContext(MethodPrototypesContext,0);
};

MethodPrototypesContext.prototype.methodPrototype = function() {
    return this.getTypedRuleContext(MethodPrototypeContext,0);
};

MethodPrototypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterMethodPrototypes(this);
	}
};

MethodPrototypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitMethodPrototypes(this);
	}
};



P4Parser.prototype.methodPrototypes = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MethodPrototypesContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 104;
    this.enterRecursionRule(localctx, 104, P4Parser.RULE_methodPrototypes, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 767;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new MethodPrototypesContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_methodPrototypes);
                this.state = 763;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 764;
                this.methodPrototype(); 
            }
            this.state = 769;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function FunctionPrototypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_functionPrototype;
    return this;
}

FunctionPrototypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionPrototypeContext.prototype.constructor = FunctionPrototypeContext;

FunctionPrototypeContext.prototype.typeOrVoid = function() {
    return this.getTypedRuleContext(TypeOrVoidContext,0);
};

FunctionPrototypeContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

FunctionPrototypeContext.prototype.optTypeParameters = function() {
    return this.getTypedRuleContext(OptTypeParametersContext,0);
};

FunctionPrototypeContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

FunctionPrototypeContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionPrototypeContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

FunctionPrototypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterFunctionPrototype(this);
	}
};

FunctionPrototypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitFunctionPrototype(this);
	}
};




P4Parser.FunctionPrototypeContext = FunctionPrototypeContext;

P4Parser.prototype.functionPrototype = function() {

    var localctx = new FunctionPrototypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, P4Parser.RULE_functionPrototype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 770;
        this.typeOrVoid();
        this.state = 771;
        this.name();
        this.state = 772;
        this.optTypeParameters();
        this.state = 773;
        this.match(P4Parser.L_PAREN);
        this.state = 774;
        this.parameterList();
        this.state = 775;
        this.match(P4Parser.R_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodPrototypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_methodPrototype;
    return this;
}

MethodPrototypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodPrototypeContext.prototype.constructor = MethodPrototypeContext;

MethodPrototypeContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

MethodPrototypeContext.prototype.functionPrototype = function() {
    return this.getTypedRuleContext(FunctionPrototypeContext,0);
};

MethodPrototypeContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

MethodPrototypeContext.prototype.ABSTRACT = function() {
    return this.getToken(P4Parser.ABSTRACT, 0);
};

MethodPrototypeContext.prototype.type_or_id = function() {
    return this.getTypedRuleContext(Type_or_idContext,0);
};

MethodPrototypeContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

MethodPrototypeContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

MethodPrototypeContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

MethodPrototypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterMethodPrototype(this);
	}
};

MethodPrototypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitMethodPrototype(this);
	}
};




P4Parser.MethodPrototypeContext = MethodPrototypeContext;

P4Parser.prototype.methodPrototype = function() {

    var localctx = new MethodPrototypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, P4Parser.RULE_methodPrototype);
    try {
        this.state = 793;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 777;
            this.optAnnotations();
            this.state = 778;
            this.functionPrototype();
            this.state = 779;
            this.match(P4Parser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 781;
            this.optAnnotations();
            this.state = 782;
            this.match(P4Parser.ABSTRACT);
            this.state = 783;
            this.functionPrototype();
            this.state = 784;
            this.match(P4Parser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 786;
            this.optAnnotations();
            this.state = 787;
            this.type_or_id();
            this.state = 788;
            this.match(P4Parser.L_PAREN);
            this.state = 789;
            this.parameterList();
            this.state = 790;
            this.match(P4Parser.R_PAREN);
            this.state = 791;
            this.match(P4Parser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_typeRef;
    return this;
}

TypeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeRefContext.prototype.constructor = TypeRefContext;

TypeRefContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

TypeRefContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

TypeRefContext.prototype.specializedType = function() {
    return this.getTypedRuleContext(SpecializedTypeContext,0);
};

TypeRefContext.prototype.headerStackType = function() {
    return this.getTypedRuleContext(HeaderStackTypeContext,0);
};

TypeRefContext.prototype.tupleType = function() {
    return this.getTypedRuleContext(TupleTypeContext,0);
};

TypeRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTypeRef(this);
	}
};

TypeRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTypeRef(this);
	}
};




P4Parser.TypeRefContext = TypeRefContext;

P4Parser.prototype.typeRef = function() {

    var localctx = new TypeRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, P4Parser.RULE_typeRef);
    try {
        this.state = 800;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 795;
            this.baseType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 796;
            this.typeName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 797;
            this.specializedType();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 798;
            this.headerStackType();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 799;
            this.tupleType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_namedType;
    return this;
}

NamedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedTypeContext.prototype.constructor = NamedTypeContext;

NamedTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

NamedTypeContext.prototype.specializedType = function() {
    return this.getTypedRuleContext(SpecializedTypeContext,0);
};

NamedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterNamedType(this);
	}
};

NamedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitNamedType(this);
	}
};




P4Parser.NamedTypeContext = NamedTypeContext;

P4Parser.prototype.namedType = function() {

    var localctx = new NamedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, P4Parser.RULE_namedType);
    try {
        this.state = 804;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 802;
            this.typeName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 803;
            this.specializedType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_prefixedType;
    return this;
}

PrefixedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixedTypeContext.prototype.constructor = PrefixedTypeContext;

PrefixedTypeContext.prototype.type_or_id = function() {
    return this.getTypedRuleContext(Type_or_idContext,0);
};

PrefixedTypeContext.prototype.dotPrefix = function() {
    return this.getTypedRuleContext(DotPrefixContext,0);
};

PrefixedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterPrefixedType(this);
	}
};

PrefixedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitPrefixedType(this);
	}
};




P4Parser.PrefixedTypeContext = PrefixedTypeContext;

P4Parser.prototype.prefixedType = function() {

    var localctx = new PrefixedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, P4Parser.RULE_prefixedType);
    try {
        this.state = 810;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 806;
            this.type_or_id();
            break;
        case P4Parser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 807;
            this.dotPrefix();
            this.state = 808;
            this.type_or_id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.prefixedType = function() {
    return this.getTypedRuleContext(PrefixedTypeContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTypeName(this);
	}
};




P4Parser.TypeNameContext = TypeNameContext;

P4Parser.prototype.typeName = function() {

    var localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, P4Parser.RULE_typeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        this.prefixedType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_tupleType;
    return this;
}

TupleTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleTypeContext.prototype.constructor = TupleTypeContext;

TupleTypeContext.prototype.TUPLE = function() {
    return this.getToken(P4Parser.TUPLE, 0);
};

TupleTypeContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

TupleTypeContext.prototype.typeArgumentList = function() {
    return this.getTypedRuleContext(TypeArgumentListContext,0);
};

TupleTypeContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

TupleTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTupleType(this);
	}
};

TupleTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTupleType(this);
	}
};




P4Parser.TupleTypeContext = TupleTypeContext;

P4Parser.prototype.tupleType = function() {

    var localctx = new TupleTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, P4Parser.RULE_tupleType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 814;
        this.match(P4Parser.TUPLE);
        this.state = 815;
        this.match(P4Parser.L_ANGLE);
        this.state = 816;
        this.typeArgumentList(0);
        this.state = 817;
        this.match(P4Parser.R_ANGLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HeaderStackTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_headerStackType;
    return this;
}

HeaderStackTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HeaderStackTypeContext.prototype.constructor = HeaderStackTypeContext;

HeaderStackTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

HeaderStackTypeContext.prototype.L_BRACKET = function() {
    return this.getToken(P4Parser.L_BRACKET, 0);
};

HeaderStackTypeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

HeaderStackTypeContext.prototype.R_BRACKET = function() {
    return this.getToken(P4Parser.R_BRACKET, 0);
};

HeaderStackTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterHeaderStackType(this);
	}
};

HeaderStackTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitHeaderStackType(this);
	}
};




P4Parser.HeaderStackTypeContext = HeaderStackTypeContext;

P4Parser.prototype.headerStackType = function() {

    var localctx = new HeaderStackTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, P4Parser.RULE_headerStackType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 819;
        this.typeName();
        this.state = 820;
        this.match(P4Parser.L_BRACKET);
        this.state = 821;
        this.expression(0);
        this.state = 822;
        this.match(P4Parser.R_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecializedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_specializedType;
    return this;
}

SpecializedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecializedTypeContext.prototype.constructor = SpecializedTypeContext;

SpecializedTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

SpecializedTypeContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

SpecializedTypeContext.prototype.typeArgumentList = function() {
    return this.getTypedRuleContext(TypeArgumentListContext,0);
};

SpecializedTypeContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

SpecializedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSpecializedType(this);
	}
};

SpecializedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSpecializedType(this);
	}
};




P4Parser.SpecializedTypeContext = SpecializedTypeContext;

P4Parser.prototype.specializedType = function() {

    var localctx = new SpecializedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, P4Parser.RULE_specializedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.typeName();
        this.state = 825;
        this.match(P4Parser.L_ANGLE);
        this.state = 826;
        this.typeArgumentList(0);
        this.state = 827;
        this.match(P4Parser.R_ANGLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.BOOL = function() {
    return this.getToken(P4Parser.BOOL, 0);
};

BaseTypeContext.prototype.ERROR = function() {
    return this.getToken(P4Parser.ERROR, 0);
};

BaseTypeContext.prototype.BIT = function() {
    return this.getToken(P4Parser.BIT, 0);
};

BaseTypeContext.prototype.INT = function() {
    return this.getToken(P4Parser.INT, 0);
};

BaseTypeContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

BaseTypeContext.prototype.INTEGER = function() {
    return this.getToken(P4Parser.INTEGER, 0);
};

BaseTypeContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

BaseTypeContext.prototype.VARBIT = function() {
    return this.getToken(P4Parser.VARBIT, 0);
};

BaseTypeContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

BaseTypeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BaseTypeContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitBaseType(this);
	}
};




P4Parser.BaseTypeContext = BaseTypeContext;

P4Parser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, P4Parser.RULE_baseType);
    try {
        this.state = 866;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 829;
            this.match(P4Parser.BOOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 830;
            this.match(P4Parser.ERROR);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 831;
            this.match(P4Parser.BIT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 832;
            this.match(P4Parser.INT);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 833;
            this.match(P4Parser.BIT);
            this.state = 834;
            this.match(P4Parser.L_ANGLE);
            this.state = 835;
            this.match(P4Parser.INTEGER);
            this.state = 836;
            this.match(P4Parser.R_ANGLE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 837;
            this.match(P4Parser.INT);
            this.state = 838;
            this.match(P4Parser.L_ANGLE);
            this.state = 839;
            this.match(P4Parser.INTEGER);
            this.state = 840;
            this.match(P4Parser.R_ANGLE);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 841;
            this.match(P4Parser.VARBIT);
            this.state = 842;
            this.match(P4Parser.L_ANGLE);
            this.state = 843;
            this.match(P4Parser.INTEGER);
            this.state = 844;
            this.match(P4Parser.R_ANGLE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 845;
            this.match(P4Parser.BIT);
            this.state = 846;
            this.match(P4Parser.L_ANGLE);
            this.state = 847;
            this.match(P4Parser.L_PAREN);
            this.state = 848;
            this.expression(0);
            this.state = 849;
            this.match(P4Parser.R_PAREN);
            this.state = 850;
            this.match(P4Parser.R_ANGLE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 852;
            this.match(P4Parser.INT);
            this.state = 853;
            this.match(P4Parser.L_ANGLE);
            this.state = 854;
            this.match(P4Parser.L_PAREN);
            this.state = 855;
            this.expression(0);
            this.state = 856;
            this.match(P4Parser.R_PAREN);
            this.state = 857;
            this.match(P4Parser.R_ANGLE);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 859;
            this.match(P4Parser.VARBIT);
            this.state = 860;
            this.match(P4Parser.L_ANGLE);
            this.state = 861;
            this.match(P4Parser.L_PAREN);
            this.state = 862;
            this.expression(0);
            this.state = 863;
            this.match(P4Parser.R_PAREN);
            this.state = 864;
            this.match(P4Parser.R_ANGLE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeOrVoidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_typeOrVoid;
    return this;
}

TypeOrVoidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeOrVoidContext.prototype.constructor = TypeOrVoidContext;

TypeOrVoidContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

TypeOrVoidContext.prototype.VOID = function() {
    return this.getToken(P4Parser.VOID, 0);
};

TypeOrVoidContext.prototype.type_or_id = function() {
    return this.getTypedRuleContext(Type_or_idContext,0);
};

TypeOrVoidContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTypeOrVoid(this);
	}
};

TypeOrVoidContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTypeOrVoid(this);
	}
};




P4Parser.TypeOrVoidContext = TypeOrVoidContext;

P4Parser.prototype.typeOrVoid = function() {

    var localctx = new TypeOrVoidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, P4Parser.RULE_typeOrVoid);
    try {
        this.state = 871;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 868;
            this.typeRef();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 869;
            this.match(P4Parser.VOID);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 870;
            this.type_or_id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptTypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_optTypeParameters;
    return this;
}

OptTypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptTypeParametersContext.prototype.constructor = OptTypeParametersContext;

OptTypeParametersContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

OptTypeParametersContext.prototype.typeParameterList = function() {
    return this.getTypedRuleContext(TypeParameterListContext,0);
};

OptTypeParametersContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

OptTypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterOptTypeParameters(this);
	}
};

OptTypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitOptTypeParameters(this);
	}
};




P4Parser.OptTypeParametersContext = OptTypeParametersContext;

P4Parser.prototype.optTypeParameters = function() {

    var localctx = new OptTypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, P4Parser.RULE_optTypeParameters);
    try {
        this.state = 878;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.L_PAREN:
        case P4Parser.L_BRACE:
            this.enterOuterAlt(localctx, 1);

            break;
        case P4Parser.L_ANGLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 874;
            this.match(P4Parser.L_ANGLE);
            this.state = 875;
            this.typeParameterList(0);
            this.state = 876;
            this.match(P4Parser.R_ANGLE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_typeParameterList;
    return this;
}

TypeParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterListContext.prototype.constructor = TypeParameterListContext;

TypeParameterListContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

TypeParameterListContext.prototype.typeParameterList = function() {
    return this.getTypedRuleContext(TypeParameterListContext,0);
};

TypeParameterListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

TypeParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTypeParameterList(this);
	}
};

TypeParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTypeParameterList(this);
	}
};



P4Parser.prototype.typeParameterList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeParameterListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 130;
    this.enterRecursionRule(localctx, 130, P4Parser.RULE_typeParameterList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 881;
        this.name();
        this._ctx.stop = this._input.LT(-1);
        this.state = 888;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeParameterListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_typeParameterList);
                this.state = 883;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 884;
                this.match(P4Parser.COMMA);
                this.state = 885;
                this.name(); 
            }
            this.state = 890;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TypeArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_typeArg;
    return this;
}

TypeArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgContext.prototype.constructor = TypeArgContext;

TypeArgContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

TypeArgContext.prototype.nonTypeName = function() {
    return this.getTypedRuleContext(NonTypeNameContext,0);
};

TypeArgContext.prototype.VOID = function() {
    return this.getToken(P4Parser.VOID, 0);
};

TypeArgContext.prototype.DONTCARE = function() {
    return this.getToken(P4Parser.DONTCARE, 0);
};

TypeArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTypeArg(this);
	}
};

TypeArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTypeArg(this);
	}
};




P4Parser.TypeArgContext = TypeArgContext;

P4Parser.prototype.typeArg = function() {

    var localctx = new TypeArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, P4Parser.RULE_typeArg);
    try {
        this.state = 895;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 891;
            this.typeRef();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 892;
            this.nonTypeName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 893;
            this.match(P4Parser.VOID);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 894;
            this.match(P4Parser.DONTCARE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_typeArgumentList;
    return this;
}

TypeArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentListContext.prototype.constructor = TypeArgumentListContext;

TypeArgumentListContext.prototype.typeArg = function() {
    return this.getTypedRuleContext(TypeArgContext,0);
};

TypeArgumentListContext.prototype.typeArgumentList = function() {
    return this.getTypedRuleContext(TypeArgumentListContext,0);
};

TypeArgumentListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

TypeArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTypeArgumentList(this);
	}
};

TypeArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTypeArgumentList(this);
	}
};



P4Parser.prototype.typeArgumentList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeArgumentListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 134;
    this.enterRecursionRule(localctx, 134, P4Parser.RULE_typeArgumentList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            break;

        case 2:
            this.state = 898;
            this.typeArg();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 906;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeArgumentListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_typeArgumentList);
                this.state = 901;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 902;
                this.match(P4Parser.COMMA);
                this.state = 903;
                this.typeArg(); 
            }
            this.state = 908;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function RealTypeArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_realTypeArg;
    return this;
}

RealTypeArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RealTypeArgContext.prototype.constructor = RealTypeArgContext;

RealTypeArgContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

RealTypeArgContext.prototype.VOID = function() {
    return this.getToken(P4Parser.VOID, 0);
};

RealTypeArgContext.prototype.DONTCARE = function() {
    return this.getToken(P4Parser.DONTCARE, 0);
};

RealTypeArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterRealTypeArg(this);
	}
};

RealTypeArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitRealTypeArg(this);
	}
};




P4Parser.RealTypeArgContext = RealTypeArgContext;

P4Parser.prototype.realTypeArg = function() {

    var localctx = new RealTypeArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, P4Parser.RULE_realTypeArg);
    try {
        this.state = 912;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.BOOL:
        case P4Parser.BIT:
        case P4Parser.ERROR:
        case P4Parser.INT:
        case P4Parser.TUPLE:
        case P4Parser.VARBIT:
        case P4Parser.DOT:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 909;
            this.typeRef();
            break;
        case P4Parser.VOID:
            this.enterOuterAlt(localctx, 2);
            this.state = 910;
            this.match(P4Parser.VOID);
            break;
        case P4Parser.DONTCARE:
            this.enterOuterAlt(localctx, 3);
            this.state = 911;
            this.match(P4Parser.DONTCARE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RealTypeArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_realTypeArgumentList;
    return this;
}

RealTypeArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RealTypeArgumentListContext.prototype.constructor = RealTypeArgumentListContext;

RealTypeArgumentListContext.prototype.realTypeArg = function() {
    return this.getTypedRuleContext(RealTypeArgContext,0);
};

RealTypeArgumentListContext.prototype.realTypeArgumentList = function() {
    return this.getTypedRuleContext(RealTypeArgumentListContext,0);
};

RealTypeArgumentListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

RealTypeArgumentListContext.prototype.typeArg = function() {
    return this.getTypedRuleContext(TypeArgContext,0);
};

RealTypeArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterRealTypeArgumentList(this);
	}
};

RealTypeArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitRealTypeArgumentList(this);
	}
};



P4Parser.prototype.realTypeArgumentList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RealTypeArgumentListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 138;
    this.enterRecursionRule(localctx, 138, P4Parser.RULE_realTypeArgumentList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 915;
        this.realTypeArg();
        this._ctx.stop = this._input.LT(-1);
        this.state = 922;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new RealTypeArgumentListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_realTypeArgumentList);
                this.state = 917;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 918;
                this.match(P4Parser.COMMA);
                this.state = 919;
                this.typeArg(); 
            }
            this.state = 924;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.derivedTypeDeclaration = function() {
    return this.getTypedRuleContext(DerivedTypeDeclarationContext,0);
};

TypeDeclarationContext.prototype.typedefDeclaration = function() {
    return this.getTypedRuleContext(TypedefDeclarationContext,0);
};

TypeDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

TypeDeclarationContext.prototype.parserTypeDeclaration = function() {
    return this.getTypedRuleContext(ParserTypeDeclarationContext,0);
};

TypeDeclarationContext.prototype.controlTypeDeclaration = function() {
    return this.getTypedRuleContext(ControlTypeDeclarationContext,0);
};

TypeDeclarationContext.prototype.packageTypeDeclaration = function() {
    return this.getTypedRuleContext(PackageTypeDeclarationContext,0);
};

TypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTypeDeclaration(this);
	}
};




P4Parser.TypeDeclarationContext = TypeDeclarationContext;

P4Parser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, P4Parser.RULE_typeDeclaration);
    try {
        this.state = 938;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 925;
            this.derivedTypeDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 926;
            this.typedefDeclaration();
            this.state = 927;
            this.match(P4Parser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 929;
            this.parserTypeDeclaration();
            this.state = 930;
            this.match(P4Parser.SEMICOLON);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 932;
            this.controlTypeDeclaration();
            this.state = 933;
            this.match(P4Parser.SEMICOLON);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 935;
            this.packageTypeDeclaration();
            this.state = 936;
            this.match(P4Parser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DerivedTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_derivedTypeDeclaration;
    return this;
}

DerivedTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DerivedTypeDeclarationContext.prototype.constructor = DerivedTypeDeclarationContext;

DerivedTypeDeclarationContext.prototype.headerTypeDeclaration = function() {
    return this.getTypedRuleContext(HeaderTypeDeclarationContext,0);
};

DerivedTypeDeclarationContext.prototype.headerUnionDeclaration = function() {
    return this.getTypedRuleContext(HeaderUnionDeclarationContext,0);
};

DerivedTypeDeclarationContext.prototype.structTypeDeclaration = function() {
    return this.getTypedRuleContext(StructTypeDeclarationContext,0);
};

DerivedTypeDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

DerivedTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterDerivedTypeDeclaration(this);
	}
};

DerivedTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitDerivedTypeDeclaration(this);
	}
};




P4Parser.DerivedTypeDeclarationContext = DerivedTypeDeclarationContext;

P4Parser.prototype.derivedTypeDeclaration = function() {

    var localctx = new DerivedTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, P4Parser.RULE_derivedTypeDeclaration);
    try {
        this.state = 944;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 940;
            this.headerTypeDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 941;
            this.headerUnionDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 942;
            this.structTypeDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 943;
            this.enumDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HeaderTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_headerTypeDeclaration;
    return this;
}

HeaderTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HeaderTypeDeclarationContext.prototype.constructor = HeaderTypeDeclarationContext;

HeaderTypeDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

HeaderTypeDeclarationContext.prototype.HEADER = function() {
    return this.getToken(P4Parser.HEADER, 0);
};

HeaderTypeDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

HeaderTypeDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

HeaderTypeDeclarationContext.prototype.structFieldList = function() {
    return this.getTypedRuleContext(StructFieldListContext,0);
};

HeaderTypeDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

HeaderTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterHeaderTypeDeclaration(this);
	}
};

HeaderTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitHeaderTypeDeclaration(this);
	}
};




P4Parser.HeaderTypeDeclarationContext = HeaderTypeDeclarationContext;

P4Parser.prototype.headerTypeDeclaration = function() {

    var localctx = new HeaderTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, P4Parser.RULE_headerTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        this.optAnnotations();
        this.state = 947;
        this.match(P4Parser.HEADER);
        this.state = 948;
        this.name();
        this.state = 949;
        this.match(P4Parser.L_BRACE);
        this.state = 950;
        this.structFieldList(0);
        this.state = 951;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_structTypeDeclaration;
    return this;
}

StructTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructTypeDeclarationContext.prototype.constructor = StructTypeDeclarationContext;

StructTypeDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

StructTypeDeclarationContext.prototype.STRUCT = function() {
    return this.getToken(P4Parser.STRUCT, 0);
};

StructTypeDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

StructTypeDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

StructTypeDeclarationContext.prototype.structFieldList = function() {
    return this.getTypedRuleContext(StructFieldListContext,0);
};

StructTypeDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

StructTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterStructTypeDeclaration(this);
	}
};

StructTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitStructTypeDeclaration(this);
	}
};




P4Parser.StructTypeDeclarationContext = StructTypeDeclarationContext;

P4Parser.prototype.structTypeDeclaration = function() {

    var localctx = new StructTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, P4Parser.RULE_structTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 953;
        this.optAnnotations();
        this.state = 954;
        this.match(P4Parser.STRUCT);
        this.state = 955;
        this.name();
        this.state = 956;
        this.match(P4Parser.L_BRACE);
        this.state = 957;
        this.structFieldList(0);
        this.state = 958;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HeaderUnionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_headerUnionDeclaration;
    return this;
}

HeaderUnionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HeaderUnionDeclarationContext.prototype.constructor = HeaderUnionDeclarationContext;

HeaderUnionDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

HeaderUnionDeclarationContext.prototype.HEADER_UNION = function() {
    return this.getToken(P4Parser.HEADER_UNION, 0);
};

HeaderUnionDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

HeaderUnionDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

HeaderUnionDeclarationContext.prototype.structFieldList = function() {
    return this.getTypedRuleContext(StructFieldListContext,0);
};

HeaderUnionDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

HeaderUnionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterHeaderUnionDeclaration(this);
	}
};

HeaderUnionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitHeaderUnionDeclaration(this);
	}
};




P4Parser.HeaderUnionDeclarationContext = HeaderUnionDeclarationContext;

P4Parser.prototype.headerUnionDeclaration = function() {

    var localctx = new HeaderUnionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, P4Parser.RULE_headerUnionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 960;
        this.optAnnotations();
        this.state = 961;
        this.match(P4Parser.HEADER_UNION);
        this.state = 962;
        this.name();
        this.state = 963;
        this.match(P4Parser.L_BRACE);
        this.state = 964;
        this.structFieldList(0);
        this.state = 965;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructFieldListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_structFieldList;
    return this;
}

StructFieldListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructFieldListContext.prototype.constructor = StructFieldListContext;

StructFieldListContext.prototype.structFieldList = function() {
    return this.getTypedRuleContext(StructFieldListContext,0);
};

StructFieldListContext.prototype.structField = function() {
    return this.getTypedRuleContext(StructFieldContext,0);
};

StructFieldListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterStructFieldList(this);
	}
};

StructFieldListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitStructFieldList(this);
	}
};



P4Parser.prototype.structFieldList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new StructFieldListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 150;
    this.enterRecursionRule(localctx, 150, P4Parser.RULE_structFieldList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 972;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StructFieldListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_structFieldList);
                this.state = 968;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 969;
                this.structField(); 
            }
            this.state = 974;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function StructFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_structField;
    return this;
}

StructFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructFieldContext.prototype.constructor = StructFieldContext;

StructFieldContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

StructFieldContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

StructFieldContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

StructFieldContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

StructFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterStructField(this);
	}
};

StructFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitStructField(this);
	}
};




P4Parser.StructFieldContext = StructFieldContext;

P4Parser.prototype.structField = function() {

    var localctx = new StructFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, P4Parser.RULE_structField);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.optAnnotations();
        this.state = 976;
        this.typeRef();
        this.state = 977;
        this.name();
        this.state = 978;
        this.match(P4Parser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_enumDeclaration;
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

EnumDeclarationContext.prototype.ENUM = function() {
    return this.getToken(P4Parser.ENUM, 0);
};

EnumDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

EnumDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

EnumDeclarationContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

EnumDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

EnumDeclarationContext.prototype.BIT = function() {
    return this.getToken(P4Parser.BIT, 0);
};

EnumDeclarationContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

EnumDeclarationContext.prototype.INTEGER = function() {
    return this.getToken(P4Parser.INTEGER, 0);
};

EnumDeclarationContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

EnumDeclarationContext.prototype.specifiedIdentifierList = function() {
    return this.getTypedRuleContext(SpecifiedIdentifierListContext,0);
};

EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitEnumDeclaration(this);
	}
};




P4Parser.EnumDeclarationContext = EnumDeclarationContext;

P4Parser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, P4Parser.RULE_enumDeclaration);
    try {
        this.state = 998;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 980;
            this.optAnnotations();
            this.state = 981;
            this.match(P4Parser.ENUM);
            this.state = 982;
            this.name();
            this.state = 983;
            this.match(P4Parser.L_BRACE);
            this.state = 984;
            this.identifierList(0);
            this.state = 985;
            this.match(P4Parser.R_BRACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 987;
            this.optAnnotations();
            this.state = 988;
            this.match(P4Parser.ENUM);
            this.state = 989;
            this.match(P4Parser.BIT);
            this.state = 990;
            this.match(P4Parser.L_ANGLE);
            this.state = 991;
            this.match(P4Parser.INTEGER);
            this.state = 992;
            this.match(P4Parser.R_ANGLE);
            this.state = 993;
            this.name();
            this.state = 994;
            this.match(P4Parser.L_BRACE);
            this.state = 995;
            this.specifiedIdentifierList(0);
            this.state = 996;
            this.match(P4Parser.R_BRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecifiedIdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_specifiedIdentifierList;
    return this;
}

SpecifiedIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifiedIdentifierListContext.prototype.constructor = SpecifiedIdentifierListContext;

SpecifiedIdentifierListContext.prototype.specifiedIdentifier = function() {
    return this.getTypedRuleContext(SpecifiedIdentifierContext,0);
};

SpecifiedIdentifierListContext.prototype.specifiedIdentifierList = function() {
    return this.getTypedRuleContext(SpecifiedIdentifierListContext,0);
};

SpecifiedIdentifierListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

SpecifiedIdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSpecifiedIdentifierList(this);
	}
};

SpecifiedIdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSpecifiedIdentifierList(this);
	}
};



P4Parser.prototype.specifiedIdentifierList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SpecifiedIdentifierListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 156;
    this.enterRecursionRule(localctx, 156, P4Parser.RULE_specifiedIdentifierList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1001;
        this.specifiedIdentifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1008;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SpecifiedIdentifierListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_specifiedIdentifierList);
                this.state = 1003;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1004;
                this.match(P4Parser.COMMA);
                this.state = 1005;
                this.specifiedIdentifier(); 
            }
            this.state = 1010;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SpecifiedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_specifiedIdentifier;
    return this;
}

SpecifiedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifiedIdentifierContext.prototype.constructor = SpecifiedIdentifierContext;

SpecifiedIdentifierContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

SpecifiedIdentifierContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

SpecifiedIdentifierContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

SpecifiedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSpecifiedIdentifier(this);
	}
};

SpecifiedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSpecifiedIdentifier(this);
	}
};




P4Parser.SpecifiedIdentifierContext = SpecifiedIdentifierContext;

P4Parser.prototype.specifiedIdentifier = function() {

    var localctx = new SpecifiedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, P4Parser.RULE_specifiedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1011;
        this.name();
        this.state = 1012;
        this.match(P4Parser.ASSIGN);
        this.state = 1013;
        this.initializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_errorDeclaration;
    return this;
}

ErrorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorDeclarationContext.prototype.constructor = ErrorDeclarationContext;

ErrorDeclarationContext.prototype.ERROR = function() {
    return this.getToken(P4Parser.ERROR, 0);
};

ErrorDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

ErrorDeclarationContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ErrorDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

ErrorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterErrorDeclaration(this);
	}
};

ErrorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitErrorDeclaration(this);
	}
};




P4Parser.ErrorDeclarationContext = ErrorDeclarationContext;

P4Parser.prototype.errorDeclaration = function() {

    var localctx = new ErrorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, P4Parser.RULE_errorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1015;
        this.match(P4Parser.ERROR);
        this.state = 1016;
        this.match(P4Parser.L_BRACE);
        this.state = 1017;
        this.identifierList(0);
        this.state = 1018;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MatchKindDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_matchKindDeclaration;
    return this;
}

MatchKindDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MatchKindDeclarationContext.prototype.constructor = MatchKindDeclarationContext;

MatchKindDeclarationContext.prototype.MATCH_KIND = function() {
    return this.getToken(P4Parser.MATCH_KIND, 0);
};

MatchKindDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

MatchKindDeclarationContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

MatchKindDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

MatchKindDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterMatchKindDeclaration(this);
	}
};

MatchKindDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitMatchKindDeclaration(this);
	}
};




P4Parser.MatchKindDeclarationContext = MatchKindDeclarationContext;

P4Parser.prototype.matchKindDeclaration = function() {

    var localctx = new MatchKindDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, P4Parser.RULE_matchKindDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1020;
        this.match(P4Parser.MATCH_KIND);
        this.state = 1021;
        this.match(P4Parser.L_BRACE);
        this.state = 1022;
        this.identifierList(0);
        this.state = 1023;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

IdentifierListContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

IdentifierListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitIdentifierList(this);
	}
};



P4Parser.prototype.identifierList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new IdentifierListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 164;
    this.enterRecursionRule(localctx, 164, P4Parser.RULE_identifierList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1026;
        this.name();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1033;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new IdentifierListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_identifierList);
                this.state = 1028;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1029;
                this.match(P4Parser.COMMA);
                this.state = 1030;
                this.name(); 
            }
            this.state = 1035;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TypedefDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_typedefDeclaration;
    return this;
}

TypedefDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefDeclarationContext.prototype.constructor = TypedefDeclarationContext;

TypedefDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

TypedefDeclarationContext.prototype.TYPEDEF = function() {
    return this.getToken(P4Parser.TYPEDEF, 0);
};

TypedefDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

TypedefDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

TypedefDeclarationContext.prototype.derivedTypeDeclaration = function() {
    return this.getTypedRuleContext(DerivedTypeDeclarationContext,0);
};

TypedefDeclarationContext.prototype.TYPE = function() {
    return this.getToken(P4Parser.TYPE, 0);
};

TypedefDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTypedefDeclaration(this);
	}
};

TypedefDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTypedefDeclaration(this);
	}
};




P4Parser.TypedefDeclarationContext = TypedefDeclarationContext;

P4Parser.prototype.typedefDeclaration = function() {

    var localctx = new TypedefDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, P4Parser.RULE_typedefDeclaration);
    try {
        this.state = 1056;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1036;
            this.optAnnotations();
            this.state = 1037;
            this.match(P4Parser.TYPEDEF);
            this.state = 1038;
            this.typeRef();
            this.state = 1039;
            this.name();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1041;
            this.optAnnotations();
            this.state = 1042;
            this.match(P4Parser.TYPEDEF);
            this.state = 1043;
            this.derivedTypeDeclaration();
            this.state = 1044;
            this.name();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1046;
            this.optAnnotations();
            this.state = 1047;
            this.match(P4Parser.TYPE);
            this.state = 1048;
            this.typeRef();
            this.state = 1049;
            this.name();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1051;
            this.optAnnotations();
            this.state = 1052;
            this.match(P4Parser.TYPE);
            this.state = 1053;
            this.derivedTypeDeclaration();
            this.state = 1054;
            this.name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentOrMethodCallStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_assignmentOrMethodCallStatement;
    return this;
}

AssignmentOrMethodCallStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOrMethodCallStatementContext.prototype.constructor = AssignmentOrMethodCallStatementContext;

AssignmentOrMethodCallStatementContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

AssignmentOrMethodCallStatementContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

AssignmentOrMethodCallStatementContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

AssignmentOrMethodCallStatementContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

AssignmentOrMethodCallStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

AssignmentOrMethodCallStatementContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

AssignmentOrMethodCallStatementContext.prototype.typeArgumentList = function() {
    return this.getTypedRuleContext(TypeArgumentListContext,0);
};

AssignmentOrMethodCallStatementContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

AssignmentOrMethodCallStatementContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

AssignmentOrMethodCallStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssignmentOrMethodCallStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterAssignmentOrMethodCallStatement(this);
	}
};

AssignmentOrMethodCallStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitAssignmentOrMethodCallStatement(this);
	}
};




P4Parser.AssignmentOrMethodCallStatementContext = AssignmentOrMethodCallStatementContext;

P4Parser.prototype.assignmentOrMethodCallStatement = function() {

    var localctx = new AssignmentOrMethodCallStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, P4Parser.RULE_assignmentOrMethodCallStatement);
    try {
        this.state = 1078;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1058;
            this.lvalue(0);
            this.state = 1059;
            this.match(P4Parser.L_PAREN);
            this.state = 1060;
            this.argumentList();
            this.state = 1061;
            this.match(P4Parser.R_PAREN);
            this.state = 1062;
            this.match(P4Parser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1064;
            this.lvalue(0);
            this.state = 1065;
            this.match(P4Parser.L_ANGLE);
            this.state = 1066;
            this.typeArgumentList(0);
            this.state = 1067;
            this.match(P4Parser.R_ANGLE);
            this.state = 1068;
            this.match(P4Parser.L_PAREN);
            this.state = 1069;
            this.argumentList();
            this.state = 1070;
            this.match(P4Parser.R_PAREN);
            this.state = 1071;
            this.match(P4Parser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1073;
            this.lvalue(0);
            this.state = 1074;
            this.match(P4Parser.ASSIGN);
            this.state = 1075;
            this.expression(0);
            this.state = 1076;
            this.match(P4Parser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitEmptyStatement(this);
	}
};




P4Parser.EmptyStatementContext = EmptyStatementContext;

P4Parser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, P4Parser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this.match(P4Parser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExitStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_exitStatement;
    return this;
}

ExitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitStatementContext.prototype.constructor = ExitStatementContext;

ExitStatementContext.prototype.EXIT = function() {
    return this.getToken(P4Parser.EXIT, 0);
};

ExitStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

ExitStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterExitStatement(this);
	}
};

ExitStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitExitStatement(this);
	}
};




P4Parser.ExitStatementContext = ExitStatementContext;

P4Parser.prototype.exitStatement = function() {

    var localctx = new ExitStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, P4Parser.RULE_exitStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1082;
        this.match(P4Parser.EXIT);
        this.state = 1083;
        this.match(P4Parser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(P4Parser.RETURN, 0);
};

ReturnStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitReturnStatement(this);
	}
};




P4Parser.ReturnStatementContext = ReturnStatementContext;

P4Parser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, P4Parser.RULE_returnStatement);
    try {
        this.state = 1091;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1085;
            this.match(P4Parser.RETURN);
            this.state = 1086;
            this.match(P4Parser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1087;
            this.match(P4Parser.RETURN);
            this.state = 1088;
            this.expression(0);
            this.state = 1089;
            this.match(P4Parser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionalStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_conditionalStatement;
    return this;
}

ConditionalStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalStatementContext.prototype.constructor = ConditionalStatementContext;

ConditionalStatementContext.prototype.IF = function() {
    return this.getToken(P4Parser.IF, 0);
};

ConditionalStatementContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

ConditionalStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalStatementContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

ConditionalStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

ConditionalStatementContext.prototype.ELSE = function() {
    return this.getToken(P4Parser.ELSE, 0);
};

ConditionalStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterConditionalStatement(this);
	}
};

ConditionalStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitConditionalStatement(this);
	}
};




P4Parser.ConditionalStatementContext = ConditionalStatementContext;

P4Parser.prototype.conditionalStatement = function() {

    var localctx = new ConditionalStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, P4Parser.RULE_conditionalStatement);
    try {
        this.state = 1107;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1093;
            this.match(P4Parser.IF);
            this.state = 1094;
            this.match(P4Parser.L_PAREN);
            this.state = 1095;
            this.expression(0);
            this.state = 1096;
            this.match(P4Parser.R_PAREN);
            this.state = 1097;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1099;
            this.match(P4Parser.IF);
            this.state = 1100;
            this.match(P4Parser.L_PAREN);
            this.state = 1101;
            this.expression(0);
            this.state = 1102;
            this.match(P4Parser.R_PAREN);
            this.state = 1103;
            this.statement();
            this.state = 1104;
            this.match(P4Parser.ELSE);
            this.state = 1105;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DirectApplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_directApplication;
    return this;
}

DirectApplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectApplicationContext.prototype.constructor = DirectApplicationContext;

DirectApplicationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

DirectApplicationContext.prototype.DOT = function() {
    return this.getToken(P4Parser.DOT, 0);
};

DirectApplicationContext.prototype.APPLY = function() {
    return this.getToken(P4Parser.APPLY, 0);
};

DirectApplicationContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

DirectApplicationContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

DirectApplicationContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

DirectApplicationContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

DirectApplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterDirectApplication(this);
	}
};

DirectApplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitDirectApplication(this);
	}
};




P4Parser.DirectApplicationContext = DirectApplicationContext;

P4Parser.prototype.directApplication = function() {

    var localctx = new DirectApplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, P4Parser.RULE_directApplication);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1109;
        this.typeName();
        this.state = 1110;
        this.match(P4Parser.DOT);
        this.state = 1111;
        this.match(P4Parser.APPLY);
        this.state = 1112;
        this.match(P4Parser.L_PAREN);
        this.state = 1113;
        this.argumentList();
        this.state = 1114;
        this.match(P4Parser.R_PAREN);
        this.state = 1115;
        this.match(P4Parser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.directApplication = function() {
    return this.getTypedRuleContext(DirectApplicationContext,0);
};

StatementContext.prototype.assignmentOrMethodCallStatement = function() {
    return this.getTypedRuleContext(AssignmentOrMethodCallStatementContext,0);
};

StatementContext.prototype.conditionalStatement = function() {
    return this.getTypedRuleContext(ConditionalStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.exitStatement = function() {
    return this.getTypedRuleContext(ExitStatementContext,0);
};

StatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitStatement(this);
	}
};




P4Parser.StatementContext = StatementContext;

P4Parser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, P4Parser.RULE_statement);
    try {
        this.state = 1125;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1117;
            this.directApplication();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1118;
            this.assignmentOrMethodCallStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1119;
            this.conditionalStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1120;
            this.emptyStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1121;
            this.blockStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1122;
            this.returnStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1123;
            this.exitStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1124;
            this.switchStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

BlockStatementContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

BlockStatementContext.prototype.statOrDeclList = function() {
    return this.getTypedRuleContext(StatOrDeclListContext,0);
};

BlockStatementContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitBlockStatement(this);
	}
};




P4Parser.BlockStatementContext = BlockStatementContext;

P4Parser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, P4Parser.RULE_blockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1127;
        this.optAnnotations();
        this.state = 1128;
        this.match(P4Parser.L_BRACE);
        this.state = 1129;
        this.statOrDeclList(0);
        this.state = 1130;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatOrDeclListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_statOrDeclList;
    return this;
}

StatOrDeclListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatOrDeclListContext.prototype.constructor = StatOrDeclListContext;

StatOrDeclListContext.prototype.statOrDeclList = function() {
    return this.getTypedRuleContext(StatOrDeclListContext,0);
};

StatOrDeclListContext.prototype.statementOrDeclaration = function() {
    return this.getTypedRuleContext(StatementOrDeclarationContext,0);
};

StatOrDeclListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterStatOrDeclList(this);
	}
};

StatOrDeclListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitStatOrDeclList(this);
	}
};



P4Parser.prototype.statOrDeclList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new StatOrDeclListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 184;
    this.enterRecursionRule(localctx, 184, P4Parser.RULE_statOrDeclList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1137;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StatOrDeclListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_statOrDeclList);
                this.state = 1133;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1134;
                this.statementOrDeclaration(); 
            }
            this.state = 1139;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.SWITCH = function() {
    return this.getToken(P4Parser.SWITCH, 0);
};

SwitchStatementContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

SwitchStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SwitchStatementContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

SwitchStatementContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

SwitchStatementContext.prototype.switchCases = function() {
    return this.getTypedRuleContext(SwitchCasesContext,0);
};

SwitchStatementContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSwitchStatement(this);
	}
};




P4Parser.SwitchStatementContext = SwitchStatementContext;

P4Parser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, P4Parser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1140;
        this.match(P4Parser.SWITCH);
        this.state = 1141;
        this.match(P4Parser.L_PAREN);
        this.state = 1142;
        this.expression(0);
        this.state = 1143;
        this.match(P4Parser.R_PAREN);
        this.state = 1144;
        this.match(P4Parser.L_BRACE);
        this.state = 1145;
        this.switchCases(0);
        this.state = 1146;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchCasesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_switchCases;
    return this;
}

SwitchCasesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchCasesContext.prototype.constructor = SwitchCasesContext;

SwitchCasesContext.prototype.switchCases = function() {
    return this.getTypedRuleContext(SwitchCasesContext,0);
};

SwitchCasesContext.prototype.switchCase = function() {
    return this.getTypedRuleContext(SwitchCaseContext,0);
};

SwitchCasesContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSwitchCases(this);
	}
};

SwitchCasesContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSwitchCases(this);
	}
};



P4Parser.prototype.switchCases = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SwitchCasesContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 188;
    this.enterRecursionRule(localctx, 188, P4Parser.RULE_switchCases, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1153;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SwitchCasesContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_switchCases);
                this.state = 1149;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1150;
                this.switchCase(); 
            }
            this.state = 1155;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SwitchCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_switchCase;
    return this;
}

SwitchCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchCaseContext.prototype.constructor = SwitchCaseContext;

SwitchCaseContext.prototype.switchLabel = function() {
    return this.getTypedRuleContext(SwitchLabelContext,0);
};

SwitchCaseContext.prototype.COLON = function() {
    return this.getToken(P4Parser.COLON, 0);
};

SwitchCaseContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

SwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSwitchCase(this);
	}
};

SwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSwitchCase(this);
	}
};




P4Parser.SwitchCaseContext = SwitchCaseContext;

P4Parser.prototype.switchCase = function() {

    var localctx = new SwitchCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, P4Parser.RULE_switchCase);
    try {
        this.state = 1163;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1156;
            this.switchLabel();
            this.state = 1157;
            this.match(P4Parser.COLON);
            this.state = 1158;
            this.blockStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1160;
            this.switchLabel();
            this.state = 1161;
            this.match(P4Parser.COLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_switchLabel;
    return this;
}

SwitchLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchLabelContext.prototype.constructor = SwitchLabelContext;

SwitchLabelContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

SwitchLabelContext.prototype.DEFAULT = function() {
    return this.getToken(P4Parser.DEFAULT, 0);
};

SwitchLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterSwitchLabel(this);
	}
};

SwitchLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitSwitchLabel(this);
	}
};




P4Parser.SwitchLabelContext = SwitchLabelContext;

P4Parser.prototype.switchLabel = function() {

    var localctx = new SwitchLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, P4Parser.RULE_switchLabel);
    try {
        this.state = 1167;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.ACTIONS:
        case P4Parser.APPLY:
        case P4Parser.ENTRIES:
        case P4Parser.KEY:
        case P4Parser.TYPE:
        case P4Parser.STATE:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1165;
            this.name();
            break;
        case P4Parser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1166;
            this.match(P4Parser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementOrDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_statementOrDeclaration;
    return this;
}

StatementOrDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementOrDeclarationContext.prototype.constructor = StatementOrDeclarationContext;

StatementOrDeclarationContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

StatementOrDeclarationContext.prototype.constantDeclaration = function() {
    return this.getTypedRuleContext(ConstantDeclarationContext,0);
};

StatementOrDeclarationContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementOrDeclarationContext.prototype.instantiation = function() {
    return this.getTypedRuleContext(InstantiationContext,0);
};

StatementOrDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterStatementOrDeclaration(this);
	}
};

StatementOrDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitStatementOrDeclaration(this);
	}
};




P4Parser.StatementOrDeclarationContext = StatementOrDeclarationContext;

P4Parser.prototype.statementOrDeclaration = function() {

    var localctx = new StatementOrDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, P4Parser.RULE_statementOrDeclaration);
    try {
        this.state = 1173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1169;
            this.variableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1170;
            this.constantDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1171;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1172;
            this.instantiation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_tableDeclaration;
    return this;
}

TableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableDeclarationContext.prototype.constructor = TableDeclarationContext;

TableDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

TableDeclarationContext.prototype.TABLE = function() {
    return this.getToken(P4Parser.TABLE, 0);
};

TableDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

TableDeclarationContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

TableDeclarationContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

TableDeclarationContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

TableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTableDeclaration(this);
	}
};

TableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTableDeclaration(this);
	}
};




P4Parser.TableDeclarationContext = TableDeclarationContext;

P4Parser.prototype.tableDeclaration = function() {

    var localctx = new TableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, P4Parser.RULE_tableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1175;
        this.optAnnotations();
        this.state = 1176;
        this.match(P4Parser.TABLE);
        this.state = 1177;
        this.name();
        this.state = 1178;
        this.match(P4Parser.L_BRACE);
        this.state = 1179;
        this.tablePropertyList(0);
        this.state = 1180;
        this.match(P4Parser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_tablePropertyList;
    return this;
}

TablePropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyListContext.prototype.constructor = TablePropertyListContext;

TablePropertyListContext.prototype.tableProperty = function() {
    return this.getTypedRuleContext(TablePropertyContext,0);
};

TablePropertyListContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

TablePropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTablePropertyList(this);
	}
};

TablePropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTablePropertyList(this);
	}
};



P4Parser.prototype.tablePropertyList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TablePropertyListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 198;
    this.enterRecursionRule(localctx, 198, P4Parser.RULE_tablePropertyList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1183;
        this.tableProperty();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1189;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TablePropertyListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_tablePropertyList);
                this.state = 1185;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1186;
                this.tableProperty(); 
            }
            this.state = 1191;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TablePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_tableProperty;
    return this;
}

TablePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyContext.prototype.constructor = TablePropertyContext;

TablePropertyContext.prototype.KEY = function() {
    return this.getToken(P4Parser.KEY, 0);
};

TablePropertyContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

TablePropertyContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

TablePropertyContext.prototype.keyElementList = function() {
    return this.getTypedRuleContext(KeyElementListContext,0);
};

TablePropertyContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

TablePropertyContext.prototype.ACTIONS = function() {
    return this.getToken(P4Parser.ACTIONS, 0);
};

TablePropertyContext.prototype.actionList = function() {
    return this.getTypedRuleContext(ActionListContext,0);
};

TablePropertyContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

TablePropertyContext.prototype.optCONST = function() {
    return this.getTypedRuleContext(OptCONSTContext,0);
};

TablePropertyContext.prototype.ENTRIES = function() {
    return this.getToken(P4Parser.ENTRIES, 0);
};

TablePropertyContext.prototype.entriesList = function() {
    return this.getTypedRuleContext(EntriesListContext,0);
};

TablePropertyContext.prototype.nonTableKwName = function() {
    return this.getTypedRuleContext(NonTableKwNameContext,0);
};

TablePropertyContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

TablePropertyContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

TablePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterTableProperty(this);
	}
};

TablePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitTableProperty(this);
	}
};




P4Parser.TablePropertyContext = TablePropertyContext;

P4Parser.prototype.tableProperty = function() {

    var localctx = new TablePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, P4Parser.RULE_tableProperty);
    try {
        this.state = 1219;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1192;
            this.match(P4Parser.KEY);
            this.state = 1193;
            this.match(P4Parser.ASSIGN);
            this.state = 1194;
            this.match(P4Parser.L_BRACE);
            this.state = 1195;
            this.keyElementList(0);
            this.state = 1196;
            this.match(P4Parser.R_BRACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1198;
            this.match(P4Parser.ACTIONS);
            this.state = 1199;
            this.match(P4Parser.ASSIGN);
            this.state = 1200;
            this.match(P4Parser.L_BRACE);
            this.state = 1201;
            this.actionList(0);
            this.state = 1202;
            this.match(P4Parser.R_BRACE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1204;
            this.optAnnotations();
            this.state = 1205;
            this.optCONST();
            this.state = 1206;
            this.match(P4Parser.ENTRIES);
            this.state = 1207;
            this.match(P4Parser.ASSIGN);
            this.state = 1208;
            this.match(P4Parser.L_BRACE);
            this.state = 1209;
            this.entriesList(0);
            this.state = 1210;
            this.match(P4Parser.R_BRACE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1212;
            this.optAnnotations();
            this.state = 1213;
            this.optCONST();
            this.state = 1214;
            this.nonTableKwName();
            this.state = 1215;
            this.match(P4Parser.ASSIGN);
            this.state = 1216;
            this.initializer();
            this.state = 1217;
            this.match(P4Parser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_keyElementList;
    return this;
}

KeyElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyElementListContext.prototype.constructor = KeyElementListContext;

KeyElementListContext.prototype.keyElementList = function() {
    return this.getTypedRuleContext(KeyElementListContext,0);
};

KeyElementListContext.prototype.keyElement = function() {
    return this.getTypedRuleContext(KeyElementContext,0);
};

KeyElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterKeyElementList(this);
	}
};

KeyElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitKeyElementList(this);
	}
};



P4Parser.prototype.keyElementList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new KeyElementListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 202;
    this.enterRecursionRule(localctx, 202, P4Parser.RULE_keyElementList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1226;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new KeyElementListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_keyElementList);
                this.state = 1222;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1223;
                this.keyElement(); 
            }
            this.state = 1228;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function KeyElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_keyElement;
    return this;
}

KeyElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyElementContext.prototype.constructor = KeyElementContext;

KeyElementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

KeyElementContext.prototype.COLON = function() {
    return this.getToken(P4Parser.COLON, 0);
};

KeyElementContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

KeyElementContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

KeyElementContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

KeyElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterKeyElement(this);
	}
};

KeyElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitKeyElement(this);
	}
};




P4Parser.KeyElementContext = KeyElementContext;

P4Parser.prototype.keyElement = function() {

    var localctx = new KeyElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, P4Parser.RULE_keyElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1229;
        this.expression(0);
        this.state = 1230;
        this.match(P4Parser.COLON);
        this.state = 1231;
        this.name();
        this.state = 1232;
        this.optAnnotations();
        this.state = 1233;
        this.match(P4Parser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_actionList;
    return this;
}

ActionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionListContext.prototype.constructor = ActionListContext;

ActionListContext.prototype.actionList = function() {
    return this.getTypedRuleContext(ActionListContext,0);
};

ActionListContext.prototype.actionRef = function() {
    return this.getTypedRuleContext(ActionRefContext,0);
};

ActionListContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

ActionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterActionList(this);
	}
};

ActionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitActionList(this);
	}
};



P4Parser.prototype.actionList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ActionListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 206;
    this.enterRecursionRule(localctx, 206, P4Parser.RULE_actionList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1242;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ActionListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_actionList);
                this.state = 1236;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1237;
                this.actionRef();
                this.state = 1238;
                this.match(P4Parser.SEMICOLON); 
            }
            this.state = 1244;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ActionRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_actionRef;
    return this;
}

ActionRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionRefContext.prototype.constructor = ActionRefContext;

ActionRefContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ActionRefContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ActionRefContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

ActionRefContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ActionRefContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

ActionRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterActionRef(this);
	}
};

ActionRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitActionRef(this);
	}
};




P4Parser.ActionRefContext = ActionRefContext;

P4Parser.prototype.actionRef = function() {

    var localctx = new ActionRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, P4Parser.RULE_actionRef);
    try {
        this.state = 1254;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1245;
            this.optAnnotations();
            this.state = 1246;
            this.name();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1248;
            this.optAnnotations();
            this.state = 1249;
            this.name();
            this.state = 1250;
            this.match(P4Parser.L_PAREN);
            this.state = 1251;
            this.argumentList();
            this.state = 1252;
            this.match(P4Parser.R_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EntryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_entry;
    return this;
}

EntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntryContext.prototype.constructor = EntryContext;

EntryContext.prototype.keysetExpression = function() {
    return this.getTypedRuleContext(KeysetExpressionContext,0);
};

EntryContext.prototype.COLON = function() {
    return this.getToken(P4Parser.COLON, 0);
};

EntryContext.prototype.actionBinding = function() {
    return this.getTypedRuleContext(ActionBindingContext,0);
};

EntryContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

EntryContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

EntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterEntry(this);
	}
};

EntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitEntry(this);
	}
};




P4Parser.EntryContext = EntryContext;

P4Parser.prototype.entry = function() {

    var localctx = new EntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, P4Parser.RULE_entry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        this.keysetExpression();
        this.state = 1257;
        this.match(P4Parser.COLON);
        this.state = 1258;
        this.actionBinding();
        this.state = 1259;
        this.optAnnotations();
        this.state = 1260;
        this.match(P4Parser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_actionBinding;
    return this;
}

ActionBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionBindingContext.prototype.constructor = ActionBindingContext;

ActionBindingContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

ActionBindingContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

ActionBindingContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ActionBindingContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

ActionBindingContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

ActionBindingContext.prototype.typeArgumentList = function() {
    return this.getTypedRuleContext(TypeArgumentListContext,0);
};

ActionBindingContext.prototype.R_ANGLE = function() {
    return this.getToken(P4Parser.R_ANGLE, 0);
};

ActionBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterActionBinding(this);
	}
};

ActionBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitActionBinding(this);
	}
};




P4Parser.ActionBindingContext = ActionBindingContext;

P4Parser.prototype.actionBinding = function() {

    var localctx = new ActionBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, P4Parser.RULE_actionBinding);
    try {
        this.state = 1275;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1262;
            this.lvalue(0);
            this.state = 1263;
            this.match(P4Parser.L_PAREN);
            this.state = 1264;
            this.argumentList();
            this.state = 1265;
            this.match(P4Parser.R_PAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1267;
            this.lvalue(0);
            this.state = 1268;
            this.match(P4Parser.L_ANGLE);
            this.state = 1269;
            this.typeArgumentList(0);
            this.state = 1270;
            this.match(P4Parser.R_ANGLE);
            this.state = 1271;
            this.match(P4Parser.L_PAREN);
            this.state = 1272;
            this.argumentList();
            this.state = 1273;
            this.match(P4Parser.R_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EntriesListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_entriesList;
    return this;
}

EntriesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntriesListContext.prototype.constructor = EntriesListContext;

EntriesListContext.prototype.entry = function() {
    return this.getTypedRuleContext(EntryContext,0);
};

EntriesListContext.prototype.entriesList = function() {
    return this.getTypedRuleContext(EntriesListContext,0);
};

EntriesListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterEntriesList(this);
	}
};

EntriesListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitEntriesList(this);
	}
};



P4Parser.prototype.entriesList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EntriesListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 214;
    this.enterRecursionRule(localctx, 214, P4Parser.RULE_entriesList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1278;
        this.entry();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1284;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new EntriesListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_entriesList);
                this.state = 1280;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1281;
                this.entry(); 
            }
            this.state = 1286;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ActionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_actionDeclaration;
    return this;
}

ActionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionDeclarationContext.prototype.constructor = ActionDeclarationContext;

ActionDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ActionDeclarationContext.prototype.ACTION = function() {
    return this.getToken(P4Parser.ACTION, 0);
};

ActionDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ActionDeclarationContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

ActionDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ActionDeclarationContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

ActionDeclarationContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

ActionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterActionDeclaration(this);
	}
};

ActionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitActionDeclaration(this);
	}
};




P4Parser.ActionDeclarationContext = ActionDeclarationContext;

P4Parser.prototype.actionDeclaration = function() {

    var localctx = new ActionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, P4Parser.RULE_actionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1287;
        this.optAnnotations();
        this.state = 1288;
        this.match(P4Parser.ACTION);
        this.state = 1289;
        this.name();
        this.state = 1290;
        this.match(P4Parser.L_PAREN);
        this.state = 1291;
        this.parameterList();
        this.state = 1292;
        this.match(P4Parser.R_PAREN);
        this.state = 1293;
        this.blockStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

VariableDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

VariableDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

VariableDeclarationContext.prototype.optInitializer = function() {
    return this.getTypedRuleContext(OptInitializerContext,0);
};

VariableDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitVariableDeclaration(this);
	}
};




P4Parser.VariableDeclarationContext = VariableDeclarationContext;

P4Parser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, P4Parser.RULE_variableDeclaration);
    try {
        this.state = 1306;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.PRAGMA:
        case P4Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1295;
            this.annotations(0);
            this.state = 1296;
            this.typeRef();
            this.state = 1297;
            this.name();
            this.state = 1298;
            this.optInitializer();
            this.state = 1299;
            this.match(P4Parser.SEMICOLON);
            break;
        case P4Parser.BOOL:
        case P4Parser.BIT:
        case P4Parser.ERROR:
        case P4Parser.INT:
        case P4Parser.TUPLE:
        case P4Parser.VARBIT:
        case P4Parser.DOT:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1301;
            this.typeRef();
            this.state = 1302;
            this.name();
            this.state = 1303;
            this.optInitializer();
            this.state = 1304;
            this.match(P4Parser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_constantDeclaration;
    return this;
}

ConstantDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDeclarationContext.prototype.constructor = ConstantDeclarationContext;

ConstantDeclarationContext.prototype.optAnnotations = function() {
    return this.getTypedRuleContext(OptAnnotationsContext,0);
};

ConstantDeclarationContext.prototype.CONST = function() {
    return this.getToken(P4Parser.CONST, 0);
};

ConstantDeclarationContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

ConstantDeclarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ConstantDeclarationContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

ConstantDeclarationContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

ConstantDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(P4Parser.SEMICOLON, 0);
};

ConstantDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterConstantDeclaration(this);
	}
};

ConstantDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitConstantDeclaration(this);
	}
};




P4Parser.ConstantDeclarationContext = ConstantDeclarationContext;

P4Parser.prototype.constantDeclaration = function() {

    var localctx = new ConstantDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, P4Parser.RULE_constantDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1308;
        this.optAnnotations();
        this.state = 1309;
        this.match(P4Parser.CONST);
        this.state = 1310;
        this.typeRef();
        this.state = 1311;
        this.name();
        this.state = 1312;
        this.match(P4Parser.ASSIGN);
        this.state = 1313;
        this.initializer();
        this.state = 1314;
        this.match(P4Parser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_optInitializer;
    return this;
}

OptInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptInitializerContext.prototype.constructor = OptInitializerContext;

OptInitializerContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

OptInitializerContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

OptInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterOptInitializer(this);
	}
};

OptInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitOptInitializer(this);
	}
};




P4Parser.OptInitializerContext = OptInitializerContext;

P4Parser.prototype.optInitializer = function() {

    var localctx = new OptInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, P4Parser.RULE_optInitializer);
    try {
        this.state = 1319;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.SEMICOLON:
            this.enterOuterAlt(localctx, 1);

            break;
        case P4Parser.ASSIGN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1317;
            this.match(P4Parser.ASSIGN);
            this.state = 1318;
            this.initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitInitializer(this);
	}
};




P4Parser.InitializerContext = InitializerContext;

P4Parser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, P4Parser.RULE_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1321;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.functionPrototype = function() {
    return this.getTypedRuleContext(FunctionPrototypeContext,0);
};

FunctionDeclarationContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitFunctionDeclaration(this);
	}
};




P4Parser.FunctionDeclarationContext = FunctionDeclarationContext;

P4Parser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, P4Parser.RULE_functionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1323;
        this.functionPrototype();
        this.state = 1324;
        this.blockStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.nonEmptyArgList = function() {
    return this.getTypedRuleContext(NonEmptyArgListContext,0);
};

ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitArgumentList(this);
	}
};




P4Parser.ArgumentListContext = ArgumentListContext;

P4Parser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, P4Parser.RULE_argumentList);
    try {
        this.state = 1328;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.R_PAREN:
            this.enterOuterAlt(localctx, 1);

            break;
        case P4Parser.ACTIONS:
        case P4Parser.APPLY:
        case P4Parser.ENTRIES:
        case P4Parser.ERROR:
        case P4Parser.FALSE:
        case P4Parser.KEY:
        case P4Parser.TYPE:
        case P4Parser.STATE:
        case P4Parser.THIS:
        case P4Parser.TRUE:
        case P4Parser.DONTCARE:
        case P4Parser.PLUS:
        case P4Parser.MINUS:
        case P4Parser.COMPLEMENT:
        case P4Parser.L_PAREN:
        case P4Parser.L_BRACE:
        case P4Parser.NOT:
        case P4Parser.DOT:
        case P4Parser.STRING_LITERAL:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
        case P4Parser.INTEGER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1327;
            this.nonEmptyArgList(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonEmptyArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_nonEmptyArgList;
    return this;
}

NonEmptyArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonEmptyArgListContext.prototype.constructor = NonEmptyArgListContext;

NonEmptyArgListContext.prototype.argument = function() {
    return this.getTypedRuleContext(ArgumentContext,0);
};

NonEmptyArgListContext.prototype.nonEmptyArgList = function() {
    return this.getTypedRuleContext(NonEmptyArgListContext,0);
};

NonEmptyArgListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

NonEmptyArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterNonEmptyArgList(this);
	}
};

NonEmptyArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitNonEmptyArgList(this);
	}
};



P4Parser.prototype.nonEmptyArgList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NonEmptyArgListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 230;
    this.enterRecursionRule(localctx, 230, P4Parser.RULE_nonEmptyArgList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1331;
        this.argument();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1338;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NonEmptyArgListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_nonEmptyArgList);
                this.state = 1333;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1334;
                this.match(P4Parser.COMMA);
                this.state = 1335;
                this.argument(); 
            }
            this.state = 1340;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgumentContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ArgumentContext.prototype.ASSIGN = function() {
    return this.getToken(P4Parser.ASSIGN, 0);
};

ArgumentContext.prototype.DONTCARE = function() {
    return this.getToken(P4Parser.DONTCARE, 0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitArgument(this);
	}
};




P4Parser.ArgumentContext = ArgumentContext;

P4Parser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, P4Parser.RULE_argument);
    try {
        this.state = 1347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1341;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1342;
            this.name();
            this.state = 1343;
            this.match(P4Parser.ASSIGN);
            this.state = 1344;
            this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1346;
            this.match(P4Parser.DONTCARE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionListContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionListContext.prototype.COMMA = function() {
    return this.getToken(P4Parser.COMMA, 0);
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitExpressionList(this);
	}
};



P4Parser.prototype.expressionList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 234;
    this.enterRecursionRule(localctx, 234, P4Parser.RULE_expressionList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1351;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            break;

        case 2:
            this.state = 1350;
            this.expression(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1358;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expressionList);
                this.state = 1353;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1354;
                this.match(P4Parser.COMMA);
                this.state = 1355;
                this.expression(0); 
            }
            this.state = 1360;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PrefixedNonTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_prefixedNonTypeName;
    return this;
}

PrefixedNonTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixedNonTypeNameContext.prototype.constructor = PrefixedNonTypeNameContext;

PrefixedNonTypeNameContext.prototype.nonTypeName = function() {
    return this.getTypedRuleContext(NonTypeNameContext,0);
};

PrefixedNonTypeNameContext.prototype.dotPrefix = function() {
    return this.getTypedRuleContext(DotPrefixContext,0);
};

PrefixedNonTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterPrefixedNonTypeName(this);
	}
};

PrefixedNonTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitPrefixedNonTypeName(this);
	}
};




P4Parser.PrefixedNonTypeNameContext = PrefixedNonTypeNameContext;

P4Parser.prototype.prefixedNonTypeName = function() {

    var localctx = new PrefixedNonTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, P4Parser.RULE_prefixedNonTypeName);
    try {
        this.state = 1365;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.ACTIONS:
        case P4Parser.APPLY:
        case P4Parser.ENTRIES:
        case P4Parser.KEY:
        case P4Parser.TYPE:
        case P4Parser.STATE:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1361;
            this.nonTypeName();
            break;
        case P4Parser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1362;
            this.dotPrefix();
            this.state = 1363;
            this.nonTypeName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LvalueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_lvalue;
    return this;
}

LvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LvalueContext.prototype.constructor = LvalueContext;

LvalueContext.prototype.prefixedNonTypeName = function() {
    return this.getTypedRuleContext(PrefixedNonTypeNameContext,0);
};

LvalueContext.prototype.THIS = function() {
    return this.getToken(P4Parser.THIS, 0);
};

LvalueContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

LvalueContext.prototype.DOT = function() {
    return this.getToken(P4Parser.DOT, 0);
};

LvalueContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

LvalueContext.prototype.L_BRACKET = function() {
    return this.getToken(P4Parser.L_BRACKET, 0);
};

LvalueContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LvalueContext.prototype.R_BRACKET = function() {
    return this.getToken(P4Parser.R_BRACKET, 0);
};

LvalueContext.prototype.COLON = function() {
    return this.getToken(P4Parser.COLON, 0);
};

LvalueContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterLvalue(this);
	}
};

LvalueContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitLvalue(this);
	}
};



P4Parser.prototype.lvalue = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LvalueContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 238;
    this.enterRecursionRule(localctx, 238, P4Parser.RULE_lvalue, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1370;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case P4Parser.ACTIONS:
        case P4Parser.APPLY:
        case P4Parser.ENTRIES:
        case P4Parser.KEY:
        case P4Parser.TYPE:
        case P4Parser.STATE:
        case P4Parser.DOT:
        case P4Parser.IDENTIFIER:
        case P4Parser.TYPE_IDENTIFIER:
            this.state = 1368;
            this.prefixedNonTypeName();
            break;
        case P4Parser.THIS:
            this.state = 1369;
            this.match(P4Parser.THIS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1389;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1387;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_lvalue);
                    this.state = 1372;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1373;
                    this.match(P4Parser.DOT);
                    this.state = 1374;
                    this.name();
                    break;

                case 2:
                    localctx = new LvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_lvalue);
                    this.state = 1375;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1376;
                    this.match(P4Parser.L_BRACKET);
                    this.state = 1377;
                    this.expression(0);
                    this.state = 1378;
                    this.match(P4Parser.R_BRACKET);
                    break;

                case 3:
                    localctx = new LvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_lvalue);
                    this.state = 1380;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1381;
                    this.match(P4Parser.L_BRACKET);
                    this.state = 1382;
                    this.expression(0);
                    this.state = 1383;
                    this.match(P4Parser.COLON);
                    this.state = 1384;
                    this.expression(0);
                    this.state = 1385;
                    this.match(P4Parser.R_BRACKET);
                    break;

                } 
            }
            this.state = 1391;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.INTEGER = function() {
    return this.getToken(P4Parser.INTEGER, 0);
};

ExpressionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(P4Parser.STRING_LITERAL, 0);
};

ExpressionContext.prototype.TRUE = function() {
    return this.getToken(P4Parser.TRUE, 0);
};

ExpressionContext.prototype.FALSE = function() {
    return this.getToken(P4Parser.FALSE, 0);
};

ExpressionContext.prototype.THIS = function() {
    return this.getToken(P4Parser.THIS, 0);
};

ExpressionContext.prototype.nonTypeName = function() {
    return this.getTypedRuleContext(NonTypeNameContext,0);
};

ExpressionContext.prototype.dotPrefix = function() {
    return this.getTypedRuleContext(DotPrefixContext,0);
};

ExpressionContext.prototype.L_BRACE = function() {
    return this.getToken(P4Parser.L_BRACE, 0);
};

ExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionContext.prototype.R_BRACE = function() {
    return this.getToken(P4Parser.R_BRACE, 0);
};

ExpressionContext.prototype.L_PAREN = function() {
    return this.getToken(P4Parser.L_PAREN, 0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.R_PAREN = function() {
    return this.getToken(P4Parser.R_PAREN, 0);
};

ExpressionContext.prototype.NOT = function() {
    return this.getToken(P4Parser.NOT, 0);
};

ExpressionContext.prototype.COMPLEMENT = function() {
    return this.getToken(P4Parser.COMPLEMENT, 0);
};

ExpressionContext.prototype.MINUS = function() {
    return this.getToken(P4Parser.MINUS, 0);
};

ExpressionContext.prototype.PLUS = function() {
    return this.getToken(P4Parser.PLUS, 0);
};

ExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ExpressionContext.prototype.DOT = function() {
    return this.getToken(P4Parser.DOT, 0);
};

ExpressionContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ExpressionContext.prototype.ERROR = function() {
    return this.getToken(P4Parser.ERROR, 0);
};

ExpressionContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

ExpressionContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ExpressionContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

ExpressionContext.prototype.MUL = function() {
    return this.getToken(P4Parser.MUL, 0);
};

ExpressionContext.prototype.DIV = function() {
    return this.getToken(P4Parser.DIV, 0);
};

ExpressionContext.prototype.MOD = function() {
    return this.getToken(P4Parser.MOD, 0);
};

ExpressionContext.prototype.PLUS_SAT = function() {
    return this.getToken(P4Parser.PLUS_SAT, 0);
};

ExpressionContext.prototype.MINUS_SAT = function() {
    return this.getToken(P4Parser.MINUS_SAT, 0);
};

ExpressionContext.prototype.SHL = function() {
    return this.getToken(P4Parser.SHL, 0);
};

ExpressionContext.prototype.R_ANGLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(P4Parser.R_ANGLE);
    } else {
        return this.getToken(P4Parser.R_ANGLE, i);
    }
};


ExpressionContext.prototype.LE = function() {
    return this.getToken(P4Parser.LE, 0);
};

ExpressionContext.prototype.GE = function() {
    return this.getToken(P4Parser.GE, 0);
};

ExpressionContext.prototype.L_ANGLE = function() {
    return this.getToken(P4Parser.L_ANGLE, 0);
};

ExpressionContext.prototype.NE = function() {
    return this.getToken(P4Parser.NE, 0);
};

ExpressionContext.prototype.EQ = function() {
    return this.getToken(P4Parser.EQ, 0);
};

ExpressionContext.prototype.BIT_AND = function() {
    return this.getToken(P4Parser.BIT_AND, 0);
};

ExpressionContext.prototype.BIT_XOR = function() {
    return this.getToken(P4Parser.BIT_XOR, 0);
};

ExpressionContext.prototype.BIT_OR = function() {
    return this.getToken(P4Parser.BIT_OR, 0);
};

ExpressionContext.prototype.PP = function() {
    return this.getToken(P4Parser.PP, 0);
};

ExpressionContext.prototype.AND = function() {
    return this.getToken(P4Parser.AND, 0);
};

ExpressionContext.prototype.OR = function() {
    return this.getToken(P4Parser.OR, 0);
};

ExpressionContext.prototype.QUESTION = function() {
    return this.getToken(P4Parser.QUESTION, 0);
};

ExpressionContext.prototype.COLON = function() {
    return this.getToken(P4Parser.COLON, 0);
};

ExpressionContext.prototype.L_BRACKET = function() {
    return this.getToken(P4Parser.L_BRACKET, 0);
};

ExpressionContext.prototype.R_BRACKET = function() {
    return this.getToken(P4Parser.R_BRACKET, 0);
};

ExpressionContext.prototype.realTypeArgumentList = function() {
    return this.getTypedRuleContext(RealTypeArgumentListContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitExpression(this);
	}
};



P4Parser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 240;
    this.enterRecursionRule(localctx, 240, P4Parser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1435;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1393;
            this.match(P4Parser.INTEGER);
            break;

        case 2:
            this.state = 1394;
            this.match(P4Parser.STRING_LITERAL);
            break;

        case 3:
            this.state = 1395;
            this.match(P4Parser.TRUE);
            break;

        case 4:
            this.state = 1396;
            this.match(P4Parser.FALSE);
            break;

        case 5:
            this.state = 1397;
            this.match(P4Parser.THIS);
            break;

        case 6:
            this.state = 1398;
            this.nonTypeName();
            break;

        case 7:
            this.state = 1399;
            this.dotPrefix();
            this.state = 1400;
            this.nonTypeName();
            break;

        case 8:
            this.state = 1402;
            this.match(P4Parser.L_BRACE);
            this.state = 1403;
            this.expressionList(0);
            this.state = 1404;
            this.match(P4Parser.R_BRACE);
            break;

        case 9:
            this.state = 1406;
            this.match(P4Parser.L_PAREN);
            this.state = 1407;
            this.expression(0);
            this.state = 1408;
            this.match(P4Parser.R_PAREN);
            break;

        case 10:
            this.state = 1410;
            this.match(P4Parser.NOT);
            this.state = 1411;
            this.expression(33);
            break;

        case 11:
            this.state = 1412;
            this.match(P4Parser.COMPLEMENT);
            this.state = 1413;
            this.expression(32);
            break;

        case 12:
            this.state = 1414;
            this.match(P4Parser.MINUS);
            this.state = 1415;
            this.expression(31);
            break;

        case 13:
            this.state = 1416;
            this.match(P4Parser.PLUS);
            this.state = 1417;
            this.expression(30);
            break;

        case 14:
            this.state = 1418;
            this.typeName();
            this.state = 1419;
            this.match(P4Parser.DOT);
            this.state = 1420;
            this.name();
            break;

        case 15:
            this.state = 1422;
            this.match(P4Parser.ERROR);
            this.state = 1423;
            this.match(P4Parser.DOT);
            this.state = 1424;
            this.name();
            break;

        case 16:
            this.state = 1425;
            this.namedType();
            this.state = 1426;
            this.match(P4Parser.L_PAREN);
            this.state = 1427;
            this.argumentList();
            this.state = 1428;
            this.match(P4Parser.R_PAREN);
            break;

        case 17:
            this.state = 1430;
            this.match(P4Parser.L_PAREN);
            this.state = 1431;
            this.typeRef();
            this.state = 1432;
            this.match(P4Parser.R_PAREN);
            this.state = 1433;
            this.expression(1);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1537;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1535;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1437;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 1438;
                    this.match(P4Parser.MUL);
                    this.state = 1439;
                    this.expression(27);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1440;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 1441;
                    this.match(P4Parser.DIV);
                    this.state = 1442;
                    this.expression(26);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1443;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 1444;
                    this.match(P4Parser.MOD);
                    this.state = 1445;
                    this.expression(25);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1446;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 1447;
                    this.match(P4Parser.PLUS);
                    this.state = 1448;
                    this.expression(24);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1449;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1450;
                    this.match(P4Parser.MINUS);
                    this.state = 1451;
                    this.expression(23);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1452;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1453;
                    this.match(P4Parser.PLUS_SAT);
                    this.state = 1454;
                    this.expression(22);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1455;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1456;
                    this.match(P4Parser.MINUS_SAT);
                    this.state = 1457;
                    this.expression(21);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1458;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1459;
                    this.match(P4Parser.SHL);
                    this.state = 1460;
                    this.expression(20);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1461;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1462;
                    this.match(P4Parser.R_ANGLE);
                    this.state = 1463;
                    this.match(P4Parser.R_ANGLE);
                    this.state = 1464;
                    this.expression(19);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1465;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1466;
                    this.match(P4Parser.LE);
                    this.state = 1467;
                    this.expression(18);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1468;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1469;
                    this.match(P4Parser.GE);
                    this.state = 1470;
                    this.expression(17);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1471;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1472;
                    this.match(P4Parser.L_ANGLE);
                    this.state = 1473;
                    this.expression(16);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1474;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1475;
                    this.match(P4Parser.R_ANGLE);
                    this.state = 1476;
                    this.expression(15);
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1477;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1478;
                    this.match(P4Parser.NE);
                    this.state = 1479;
                    this.expression(14);
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1480;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1481;
                    this.match(P4Parser.EQ);
                    this.state = 1482;
                    this.expression(13);
                    break;

                case 16:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1483;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1484;
                    this.match(P4Parser.BIT_AND);
                    this.state = 1485;
                    this.expression(12);
                    break;

                case 17:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1486;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1487;
                    this.match(P4Parser.BIT_XOR);
                    this.state = 1488;
                    this.expression(11);
                    break;

                case 18:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1489;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1490;
                    this.match(P4Parser.BIT_OR);
                    this.state = 1491;
                    this.expression(10);
                    break;

                case 19:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1492;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1493;
                    this.match(P4Parser.PP);
                    this.state = 1494;
                    this.expression(9);
                    break;

                case 20:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1495;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1496;
                    this.match(P4Parser.AND);
                    this.state = 1497;
                    this.expression(8);
                    break;

                case 21:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1498;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1499;
                    this.match(P4Parser.OR);
                    this.state = 1500;
                    this.expression(7);
                    break;

                case 22:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1501;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1502;
                    this.match(P4Parser.QUESTION);
                    this.state = 1503;
                    this.expression(0);
                    this.state = 1504;
                    this.match(P4Parser.COLON);
                    this.state = 1505;
                    this.expression(6);
                    break;

                case 23:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1507;
                    if (!( this.precpred(this._ctx, 37))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
                    }
                    this.state = 1508;
                    this.match(P4Parser.L_BRACKET);
                    this.state = 1509;
                    this.expression(0);
                    this.state = 1510;
                    this.match(P4Parser.R_BRACKET);
                    break;

                case 24:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1512;
                    if (!( this.precpred(this._ctx, 36))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
                    }
                    this.state = 1513;
                    this.match(P4Parser.L_BRACKET);
                    this.state = 1514;
                    this.expression(0);
                    this.state = 1515;
                    this.match(P4Parser.COLON);
                    this.state = 1516;
                    this.expression(0);
                    this.state = 1517;
                    this.match(P4Parser.R_BRACKET);
                    break;

                case 25:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1519;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 1520;
                    this.match(P4Parser.DOT);
                    this.state = 1521;
                    this.name();
                    break;

                case 26:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1522;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1523;
                    this.match(P4Parser.L_ANGLE);
                    this.state = 1524;
                    this.realTypeArgumentList(0);
                    this.state = 1525;
                    this.match(P4Parser.R_ANGLE);
                    this.state = 1526;
                    this.match(P4Parser.L_PAREN);
                    this.state = 1527;
                    this.argumentList();
                    this.state = 1528;
                    this.match(P4Parser.R_PAREN);
                    break;

                case 27:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, P4Parser.RULE_expression);
                    this.state = 1530;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1531;
                    this.match(P4Parser.L_PAREN);
                    this.state = 1532;
                    this.argumentList();
                    this.state = 1533;
                    this.match(P4Parser.R_PAREN);
                    break;

                } 
            }
            this.state = 1539;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Type_or_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = P4Parser.RULE_type_or_id;
    return this;
}

Type_or_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_or_idContext.prototype.constructor = Type_or_idContext;

Type_or_idContext.prototype.IDENTIFIER = function() {
    return this.getToken(P4Parser.IDENTIFIER, 0);
};

Type_or_idContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(P4Parser.TYPE_IDENTIFIER, 0);
};

Type_or_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.enterType_or_id(this);
	}
};

Type_or_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof P4Listener ) {
        listener.exitType_or_id(this);
	}
};




P4Parser.Type_or_idContext = Type_or_idContext;

P4Parser.prototype.type_or_id = function() {

    var localctx = new Type_or_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, P4Parser.RULE_type_or_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1540;
        _la = this._input.LA(1);
        if(!(_la===P4Parser.IDENTIFIER || _la===P4Parser.TYPE_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


P4Parser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 2:
			return this.input_sempred(localctx, predIndex);
	case 10:
			return this.annotations_sempred(localctx, predIndex);
	case 12:
			return this.annotationBody_sempred(localctx, predIndex);
	case 14:
			return this.kvList_sempred(localctx, predIndex);
	case 17:
			return this.nonEmptyParameterList_sempred(localctx, predIndex);
	case 23:
			return this.objDeclarations_sempred(localctx, predIndex);
	case 28:
			return this.parserLocalElements_sempred(localctx, predIndex);
	case 31:
			return this.parserStates_sempred(localctx, predIndex);
	case 33:
			return this.parserStatements_sempred(localctx, predIndex);
	case 39:
			return this.selectCaseList_sempred(localctx, predIndex);
	case 43:
			return this.simpleExpressionList_sempred(localctx, predIndex);
	case 48:
			return this.controlLocalDeclarations_sempred(localctx, predIndex);
	case 52:
			return this.methodPrototypes_sempred(localctx, predIndex);
	case 65:
			return this.typeParameterList_sempred(localctx, predIndex);
	case 67:
			return this.typeArgumentList_sempred(localctx, predIndex);
	case 69:
			return this.realTypeArgumentList_sempred(localctx, predIndex);
	case 75:
			return this.structFieldList_sempred(localctx, predIndex);
	case 78:
			return this.specifiedIdentifierList_sempred(localctx, predIndex);
	case 82:
			return this.identifierList_sempred(localctx, predIndex);
	case 92:
			return this.statOrDeclList_sempred(localctx, predIndex);
	case 94:
			return this.switchCases_sempred(localctx, predIndex);
	case 99:
			return this.tablePropertyList_sempred(localctx, predIndex);
	case 101:
			return this.keyElementList_sempred(localctx, predIndex);
	case 103:
			return this.actionList_sempred(localctx, predIndex);
	case 107:
			return this.entriesList_sempred(localctx, predIndex);
	case 115:
			return this.nonEmptyArgList_sempred(localctx, predIndex);
	case 117:
			return this.expressionList_sempred(localctx, predIndex);
	case 119:
			return this.lvalue_sempred(localctx, predIndex);
	case 120:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

P4Parser.prototype.input_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.annotations_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.annotationBody_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		case 4:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.kvList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.nonEmptyParameterList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.objDeclarations_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.parserLocalElements_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.parserStates_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.parserStatements_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.selectCaseList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.simpleExpressionList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.controlLocalDeclarations_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 13:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.methodPrototypes_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 14:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.typeParameterList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 15:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.typeArgumentList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 16:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.realTypeArgumentList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 17:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.structFieldList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 18:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.specifiedIdentifierList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 19:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.identifierList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 20:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.statOrDeclList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 21:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.switchCases_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 22:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.tablePropertyList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 23:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.keyElementList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 24:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.actionList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 25:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.entriesList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 26:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.nonEmptyArgList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 27:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.expressionList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.lvalue_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 3);
		case 30:
			return this.precpred(this._ctx, 2);
		case 31:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

P4Parser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return this.precpred(this._ctx, 26);
		case 33:
			return this.precpred(this._ctx, 25);
		case 34:
			return this.precpred(this._ctx, 24);
		case 35:
			return this.precpred(this._ctx, 23);
		case 36:
			return this.precpred(this._ctx, 22);
		case 37:
			return this.precpred(this._ctx, 21);
		case 38:
			return this.precpred(this._ctx, 20);
		case 39:
			return this.precpred(this._ctx, 19);
		case 40:
			return this.precpred(this._ctx, 18);
		case 41:
			return this.precpred(this._ctx, 17);
		case 42:
			return this.precpred(this._ctx, 16);
		case 43:
			return this.precpred(this._ctx, 15);
		case 44:
			return this.precpred(this._ctx, 14);
		case 45:
			return this.precpred(this._ctx, 13);
		case 46:
			return this.precpred(this._ctx, 12);
		case 47:
			return this.precpred(this._ctx, 11);
		case 48:
			return this.precpred(this._ctx, 10);
		case 49:
			return this.precpred(this._ctx, 9);
		case 50:
			return this.precpred(this._ctx, 8);
		case 51:
			return this.precpred(this._ctx, 7);
		case 52:
			return this.precpred(this._ctx, 6);
		case 53:
			return this.precpred(this._ctx, 5);
		case 54:
			return this.precpred(this._ctx, 37);
		case 55:
			return this.precpred(this._ctx, 36);
		case 56:
			return this.precpred(this._ctx, 27);
		case 57:
			return this.precpred(this._ctx, 4);
		case 58:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.P4Parser = P4Parser;
