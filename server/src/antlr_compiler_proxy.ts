import {
	TextDocument,
	Diagnostic,
	DiagnosticSeverity,
	CompletionItemKind,
	Range,
} from 'vscode-languageserver';

import { loglog , logloglog } from './utils';


export let antlrP4HeaderDec: Map<string, any[]> = new Map();
export let antlrP4StructHeaders: Map<string, string> = new Map();

import { CommonTokenStream, InputStream} from 'antlr4';
import { ErrorListener } from 'antlr4/error';

import { P4Lexer } from './antlr_autogenerated/P4Lexer';
import { P4Parser } from './antlr_autogenerated/P4Parser';
import { P4Listener } from './antlr_autogenerated/P4Listener';
import { ParseTreeWalker } from 'antlr4/tree';

import { connection } from './server';


let MyP4Listner = function() : void {
	P4Listener.call(this); // inherit default listener
	return this;
};
// continue inheriting default listener
MyP4Listner.prototype = Object.create(P4Listener.prototype);
MyP4Listner.prototype.constructor = MyP4Listner;


////symbol table -> installed package from https://www.npmjs.com/package/symbol-table (npm install symbol-table)
var SymbolTable = require("symbol-table");

//pointers array (no pointers in Javascript but this will act like it)
var symPtrs = [];

//pushing global scope to the top of the pointer array
symPtrs.push(SymbolTable());

var top;

var pScope;	//pushedScope

var sScope;	//savedScope
var sScopeArr = []; //savedScopeArray


//for every identifier i should define the type. Store the context and the type

MyP4Listner.prototype.enterConstantDeclaration = function(ctx) {
	logloglog("CONSTANT");

	//create a new symbol table for each one

	top = symPtrs[symPtrs.length-1];	//setting "top" to the top of the stack
	pScope = top.push();	//creating a new scope on top of the current top
	pScope.set(ctx.identifier, ctx);	//setting the name as the identifier, and the information as the node in the tree
	symPtrs.push(pScope);	//pushing the new scope onto the symPtrs array
	
};

MyP4Listner.prototype.exitConstantDeclaration = function(ctx){
	logloglog("Constant");

	//on exit i should pop it off and then save it somewhere

	top = symPtrs[symPtrs.length-1];	//setting "top" to the top of the stack
	sScope = top.pop();	//pop the top of the stack
	sScopeArr.push(sScope);	//save pushed scope in case we need it
};



MyP4Listner.prototype.enterTableDeclaration = function(ctx){
	logloglog("TABLE");
};

MyP4Listner.prototype.enterAssignmentOrMethodCallStatement = function(ctx) {
	// loglog("Assign: " + ctx.getText());
};


export function sendToAntlrCompiler(textDocument: TextDocument){
	loglog("Running Antlr Compiler");
	let myP4Listner = new MyP4Listner();
	let errorListener: MyErrorListner = new MyErrorListner(textDocument);
	let tree = setupLexerAndParser(textDocument, errorListener);
	try{
		ParseTreeWalker.DEFAULT.walk(myP4Listner, tree);
	} catch(e){}

	if(!errorListener.isEmpty()){
		let diagnostics: Diagnostic[] = errorListener.getDiagnostics();
		connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
	}
}

function setupLexerAndParser(textDocument: TextDocument, errorListener: MyErrorListner) {
	let input: string = textDocument.getText();
	let chars = new InputStream(input);
	let lexer = new P4Lexer(chars);
	lexer.strictMode = false; // do not use js strictMode
	let tokens = new CommonTokenStream(lexer);
	let parser = new P4Parser(tokens);

	parser.removeErrorListeners(); // Remove default ConsoleErrorListener
	parser.addErrorListener(errorListener); // Add custom error listener

	parser.buildParseTrees = true;
	let tree = parser.input();
	return tree;
}

class MyErrorListner extends ErrorListener {
	textDocument: TextDocument;
	diagnostics: Diagnostic[] = [];

	constructor(text: TextDocument){
		super();
		this.textDocument = text;
	}

	isEmpty(): boolean {
		return this.diagnostics.length == 0;
	}

	getDiagnostics(): Diagnostic[]{
		return this.diagnostics;
	}

	syntaxError(recognizer, symbol, line, column, message, payload) {
		let diagnosic : Diagnostic = this.convertToDiagnostic(symbol, message);
		this.diagnostics.push(diagnosic);
	}

	convertToDiagnostic(symbol, message): Diagnostic{
		let diagnosic: Diagnostic = {
			severity: DiagnosticSeverity.Error,
			range: {
				start: this.textDocument.positionAt(symbol.start),
				end: this.textDocument.positionAt(symbol.stop),
			},
			message: message,
			source: 'P4 Extension'
		};
		return diagnosic;
	}
}

