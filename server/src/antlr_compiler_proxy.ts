import {
	TextDocument,
	Diagnostic,
	DiagnosticSeverity,
	CompletionItemKind,
	Range,
} from 'vscode-languageserver';

import { logDebug, logDebugT, logInfo} from './utils/logger';
import { CommonTokenStream, InputStream} from 'antlr4';
import { P4Lexer } from './antlr_autogenerated/P4Lexer';
import { P4Parser } from './antlr_autogenerated/P4Parser';
import { ParseTreeWalker } from 'antlr4/tree';
import { p4ExtensionServer } from './server';
import { MyErrorListner } from './antlr_error_listner';
import { MyP4Listener } from './compiler/my_p4_listener';


export function sendToAntlrCompiler(textDocument: TextDocument){
	logDebugT("Compile request to ANTLR4 compiler.....");

	let errorListener: MyErrorListner = new MyErrorListner(textDocument);
	let tree = setupLexerAndParser(textDocument, errorListener);
	try{
		ParseTreeWalker.DEFAULT.walk(new MyP4Listener(), tree);
	} catch(e){}

	logDebugT("ANTLR compiler Finished!");

	if(!errorListener.isEmpty()){
		let diagnostics: Diagnostic[] = errorListener.getDiagnostics();
		p4ExtensionServer.connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
	}
}

function setupLexerAndParser(textDocument: TextDocument, errorListener: MyErrorListner) {
	let input: string = textDocument.getText();
	let chars = new InputStream(input);
	let lexer = new P4Lexer(chars);
	lexer.strictMode = false; // do not use js strictMode
	let tokens = new CommonTokenStream(lexer);
	let parser = new P4Parser(tokens);

	parser.removeErrorListeners(); // Remove default ConsoleErrorListener
	parser.addErrorListener(errorListener); // Add custom error listener

	parser.buildParseTrees = true;
	let tree = parser.input();
	return tree;
}

