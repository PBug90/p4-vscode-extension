import {
	TextDocument,
	Diagnostic,
	DiagnosticSeverity,
	CompletionItemKind,
	DidChangeTextDocumentNotification,
} from 'vscode-languageserver';

import { loglog , logloglog } from './utils';


export let antlrP4HeaderDec: Map<string, any[]> = new Map();
export let antlrP4StructHeaders: Map<string, string> = new Map();

import { CommonTokenStream, InputStream} from 'antlr4';

import { P4Lexer } from './antlr_autogenerated/P4Lexer';
import { P4Parser } from './antlr_autogenerated/P4Parser';
import { P4Listener } from './antlr_autogenerated/P4Listener';
import { ParseTreeWalker } from 'antlr4/tree';
import { SIGUSR1 } from 'constants';
import { EOF } from 'dns';
import  { SymbolTablePass }  from './symbolTablePass';
import  { SymbolTableCheck }  from './symbolTableCheck';


export function sendToAntlrCompiler(textDocument: TextDocument){
	loglog("Change in the code. Running Antlr Compiler");

	let input : string = textDocument.getText();
	var chars = new InputStream(input);
	var lexer = new P4Lexer(chars);

	lexer.strictMode = false; // do not use js strictMode

	var tokens = new CommonTokenStream(lexer);
	var parser = new P4Parser(tokens);
	parser.buildParseTrees = true;
	var tree = parser.input();

	////Establishing symbol table -> installed package from https://www.npmjs.com/package/symbol-table (npm install symbol-table)
	var SymbolTable = require("symbol-table");
	var SymbolTableStack = require("symbol-table/stack");
	var symTableStack = SymbolTableStack();

	var symTablePass = new SymbolTablePass(symTableStack);
	
	ParseTreeWalker.DEFAULT.walk(symTablePass, tree);
	try{
		//ParseTreeWalker.DEFAULT.walk(symTablePass, tree);	
	} catch(e){}

	var symTableCheck = new SymbolTableCheck(symTableStack);
	ParseTreeWalker.DEFAULT.walk(symTableCheck, tree);	
	try{
		//ParseTreeWalker.DEFAULT.walk(symTableCheck, tree);
	} catch(e){}
}


