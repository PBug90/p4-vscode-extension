import { P4Listener } from '../antlr_autogenerated/P4Listener';
import { logDebug, logInfo} from '../utils/logger';
import { P4IRTypes } from './p4_ir_types';
import { SymbolTable } from './symbol_table';
import { Attribute } from './p4_ir';
import { TextDocumentPositionParams, CompletionItem, CompletionItemKind } from 'vscode-languageserver';
import { getName } from '../antlr_compiler_proxy';

export class MyP4Listener extends P4Listener{
	private sTable: SymbolTable;

	constructor(){
		super();
		P4Listener.call(this);
		this.sTable = new SymbolTable();
	}

	getAutoCompletions(keyword: string | null, pos: TextDocumentPositionParams): CompletionItem[] {
		// TODO: hot keyword to be shown in the top of the list
		return this.sTable.getAutoCompletion(keyword, pos);
	}

	pushBlock(type: P4IRTypes, ctx){
		let attr: Attribute | null = null;
		let name: string | null  = getName(ctx);
		if(name != null)
			attr = new Attribute(name , type, CompletionItemKind.Class, ctx);
		this.sTable.push(ctx, type, attr);
	}

	enterProgram(ctx){
		this.sTable.push(ctx, P4IRTypes.P4_PROGRAM, null);
	}

	exitProgram(ctx){
		this.sTable.pop();
	}

	enterTableDeclaration(ctx){
		this.pushBlock(P4IRTypes.TABLE, ctx);
	}

	exitTableDeclaration(ctx){
		this.sTable.pop();
	}

	enterControlDeclaration(ctx){
		this.pushBlock(P4IRTypes.CONTROLLER, ctx);
	}

	exitControlDeclaration(ctx){
		this.sTable.pop();
	}

	enterActionDeclaration(ctx){
		this.pushBlock(P4IRTypes.ACTION, ctx);
	}

	exitActionDeclaration(ctx){
		this.sTable.pop();
	}

	enterConstantDeclaration(ctx) {
		let name: string | null  = getName(ctx);
		let type: string = ctx.typeRef().getText();
		let attr: Attribute = new Attribute(name, type, CompletionItemKind.Constant , ctx);
		this.sTable.add_attr(attr);
	}

	enterVariableDeclaration(ctx){
		let name: string | null  = getName(ctx);
		let type: string = ctx.typeRef().getText();
		let attr: Attribute = new Attribute(name, type, CompletionItemKind.Variable , ctx);
		this.sTable.add_attr(attr);
	}

	enterParameter(ctx) {
		let name: string = ctx.name().getText();
		let type: string = ctx.typeRef().getText();
		let attr: Attribute = new Attribute(name, type, CompletionItemKind.Variable, ctx);
		this.sTable.add_attr(attr);
	}


}