//anywhere I push and pop in the first, i push and pop here
// difference is that I have to check not at the declaration, but the use. 
//there is a use in the names of the actions in the symbol table, but i've never defined these actions in the code pass, but there's undefined variable

import {
	TextDocument,
	Diagnostic,
	DiagnosticSeverity,
	CompletionItemKind,
	DidChangeTextDocumentNotification,
} from 'vscode-languageserver';

import { loglog , logloglog } from './utils';


export let antlrP4HeaderDec: Map<string, any[]> = new Map();
export let antlrP4StructHeaders: Map<string, string> = new Map();

import { CommonTokenStream, InputStream} from 'antlr4';

import { P4Lexer } from './antlr_autogenerated/P4Lexer';
import { P4Parser } from './antlr_autogenerated/P4Parser';
import { P4Listener } from './antlr_autogenerated/P4Listener';
import { ParseTreeWalker } from 'antlr4/tree';
import { SIGUSR1 } from 'constants';
import { EOF } from 'dns';

	var MyP4Listner = function(table) : void {
		P4Listener.call(this); // inherit default listener
		P4Listener.symTableStack = table;
		return this;
	};


	function addSymbolTableEntry(stack, id, entry) {
		logloglog("identifier: " + id);
		logloglog("entry: " + entry);
		logloglog("stack height: " + stack.height());
		stack.set(id, entry); 
	}

	function peekAndPop(stack, saver){
		var peeker = stack[stack.length-1];
		var popper = peeker.pop();
		saver.add(popper);	//I am just saving this in a another array, but I need to figure out how to organize it
	
		return stack;
	}

	// continue inheriting default listener
	MyP4Listner.prototype = Object.create(P4Listener.prototype);
	MyP4Listner.prototype.constructor = MyP4Listner;

exports.SymbolTableCheck = MyP4Listner;