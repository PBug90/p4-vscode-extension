import {
	TextDocument,
	Diagnostic,
	DiagnosticSeverity,
	CompletionItemKind,
	DidChangeTextDocumentNotification,
} from 'vscode-languageserver';

import { loglog , logloglog } from './utils';


export let antlrP4HeaderDec: Map<string, any[]> = new Map();
export let antlrP4StructHeaders: Map<string, string> = new Map();

import { CommonTokenStream, InputStream} from 'antlr4';

import { P4Lexer } from './antlr_autogenerated/P4Lexer';
import { P4Parser } from './antlr_autogenerated/P4Parser';
import { P4Listener } from './antlr_autogenerated/P4Listener';
import { ParseTreeWalker } from 'antlr4/tree';
import { SIGUSR1 } from 'constants';
import { EOF } from 'dns';

	var MyP4Listner = function(table) : void {
		P4Listener.call(this); // inherit default listener
		P4Listener.symTableStack = table;
		return this;
	};

	
	function addSymbolTableEntry(stack, id, entry) {
		logloglog("identifier: " + id);
		logloglog("entry: " + entry);
		logloglog("stack height: " + stack.height());
		stack.set(id, entry); 
	}

	function peekAndPop(stack, saver){
		var peeker = stack[stack.length-1];
		var popper = peeker.pop();
		saver.add(popper);	//I am just saving this in a another array, but I need to figure out how to organize it
	
		return stack;
	}

	// continue inheriting default listener
	MyP4Listner.prototype = Object.create(P4Listener.prototype);
	MyP4Listner.prototype.constructor = MyP4Listner;

	
	MyP4Listner.prototype.enterConstantDeclaration = function(ctx) {
		var id = ctx.getChild(3).getText();
		var entry = ctx;
		addSymbolTableEntry(this.symTableStack, id, ctx);
	};

	MyP4Listner.prototype.enterControlDeclaration = function(ctx) {
		var id = ctx.getChild(0).getText();
		var entry = ctx;
		addSymbolTableEntry(this.symTableStack, id, ctx);
		this.symTableStack.push();  
	};

	MyP4Listner.prototype.exitControlDeclaration = function(ctx) {
		this.symTableStack.pop();  
	};

	// Enter a parse tree produced by P4Parser#tableDeclaration.
	P4Listener.prototype.enterTableDeclaration = function(ctx: any) {
		logloglog("enter table");
		var id = ctx.getChild(2).getText();
		var entry = ctx;
		addSymbolTableEntry(this.symTableStack, id, ctx);
		this.symTableStack.push();  
	};

	P4Listener.prototype.exitTableDeclaration = function(ctx: any) {
		this.symTableStack.pop();  
	};

	MyP4Listner.prototype.enterAssignmentOrMethodCallStatement = function(ctx) {
		logloglog("Assign: " + ctx.getText());
	};

	exports.SymbolTablePass = MyP4Listner;

